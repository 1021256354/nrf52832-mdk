{
    "docs": [
        {
            "location": "/", 
            "text": "nRF52832-MDK \nOpen Source Hardware for IoT Embedded Applications\n\n\nnRF52832-MDK\n \u662f\u4e00\u6b3e\u5b8c\u5168\u5f00\u6e90\u3001\u57fa\u4e8e \nNordic\n \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247 \nnRF52832\n\u3001\u9762\u5411\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6\uff0c\u96c6\u6210\u591a\u529f\u80fd\u8c03\u8bd5\u5668\uff0c\u652f\u6301\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\uff0c\u652f\u6301\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\uff0c\u5e0c\u671b\u7ed9\u4f60\u5e26\u6765\u4e0d\u540c\u4e8e\u4ee5\u5f80\u7684\u5f00\u53d1\u4f53\u9a8c\u3002\n\n\n\n\n\u5b8c\u5168\u5f00\u6e90\n\n\nnRF52832-MDK \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u6240\u6709\u786c\u4ef6\u8bbe\u8ba1\u8d44\u6599\u3001\u6e90\u4ee3\u7801\u3001\u5f00\u53d1\u6587\u6863\u5b8c\u5168\u5f00\u6e90\uff0c\u9879\u76ee\u6258\u7ba1\u5728 \nGitHub\n \u4e0a\uff0c\u7531\u793e\u533a\u5171\u540c\u7ef4\u62a4\uff0c\u70b9\u51fb\u9875\u9762\u53f3\u4e0a\u89d2\u6309\u94ae\u53ef\u524d\u5f80\u6e90\u7801\u4ed3\u5e93\u3002\n\n\n\n\nnRF52832 SoC\n\n\nnRF52832\n \u662f Nordic Semiconductor \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u7684\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247\uff0cARM\u00ae Cortex\u2122-M4F \u5185\u6838\uff0c512kB Flash + 64kB RAM\uff0c\u652f\u6301 BLE, ANT, 2.4GHz \u534f\u8bae\u6808\u3002\n\n\n\n\n\u96c6\u6210\u8c03\u8bd5\u5668\n\n\nnRF52832-MDK \u96c6\u6210\u4e86\u591a\u529f\u80fd\u8c03\u8bd5\u5668 DAPLink\uff0c\u5373\u63d2\u5373\u7528\uff0c\u53ef\u5b9e\u73b0 U \u76d8\u76f4\u63a5\u201c\u62d6\u653e\u201d\u4e0b\u8f7d\u56fa\u4ef6\u3001\u4e32\u53e3\u8c03\u8bd5\u3001CMSIS-DAP \u4eff\u771f\u8c03\u8bd5\u3002\n\n\n\u524d\u5f80 GitHub \u67e5\u770b\n\n\n\n\n\n\n\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\n\n\nnRF52832-MDK \u53ef\u4ee5\u7528\u6765\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\uff0c\u5305\u62ec \nnRF5 SDK\n, \nmbed OS 5\n, \nZephyr\n, \nJerryScript\n, \nEspruino\n, \nWeb Bluetooth\n, \nEddystone\n, \nPhysical Web\n \u7b49\u7b49....\n\n\n\n\n\u8de8\u5e73\u53f0\u5f00\u53d1\n\n\n\u4f7f\u7528\u5f00\u6e90\u5de5\u5177\u94fe\uff0cnRF52832-MDK \u53ef\u5b9e\u73b0\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u6ee1\u8db3 Mac OSX, Linux, Windows \u5f00\u53d1\u8005\u7684\u5f00\u53d1\u9700\u6c42\u3002\n\n\n\n\n\u63d0\u4f9b\u5728\u7ebf\u6587\u6863\n\n\nnRF52832-MDK \u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\uff0c\u4f7f\u7528 \nMkDocs\n \u751f\u6210\u6587\u6863\uff0c\u6258\u7ba1\u5728 \nGitHub\n\uff0c\u65b9\u4fbf\u5f00\u6e90\u7231\u597d\u8005\u4e00\u8d77\u7ef4\u62a4\uff0c\u540c\u65f6\u63d0\u4f9b CDN \u52a0\u901f\uff0c\u5b9e\u73b0\u5feb\u901f\u8bbf\u95ee\u3002\n\n\n\n\n\u652f\u6301\u4e00\u4e0b\n\n\n\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u611f\u5174\u8da3\u540c\u65f6\u4e5f\u60f3\u652f\u6301\u6211\u4e00\u4e0b\uff0c\u6233\u4e00\u4e0b\u5457\uff1a\n\u8d2d\u4e70\u94fe\u63a5\n\u3002\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u9996\u9875"
        }, 
        {
            "location": "/#nrf52832-mdk-open-source-hardware-for-iot-embedded-applications", 
            "text": "nRF52832-MDK  \u662f\u4e00\u6b3e\u5b8c\u5168\u5f00\u6e90\u3001\u57fa\u4e8e  Nordic  \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247  nRF52832 \u3001\u9762\u5411\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6\uff0c\u96c6\u6210\u591a\u529f\u80fd\u8c03\u8bd5\u5668\uff0c\u652f\u6301\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\uff0c\u652f\u6301\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\uff0c\u5e0c\u671b\u7ed9\u4f60\u5e26\u6765\u4e0d\u540c\u4e8e\u4ee5\u5f80\u7684\u5f00\u53d1\u4f53\u9a8c\u3002", 
            "title": "nRF52832-MDK Open Source Hardware for IoT Embedded Applications"
        }, 
        {
            "location": "/#_1", 
            "text": "nRF52832-MDK \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u6240\u6709\u786c\u4ef6\u8bbe\u8ba1\u8d44\u6599\u3001\u6e90\u4ee3\u7801\u3001\u5f00\u53d1\u6587\u6863\u5b8c\u5168\u5f00\u6e90\uff0c\u9879\u76ee\u6258\u7ba1\u5728  GitHub  \u4e0a\uff0c\u7531\u793e\u533a\u5171\u540c\u7ef4\u62a4\uff0c\u70b9\u51fb\u9875\u9762\u53f3\u4e0a\u89d2\u6309\u94ae\u53ef\u524d\u5f80\u6e90\u7801\u4ed3\u5e93\u3002", 
            "title": "\u5b8c\u5168\u5f00\u6e90"
        }, 
        {
            "location": "/#nrf52832-soc", 
            "text": "nRF52832  \u662f Nordic Semiconductor \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u7684\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247\uff0cARM\u00ae Cortex\u2122-M4F \u5185\u6838\uff0c512kB Flash + 64kB RAM\uff0c\u652f\u6301 BLE, ANT, 2.4GHz \u534f\u8bae\u6808\u3002", 
            "title": "nRF52832 SoC"
        }, 
        {
            "location": "/#_2", 
            "text": "nRF52832-MDK \u96c6\u6210\u4e86\u591a\u529f\u80fd\u8c03\u8bd5\u5668 DAPLink\uff0c\u5373\u63d2\u5373\u7528\uff0c\u53ef\u5b9e\u73b0 U \u76d8\u76f4\u63a5\u201c\u62d6\u653e\u201d\u4e0b\u8f7d\u56fa\u4ef6\u3001\u4e32\u53e3\u8c03\u8bd5\u3001CMSIS-DAP \u4eff\u771f\u8c03\u8bd5\u3002  \u524d\u5f80 GitHub \u67e5\u770b", 
            "title": "\u96c6\u6210\u8c03\u8bd5\u5668"
        }, 
        {
            "location": "/#_3", 
            "text": "nRF52832-MDK \u53ef\u4ee5\u7528\u6765\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\uff0c\u5305\u62ec  nRF5 SDK ,  mbed OS 5 ,  Zephyr ,  JerryScript ,  Espruino ,  Web Bluetooth ,  Eddystone ,  Physical Web  \u7b49\u7b49....", 
            "title": "\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6"
        }, 
        {
            "location": "/#_4", 
            "text": "\u4f7f\u7528\u5f00\u6e90\u5de5\u5177\u94fe\uff0cnRF52832-MDK \u53ef\u5b9e\u73b0\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u6ee1\u8db3 Mac OSX, Linux, Windows \u5f00\u53d1\u8005\u7684\u5f00\u53d1\u9700\u6c42\u3002", 
            "title": "\u8de8\u5e73\u53f0\u5f00\u53d1"
        }, 
        {
            "location": "/#_5", 
            "text": "nRF52832-MDK \u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\uff0c\u4f7f\u7528  MkDocs  \u751f\u6210\u6587\u6863\uff0c\u6258\u7ba1\u5728  GitHub \uff0c\u65b9\u4fbf\u5f00\u6e90\u7231\u597d\u8005\u4e00\u8d77\u7ef4\u62a4\uff0c\u540c\u65f6\u63d0\u4f9b CDN \u52a0\u901f\uff0c\u5b9e\u73b0\u5feb\u901f\u8bbf\u95ee\u3002", 
            "title": "\u63d0\u4f9b\u5728\u7ebf\u6587\u6863"
        }, 
        {
            "location": "/#_6", 
            "text": "\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u611f\u5174\u8da3\u540c\u65f6\u4e5f\u60f3\u652f\u6301\u6211\u4e00\u4e0b\uff0c\u6233\u4e00\u4e0b\u5457\uff1a \u8d2d\u4e70\u94fe\u63a5 \u3002", 
            "title": "\u652f\u6301\u4e00\u4e0b"
        }, 
        {
            "location": "/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/hardware/", 
            "text": "\u786c\u4ef6\u4ecb\u7ecd\n\n\n\n\n\u786c\u4ef6\u89c4\u683c\n\n\n\n\n\n\n\u642d\u8f7d Nordic nRF52 \u7cfb\u5217\u4f4e\u529f\u8017\u84dd\u7259 SoC nRF52832\n\n\n\n\nARM\u00ae Cortex\u2122-M4F\n\n\n512kB Flash Memory + 64kB RAM\n\n\n\u652f\u6301 Bluetooth low energy, ANT \u4ee5\u53ca 2.4GHz\n\n\n\u652f\u6301 NFC\u2122-A tag\n\n\n\n\n\n\n\n\n\u96c6\u6210\u5f00\u6e90\u4eff\u771f\u5668 \nDAPLink\n\n\n\n\n\u514d\u9a71\u52a8 USB HID, \u5373\u63d2\u5373\u7528\uff0cMac OSX, Linux, Windows \u5168\u5e73\u53f0\u652f\u6301\n\n\n\u652f\u6301 \npyOCD\n, \nKeil uVision\n, \nIAR\n \u7b49\u4e0a\u4f4d\u673a\u8c03\u8bd5\u5de5\u5177\n\n\nU\u76d8\u76f4\u63a5\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u7a0b\u5e8f\uff0c\u652f\u6301 hex\u3001bin \u6587\u4ef6\u683c\u5f0f\n\n\nUSB \u865a\u62df\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u9ad8\u8fbe 230400bps\n\n\n\u53ef\u66f4\u65b0\u5347\u7ea7\u56fa\u4ef6\n\n\n\n\n\n\n\n\n24\u4e2a\u53ef\u7528 IO \u5168\u90e8\u5f15\u51fa\uff0c\u53ef\u7075\u6d3b\u590d\u7528 ADC, SPI, I2C, UART, PDM, PWM \u7b49\u5916\u8bbe\n\n\n\n\n\n\n\u677f\u8f7d\u590d\u4f4d\u6309\u94ae\n\n\n\n\n\n\n\u677f\u8f7d\u53ef\u7f16\u7a0b RGB LED\n\n\n\n\n\n\n\u677f\u8f7d 2.4GHz \u9676\u74f7\u5929\u7ebf\n\n\n\n\n\n\n\u652f\u6301 USB \u4f9b\u7535 \u6216 \u5916\u90e8\u7535\u6e90\u4f9b\u7535\n\n\n\n\n\n\n\u652f\u6301 3.3V 800mA(Max.) \u7535\u6e90\u8f93\u51fa\uff0c\u53ef\u4e3a\u5916\u90e8\u6a21\u5757\u4f9b\u7535\n\n\n\n\n\n\n\u9762\u5305\u677f\u53cb\u597d\u8fde\u63a5\n\n\n\n\n\n\n\u5c3a\u5bf8\uff1a4.8 * 1.8 cm\n\n\n\n\n\n\n\u529f\u80fd\u6846\u56fe\n\n\n\u4ee5\u4e0b\u4e3a nRF52832-MDK \u7684\u786c\u4ef6\u529f\u80fd\u6846\u56fe\uff1a\n\n\n\nDAPLink\n\n\nnRF52832-MDK \u677f\u4e0a\u96c6\u6210\u4e86 \nDAPLink\n\uff0c\u8fd9\u662f ARM mbed \u5f00\u6e90\u7684\u591a\u529f\u80fd\u4eff\u771f\u5668\uff0c\u5185\u90e8\u62e5\u6709\u4e09\u79cd\u63a5\u53e3\uff1a\n\n\n\n\nMSC - \u53ef\u5b9e\u73b0 U \u76d8\u76f4\u63a5\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u56fa\u4ef6\n\n\nCDC - \u865a\u62df\u4e32\u53e3\uff0c\u53ef\u7528\u4e8e\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3001\u4e0e\u4e0a\u4f4d\u673a\u901a\u4fe1\n\n\nHID - \u517c\u5bb9 CMSIS-DAP \u7684\u8c03\u8bd5\u63a5\u53e3\n\n\n\n\n\u5bf9\u5e94\u529f\u80fd\u6846\u56fe\u5982\u4e0b\uff1a\n\n\n\n\n\u786c\u4ef6\u8d44\u6e90\n\n\n\n\nnRF52832-MDK \u539f\u7406\u56fe\n\n\nnRF52832-MDK \u5143\u4ef6\u4f4d\u7f6e\u56fe\n\n\nnRF52832-MDK PCB\n\n\nnRF52832-MDK 3D \u6a21\u578b\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u539f\u7406\u56fe\u53ca PCB \u6e90\u6587\u4ef6\u56e0\u8bbe\u8ba1\u8f6f\u4ef6\u7248\u6743\u95ee\u9898\u53ea\u80fd\u6682\u65f6\u4ee5 pdf \u683c\u5f0f\u53d1\u5e03\uff0c\u540e\u7eed\u5c06\u4f7f\u7528\u5f00\u6e90\u8f6f\u4ef6 \nKiCad\n \u91cd\u65b0\u8bbe\u8ba1\u53d1\u5e03\u3002\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u786c\u4ef6\u4ecb\u7ecd"
        }, 
        {
            "location": "/hardware/#_1", 
            "text": "", 
            "title": "\u786c\u4ef6\u4ecb\u7ecd"
        }, 
        {
            "location": "/hardware/#_2", 
            "text": "\u642d\u8f7d Nordic nRF52 \u7cfb\u5217\u4f4e\u529f\u8017\u84dd\u7259 SoC nRF52832   ARM\u00ae Cortex\u2122-M4F  512kB Flash Memory + 64kB RAM  \u652f\u6301 Bluetooth low energy, ANT \u4ee5\u53ca 2.4GHz  \u652f\u6301 NFC\u2122-A tag     \u96c6\u6210\u5f00\u6e90\u4eff\u771f\u5668  DAPLink   \u514d\u9a71\u52a8 USB HID, \u5373\u63d2\u5373\u7528\uff0cMac OSX, Linux, Windows \u5168\u5e73\u53f0\u652f\u6301  \u652f\u6301  pyOCD ,  Keil uVision ,  IAR  \u7b49\u4e0a\u4f4d\u673a\u8c03\u8bd5\u5de5\u5177  U\u76d8\u76f4\u63a5\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u7a0b\u5e8f\uff0c\u652f\u6301 hex\u3001bin \u6587\u4ef6\u683c\u5f0f  USB \u865a\u62df\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u9ad8\u8fbe 230400bps  \u53ef\u66f4\u65b0\u5347\u7ea7\u56fa\u4ef6     24\u4e2a\u53ef\u7528 IO \u5168\u90e8\u5f15\u51fa\uff0c\u53ef\u7075\u6d3b\u590d\u7528 ADC, SPI, I2C, UART, PDM, PWM \u7b49\u5916\u8bbe    \u677f\u8f7d\u590d\u4f4d\u6309\u94ae    \u677f\u8f7d\u53ef\u7f16\u7a0b RGB LED    \u677f\u8f7d 2.4GHz \u9676\u74f7\u5929\u7ebf    \u652f\u6301 USB \u4f9b\u7535 \u6216 \u5916\u90e8\u7535\u6e90\u4f9b\u7535    \u652f\u6301 3.3V 800mA(Max.) \u7535\u6e90\u8f93\u51fa\uff0c\u53ef\u4e3a\u5916\u90e8\u6a21\u5757\u4f9b\u7535    \u9762\u5305\u677f\u53cb\u597d\u8fde\u63a5    \u5c3a\u5bf8\uff1a4.8 * 1.8 cm", 
            "title": "\u786c\u4ef6\u89c4\u683c"
        }, 
        {
            "location": "/hardware/#_3", 
            "text": "\u4ee5\u4e0b\u4e3a nRF52832-MDK \u7684\u786c\u4ef6\u529f\u80fd\u6846\u56fe\uff1a", 
            "title": "\u529f\u80fd\u6846\u56fe"
        }, 
        {
            "location": "/hardware/#daplink", 
            "text": "nRF52832-MDK \u677f\u4e0a\u96c6\u6210\u4e86  DAPLink \uff0c\u8fd9\u662f ARM mbed \u5f00\u6e90\u7684\u591a\u529f\u80fd\u4eff\u771f\u5668\uff0c\u5185\u90e8\u62e5\u6709\u4e09\u79cd\u63a5\u53e3\uff1a   MSC - \u53ef\u5b9e\u73b0 U \u76d8\u76f4\u63a5\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u56fa\u4ef6  CDC - \u865a\u62df\u4e32\u53e3\uff0c\u53ef\u7528\u4e8e\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3001\u4e0e\u4e0a\u4f4d\u673a\u901a\u4fe1  HID - \u517c\u5bb9 CMSIS-DAP \u7684\u8c03\u8bd5\u63a5\u53e3   \u5bf9\u5e94\u529f\u80fd\u6846\u56fe\u5982\u4e0b\uff1a", 
            "title": "DAPLink"
        }, 
        {
            "location": "/hardware/#_4", 
            "text": "nRF52832-MDK \u539f\u7406\u56fe  nRF52832-MDK \u5143\u4ef6\u4f4d\u7f6e\u56fe  nRF52832-MDK PCB  nRF52832-MDK 3D \u6a21\u578b    \u63d0\u793a  \u539f\u7406\u56fe\u53ca PCB \u6e90\u6587\u4ef6\u56e0\u8bbe\u8ba1\u8f6f\u4ef6\u7248\u6743\u95ee\u9898\u53ea\u80fd\u6682\u65f6\u4ee5 pdf \u683c\u5f0f\u53d1\u5e03\uff0c\u540e\u7eed\u5c06\u4f7f\u7528\u5f00\u6e90\u8f6f\u4ef6  KiCad  \u91cd\u65b0\u8bbe\u8ba1\u53d1\u5e03\u3002", 
            "title": "\u786c\u4ef6\u8d44\u6e90"
        }, 
        {
            "location": "/hardware/#_5", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/getting-started/hello-world/", 
            "text": "\u5f00\u7bb1\n\n\n\n\n\n\n\u6587\u6863\u8d44\u6e90\n\n\nnRF52832-MDK \u7684\u5168\u90e8\u8d44\u6599\uff08\u5305\u62ec\u786c\u4ef6\u8bbe\u8ba1\u8d44\u6599\u3001\u6e90\u4ee3\u7801\u3001\u5e94\u7528\u793a\u4f8b\u4ee5\u53ca\u6587\u6863\uff09\u5747\u6258\u7ba1\u5728 \nGitHub\n \u4e0a\uff0c\u53ef\u4ee5\n\u70b9\u51fb\u4e0b\u8f7d\n\uff0c\u6216\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u514b\u9686\u5230\u672c\u5730\uff1a\n\n\n$ git clone https://github.com/makerdiary/nrf52832-mdk\n\n\n\n\n\nHello World !\n\n\nnRF52832-MDK \u9884\u7f6e\u4e86\u51fa\u5382\u56fa\u4ef6\uff0c\u8be5\u56fa\u4ef6\u7684\u4e3b\u8981\u529f\u80fd\u5982\u4e0b\uff1a\n\n\n\n\n\u7eff\u8272 LED \u95ea\u70c1\u6307\u793a\u4f4e\u529f\u8017\u84dd\u7259\u6b63\u5728\u5e7f\u64ad\uff1b\n\n\nDAPLink \u4e0a\u7684\u4e32\u53e3\u4ee5 \n115200bps\n \u6ce2\u7279\u7387\u8f93\u51fa \"Hello World!\"\uff1b\n\n\n\u4f4e\u529f\u8017\u84dd\u7259\u4f7f\u7528 \nEddystone\n \u534f\u8bae\u53d1\u51fa URL \nhttps://makerdiary.co\n\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ec8\u7aef\u8bbe\u5907\u83b7\u53d6\u8be5\u4fe1\u606f\u3002\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u8be5 demo \u4f7f\u7528 nRF5 SDK \u5f00\u53d1\uff0c\u6e90\u4ee3\u7801\u4f4d\u7f6e\u662f \n./examples/nrf5-sdk/factory-firmware\n, \u53ef\u4ee5\u6682\u65f6\u4e0d\u7ba1\u5177\u4f53\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u9646\u7eed\u5b9e\u73b0\u3002\u5176\u4e3b\u8981\u76ee\u7684\u662f\u5e2e\u52a9\u5f00\u53d1\u8005\u521d\u6b65\u4e86\u89e3\u786c\u4ef6\uff0c\u5e76\u786e\u8ba4\u786c\u4ef6\u529f\u80fd\u6b63\u5e38\u3002\n\n\n\n\n\u7b2c\u4e00\u6b65\uff1a\u4e0a\u7535\n\n\n\u4f7f\u7528 Micro USB \u6570\u636e\u7ebf\uff0c\u5c06 nRF52832-MDK \u8fde\u63a5\u81f3 PC\uff0c\u7eff\u8272\u7535\u6e90\u6307\u793a\u706f\u5c06\u5e38\u4eae\uff0c\u7eff\u8272 LED \u95ea\u70c1\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u4e32\u53e3\n\n\nMac OSX\n\n\nOSX \u7528\u6237\u53ef\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u7684\u4e32\u53e3\u5de5\u5177 \nscreen\n, \u5177\u4f53\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\n# \u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5176\u4e2d\u4e32\u53e3\u8bbe\u5907\u540d\u79f0 \nusbmodem1422\n \u4e0d\u540c PC \u4e0d\u4e00\u6837\n\n$ screen /dev/cu.usbmodem1422 \n115200\n\n\n\n\n\n\n\n\n\u5c0f\u6280\u5de7\n\n\n\u5728\u7ec8\u7aef\u5148\u8f93\u5165 \nscreen /dev/cu.usb\n\uff0c\u7136\u540e\u6309\u4e0b \ntab\n \u952e\uff0c\u81ea\u52a8\u8865\u9f50\u4e32\u53e3\u8bbe\u5907\u540d\u79f0\u3002\n\u9000\u51fa \nscreen\n \u53ef\u4f7f\u7528\u5feb\u6377\u952e \nctl+A\n + \nctl+\\\n\uff0c\u7136\u540e\u6839\u636e\u63d0\u793a\u8f93\u5165\ny\n\u3002\n\n\n\n\n\n\nLinux\n\n\n\u5728 Linux \u73af\u5883\u4e0b\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 \nscreen\n \u5de5\u5177\uff0c\u8fd9\u91cc\u4ee5 Ubuntu 16.04 \u4e3a\u4f8b\uff1a\n\n\n# \u5b89\u88c5 screen\n\n$ sudo apt-get install screen\n\n\n# \u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u53ef\u80fd\u9700\u8981\u6743\u9650\uff09\uff0c\u8bbe\u5907\u540d\u79f0\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\uff1a\n\n$ sudo screen /dev/ttyACM0 \n115200\n\n\n\n\n\n\n\n\n\u5c0f\u6280\u5de7\n\n\n\u5728 Ubuntu\uff0c\u9000\u51fa \nscreen\n \u53ef\u4f7f\u7528\u5feb\u6377\u952e \nctl+A\n + \n\\\n\uff0c\u7136\u540e\u6839\u636e\u63d0\u793a\u8f93\u5165\ny\n\u3002\n\n\n\n\n\n\nWindows\n\n\n\u5728 Windows \u73af\u5883\u4e0b\u9700\u8981\u5b89\u88c5\u4e32\u53e3\u9a71\u52a8\uff0c\n\u70b9\u51fb\u4e0b\u8f7d\n \u5e76\u5b89\u88c5\u9a71\u52a8\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u5982\u679c\u662f Windows 10\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0b\u8f7d\u9a71\u52a8\u5b89\u88c5\u6216\u8ba9\u7cfb\u7edf\u81ea\u52a8\u5b89\u88c5\u3002\n\n\n\n\n\u4e32\u53e3\u5de5\u5177\u53ef\u4ee5\u4f7f\u7528\u514d\u8d39\u7684 \nPuTTY\n\uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff0c\u4e32\u53e3\u53f7\u8bf7\u5728 \n\u8bbe\u5907\u7ba1\u7406\u5668\n \u4e2d\u67e5\u770b\uff1a\n\n\n\n\n\n\n\u7b2c\u4e09\u6b65\uff1a\u4f53\u9a8c\u4f4e\u529f\u8017\u84dd\u7259\n\n\nnRF52832-MDK \u51fa\u5382\u5df2\u7ecf\u914d\u7f6e\u6210\u4e86 Eddystone Beacon \u8bbe\u5907\u3002\nEddystone\n \u662f Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae\uff0c\u8fd9\u662f\u6bd4 Apple iBeacon \u66f4\u5f3a\u5927\u7684\u5b58\u5728\uff0c\u53ef\u4ee5\u517c\u5bb9 Android \u4ee5\u53ca iOS \u8bbe\u5907\uff0c\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\n\u5b98\u65b9\u4ed3\u5e93\n\uff0c\u8fd9\u91cc\u53ea\u6f14\u793a\u4e00\u4e0b\u5e94\u7528\uff1a\n\n\n\u4e0b\u8f7d Nordic \u7684 \nnRF Connect\n \u5e94\u7528\uff1a\n\n\n\n\niOS\n\n\nAndroid\n\n\n\u684c\u9762\u7248\n (\u9700\u8981\u4f60\u7684\u7535\u8111\u652f\u6301 BLE)\n\n\n\n\n\u4ee5 iOS \u4e3a\u4f8b\uff0c\u6253\u5f00 \nnRF Connect\n App\uff0c\u5c06\u626b\u63cf\u5230\u4e00\u4e2a\u4f4e\u529f\u8017\u84dd\u7259\u8bbe\u5907\uff0c\u53ef\u67e5\u770b\u8bbe\u5907\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f1a\u53d1\u73b0 URL \nhttps://makerdiary.co\n \u4ee5 Eddystone \u534f\u8bae\u89c4\u5b9a\u7684\u65b9\u5f0f\u5305\u542b\u5728\u5e7f\u64ad\u4fe1\u606f\u4e2d\u4e86\uff1a\n\n\n\n\n\u5982\u679c\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u6765\u4f53\u9a8c\u4e00\u4e0b Google \u7684 Physical Web \u6280\u672f\uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff1a\n\n\n\n\nSetting up Physical Web in Chrome\n\n\n\n\n\n\n\u63d0\u793a\n\n\nGoogle \u7684\u4e1c\u897f\uff0c\u4f60\u61c2\u7684\uff0c\u7ffb\u5899\u662f\u5fc5\u5907\u6280\u80fd~\n\n\n\n\n\u6700\u7ec8\u4f60\u4f1a\u770b\u5230\uff0cChrome \u6d4f\u89c8\u5668\u7684 Physical Web \u5df2\u7ecf\u53d1\u73b0\u4e86\u8be5\u8bbe\u5907\uff0c\u5e76\u663e\u793a\u5e7f\u64ad\u4fe1\u606f\u4e2d\u7684\u94fe\u63a5\uff1a\n\n\n\n\n\u603b\u7ed3\n\n\n\u901a\u8fc7\u8fd9\u4e2a\u51fa\u5382 Demo\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5bf9 nRF52832-MDK \u6709\u4e86\u57fa\u672c\u7684\u4e86\u89e3\uff0c\u63a5\u7740\u5c06\u8bb2\u89e3\"\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\"\uff0c\u4e4b\u540e\u4f60\u4fbf\u53ef\u4ee5\u9009\u62e9\u4f60\u611f\u5174\u8da3\u7684\u6280\u672f\u5b66\u4e60\u5f00\u53d1\u81ea\u5df1\u7684\u5e94\u7528\u4e86\u3002\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u9996\u6b21\u4f7f\u7528"
        }, 
        {
            "location": "/getting-started/hello-world/#_1", 
            "text": "", 
            "title": "\u5f00\u7bb1"
        }, 
        {
            "location": "/getting-started/hello-world/#_2", 
            "text": "nRF52832-MDK \u7684\u5168\u90e8\u8d44\u6599\uff08\u5305\u62ec\u786c\u4ef6\u8bbe\u8ba1\u8d44\u6599\u3001\u6e90\u4ee3\u7801\u3001\u5e94\u7528\u793a\u4f8b\u4ee5\u53ca\u6587\u6863\uff09\u5747\u6258\u7ba1\u5728  GitHub  \u4e0a\uff0c\u53ef\u4ee5 \u70b9\u51fb\u4e0b\u8f7d \uff0c\u6216\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u514b\u9686\u5230\u672c\u5730\uff1a  $ git clone https://github.com/makerdiary/nrf52832-mdk", 
            "title": "\u6587\u6863\u8d44\u6e90"
        }, 
        {
            "location": "/getting-started/hello-world/#hello-world", 
            "text": "nRF52832-MDK \u9884\u7f6e\u4e86\u51fa\u5382\u56fa\u4ef6\uff0c\u8be5\u56fa\u4ef6\u7684\u4e3b\u8981\u529f\u80fd\u5982\u4e0b\uff1a   \u7eff\u8272 LED \u95ea\u70c1\u6307\u793a\u4f4e\u529f\u8017\u84dd\u7259\u6b63\u5728\u5e7f\u64ad\uff1b  DAPLink \u4e0a\u7684\u4e32\u53e3\u4ee5  115200bps  \u6ce2\u7279\u7387\u8f93\u51fa \"Hello World!\"\uff1b  \u4f4e\u529f\u8017\u84dd\u7259\u4f7f\u7528  Eddystone  \u534f\u8bae\u53d1\u51fa URL  https://makerdiary.co \uff0c\u53ef\u4ee5\u4f7f\u7528\u7ec8\u7aef\u8bbe\u5907\u83b7\u53d6\u8be5\u4fe1\u606f\u3002    \u63d0\u793a  \u8be5 demo \u4f7f\u7528 nRF5 SDK \u5f00\u53d1\uff0c\u6e90\u4ee3\u7801\u4f4d\u7f6e\u662f  ./examples/nrf5-sdk/factory-firmware , \u53ef\u4ee5\u6682\u65f6\u4e0d\u7ba1\u5177\u4f53\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u9646\u7eed\u5b9e\u73b0\u3002\u5176\u4e3b\u8981\u76ee\u7684\u662f\u5e2e\u52a9\u5f00\u53d1\u8005\u521d\u6b65\u4e86\u89e3\u786c\u4ef6\uff0c\u5e76\u786e\u8ba4\u786c\u4ef6\u529f\u80fd\u6b63\u5e38\u3002", 
            "title": "Hello World !"
        }, 
        {
            "location": "/getting-started/hello-world/#_3", 
            "text": "\u4f7f\u7528 Micro USB \u6570\u636e\u7ebf\uff0c\u5c06 nRF52832-MDK \u8fde\u63a5\u81f3 PC\uff0c\u7eff\u8272\u7535\u6e90\u6307\u793a\u706f\u5c06\u5e38\u4eae\uff0c\u7eff\u8272 LED \u95ea\u70c1\uff1a", 
            "title": "\u7b2c\u4e00\u6b65\uff1a\u4e0a\u7535"
        }, 
        {
            "location": "/getting-started/hello-world/#_4", 
            "text": "", 
            "title": "\u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u4e32\u53e3"
        }, 
        {
            "location": "/getting-started/hello-world/#mac-osx", 
            "text": "OSX \u7528\u6237\u53ef\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u7684\u4e32\u53e3\u5de5\u5177  screen , \u5177\u4f53\u547d\u4ee4\u5982\u4e0b\uff1a  # \u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5176\u4e2d\u4e32\u53e3\u8bbe\u5907\u540d\u79f0  usbmodem1422  \u4e0d\u540c PC \u4e0d\u4e00\u6837 \n$ screen /dev/cu.usbmodem1422  115200    \u5c0f\u6280\u5de7  \u5728\u7ec8\u7aef\u5148\u8f93\u5165  screen /dev/cu.usb \uff0c\u7136\u540e\u6309\u4e0b  tab  \u952e\uff0c\u81ea\u52a8\u8865\u9f50\u4e32\u53e3\u8bbe\u5907\u540d\u79f0\u3002\n\u9000\u51fa  screen  \u53ef\u4f7f\u7528\u5feb\u6377\u952e  ctl+A  +  ctl+\\ \uff0c\u7136\u540e\u6839\u636e\u63d0\u793a\u8f93\u5165 y \u3002", 
            "title": "Mac OSX"
        }, 
        {
            "location": "/getting-started/hello-world/#linux", 
            "text": "\u5728 Linux \u73af\u5883\u4e0b\u540c\u6837\u53ef\u4ee5\u4f7f\u7528  screen  \u5de5\u5177\uff0c\u8fd9\u91cc\u4ee5 Ubuntu 16.04 \u4e3a\u4f8b\uff1a  # \u5b89\u88c5 screen \n$ sudo apt-get install screen # \u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff08\u53ef\u80fd\u9700\u8981\u6743\u9650\uff09\uff0c\u8bbe\u5907\u540d\u79f0\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\uff1a \n$ sudo screen /dev/ttyACM0  115200    \u5c0f\u6280\u5de7  \u5728 Ubuntu\uff0c\u9000\u51fa  screen  \u53ef\u4f7f\u7528\u5feb\u6377\u952e  ctl+A  +  \\ \uff0c\u7136\u540e\u6839\u636e\u63d0\u793a\u8f93\u5165 y \u3002", 
            "title": "Linux"
        }, 
        {
            "location": "/getting-started/hello-world/#windows", 
            "text": "\u5728 Windows \u73af\u5883\u4e0b\u9700\u8981\u5b89\u88c5\u4e32\u53e3\u9a71\u52a8\uff0c \u70b9\u51fb\u4e0b\u8f7d  \u5e76\u5b89\u88c5\u9a71\u52a8\u3002   \u63d0\u793a  \u5982\u679c\u662f Windows 10\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0b\u8f7d\u9a71\u52a8\u5b89\u88c5\u6216\u8ba9\u7cfb\u7edf\u81ea\u52a8\u5b89\u88c5\u3002   \u4e32\u53e3\u5de5\u5177\u53ef\u4ee5\u4f7f\u7528\u514d\u8d39\u7684  PuTTY \uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff0c\u4e32\u53e3\u53f7\u8bf7\u5728  \u8bbe\u5907\u7ba1\u7406\u5668  \u4e2d\u67e5\u770b\uff1a", 
            "title": "Windows"
        }, 
        {
            "location": "/getting-started/hello-world/#_5", 
            "text": "nRF52832-MDK \u51fa\u5382\u5df2\u7ecf\u914d\u7f6e\u6210\u4e86 Eddystone Beacon \u8bbe\u5907\u3002 Eddystone  \u662f Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae\uff0c\u8fd9\u662f\u6bd4 Apple iBeacon \u66f4\u5f3a\u5927\u7684\u5b58\u5728\uff0c\u53ef\u4ee5\u517c\u5bb9 Android \u4ee5\u53ca iOS \u8bbe\u5907\uff0c\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u4ed3\u5e93 \uff0c\u8fd9\u91cc\u53ea\u6f14\u793a\u4e00\u4e0b\u5e94\u7528\uff1a  \u4e0b\u8f7d Nordic \u7684  nRF Connect  \u5e94\u7528\uff1a   iOS  Android  \u684c\u9762\u7248  (\u9700\u8981\u4f60\u7684\u7535\u8111\u652f\u6301 BLE)   \u4ee5 iOS \u4e3a\u4f8b\uff0c\u6253\u5f00  nRF Connect  App\uff0c\u5c06\u626b\u63cf\u5230\u4e00\u4e2a\u4f4e\u529f\u8017\u84dd\u7259\u8bbe\u5907\uff0c\u53ef\u67e5\u770b\u8bbe\u5907\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f1a\u53d1\u73b0 URL  https://makerdiary.co  \u4ee5 Eddystone \u534f\u8bae\u89c4\u5b9a\u7684\u65b9\u5f0f\u5305\u542b\u5728\u5e7f\u64ad\u4fe1\u606f\u4e2d\u4e86\uff1a   \u5982\u679c\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u6765\u4f53\u9a8c\u4e00\u4e0b Google \u7684 Physical Web \u6280\u672f\uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff1a   Setting up Physical Web in Chrome    \u63d0\u793a  Google \u7684\u4e1c\u897f\uff0c\u4f60\u61c2\u7684\uff0c\u7ffb\u5899\u662f\u5fc5\u5907\u6280\u80fd~   \u6700\u7ec8\u4f60\u4f1a\u770b\u5230\uff0cChrome \u6d4f\u89c8\u5668\u7684 Physical Web \u5df2\u7ecf\u53d1\u73b0\u4e86\u8be5\u8bbe\u5907\uff0c\u5e76\u663e\u793a\u5e7f\u64ad\u4fe1\u606f\u4e2d\u7684\u94fe\u63a5\uff1a", 
            "title": "\u7b2c\u4e09\u6b65\uff1a\u4f53\u9a8c\u4f4e\u529f\u8017\u84dd\u7259"
        }, 
        {
            "location": "/getting-started/hello-world/#_6", 
            "text": "\u901a\u8fc7\u8fd9\u4e2a\u51fa\u5382 Demo\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5bf9 nRF52832-MDK \u6709\u4e86\u57fa\u672c\u7684\u4e86\u89e3\uff0c\u63a5\u7740\u5c06\u8bb2\u89e3\"\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\"\uff0c\u4e4b\u540e\u4f60\u4fbf\u53ef\u4ee5\u9009\u62e9\u4f60\u611f\u5174\u8da3\u7684\u6280\u672f\u5b66\u4e60\u5f00\u53d1\u81ea\u5df1\u7684\u5e94\u7528\u4e86\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/getting-started/hello-world/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/getting-started/how-to-upload/", 
            "text": "nRF52832-MDK \u677f\u4e0a\u96c6\u6210\u4e86 \nDAPLink\n \u591a\u529f\u80fd\u4eff\u771f\u5668\uff0c\u53ef\u4ee5\u652f\u6301\u4e24\u79cd\u56fa\u4ef6\u4e0b\u8f7d\u65b9\u5f0f\uff1a\n\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\n \u4ee5\u53ca \npyOCD \u4e0b\u8f7d\n\u3002\n\n\n\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0cPC \u81ea\u52a8\u5c06\u5176\u8bc6\u522b\u6210\u53ef\u79fb\u52a8\u78c1\u76d8\u8bbe\u5907\uff0c\u540d\u79f0\u4e3a\uff1a\nDAPLINK\n\n\n\n\n\u7136\u540e\u5c06 \nhex\n \u6216 \nbin\n \u6587\u4ef6\u76f4\u63a5\u62f7\u8d1d\u5230\u8be5\u78c1\u76d8\uff0c\u677f\u4e0a\u7eff\u706f\u95ea\u70c1\u8868\u793a\u6b63\u5728\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u5b8c\u6210\u540e\u78c1\u76d8\u4f1a\u5148\u5f39\u51fa\u518d\u91cd\u65b0\u6302\u8f7d\uff0c\u5982\u679c\u6709\u9519\u8bef\u53d1\u751f\uff0c\u78c1\u76d8\u5185\u4f1a\u4ea7\u751f\u63d0\u793a\u9519\u8bef\u4fe1\u606f\u7684\u6587\u4ef6\u3002\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u4f7f\u7528\u201c\u62d6\u653e\u201d\u4e0b\u8f7d\u65b9\u5f0f\uff0c\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u6309\u4e0b\u590d\u4f4d\u6309\u94ae\u6216\u91cd\u65b0\u4e0a\u7535\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\uff01\u5982\u679c\u89c9\u5f97\u4e0d\u723d\uff0c\u8bf7\u4f7f\u7528\u4e0b\u9762\u4ecb\u7ecd\u7684 pyOCD \u4e0b\u8f7d\u65b9\u5f0f\u3002\n\n\n\n\n\u4f7f\u7528 pyOCD \u4e0b\u8f7d\n\n\npyOCD\n \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, OSX, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002\n\n\n\u5b89\u88c5\n\n\n\u5148\u786e\u4fdd\u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 \nPython 2.7.x\n\uff0c\u5efa\u8bae\u4f7f\u7528 \nPython 2.7.13\n \u6216\u4ee5\u4e0a\u7248\u672c\u3002\n\n\n\u524d\u5f80 Python \u5b98\u7f51\u4e0b\u8f7d\n\n\n$ python --version\n\n# Python 2.7.13\n\n$ pip --version\n\n# pip 9.0.1\n\n\n\n\n\n\n\u53ef\u4ee5\u901a\u8fc7 \npip\n \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a\n\n\n$ pip install --pre -U pyocd\n\n\n\n\n\n\u6216\u8005\u901a\u8fc7\u6e90\u7801\u5b89\u88c5\u5f00\u53d1\u7248\u672c\uff0c\u4f53\u9a8c\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u529f\u80fd\uff1a\n\n\n$ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 pyOCD\uff0c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u5728\u5b89\u88c5\u547d\u4ee4\u524d\u589e\u52a0 \nsudo -H\n \u8fdb\u884c\u5168\u5c40\u5b89\u88c5\u3002\n\n\n\n\n\u4e0b\u8f7d\u56fa\u4ef6\n\n\n\u51c6\u5907\u597d\u4f60\u7684 hex \u6587\u4ef6\uff0c\u6216\u8005\u4e0b\u8f7d \nnrf52832-mdk-hello-world.hex\n \u6765\u7ec3\u7ec3\u624b\uff0c\u76f8\u5173\u547d\u4ee4\u5982\u4e0b\uff0c\u84dd\u8272 LED \u95ea\u70c1\u8868\u793a\u6b63\u5728\u7f16\u7a0b\uff1a\n\n\n# -se \u53c2\u6570\u8868\u793a\u6309\u7167\u6240\u9700 sector \u8fdb\u884c\u64e6\u9664\n\n$ pyocd-flashtool -d debug -t nrf52 -se your-hex-file.hex\n\n\n# \u5982\u679c\u60f3\u6574\u7247\u64e6\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528 -ce \u53c2\u6570\n\n$ pyocd-flashtool -d debug -t nrf52 -ce your-hex-file.hex\n\n\n# \u5982\u679c\u53ea\u662f\u60f3\u64e6\u9664\uff0c\u4e0d\u7f16\u7a0b\uff0c\u53ef\u4ee5\u4e0d\u5e26hex\u6587\u4ef6\u53c2\u6570\n\n$ pyocd-flashtool -d debug -t nrf52 -ce\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u4e0b\u8f7d\uff0c\u8bf7\u5728\u547d\u4ee4\u589e\u52a0 \nsudo\n\u3002\n\n\n\n\n\n\n\u66f4\u591a\u5185\u5bb9\n\n\n\u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e DAPLink \u4ee5\u53ca pyOCD \u7684\u5185\u5bb9\uff0c\u53ef\u8bbf\u95ee\u5176\u5b98\u65b9\u4ed3\u5e93\uff1a\n\n\n\n\nmbedmicro/DAPLink\n\n\nmbedmicro/pyOCD\n\n\n\n\n\u603b\u7ed3\n\n\n\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u5bf9 nRF52832-MDK \u7684\u4f7f\u7528\u65b9\u5f0f\u6709\u4e86\u66f4\u8fdb\u4e00\u6b65\u7684\u4e86\u89e3\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u80fd\u591f\u4f7f\u7528 nRF52832-MDK \u8fdb\u884c\u5f00\u53d1\u7684\u6280\u672f\uff0c\u671f\u5f85\u4f60\u7684\u53c2\u4e0e\uff01\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f"
        }, 
        {
            "location": "/getting-started/how-to-upload/#_1", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0cPC \u81ea\u52a8\u5c06\u5176\u8bc6\u522b\u6210\u53ef\u79fb\u52a8\u78c1\u76d8\u8bbe\u5907\uff0c\u540d\u79f0\u4e3a\uff1a DAPLINK   \u7136\u540e\u5c06  hex  \u6216  bin  \u6587\u4ef6\u76f4\u63a5\u62f7\u8d1d\u5230\u8be5\u78c1\u76d8\uff0c\u677f\u4e0a\u7eff\u706f\u95ea\u70c1\u8868\u793a\u6b63\u5728\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u5b8c\u6210\u540e\u78c1\u76d8\u4f1a\u5148\u5f39\u51fa\u518d\u91cd\u65b0\u6302\u8f7d\uff0c\u5982\u679c\u6709\u9519\u8bef\u53d1\u751f\uff0c\u78c1\u76d8\u5185\u4f1a\u4ea7\u751f\u63d0\u793a\u9519\u8bef\u4fe1\u606f\u7684\u6587\u4ef6\u3002    \u6ce8\u610f  \u4f7f\u7528\u201c\u62d6\u653e\u201d\u4e0b\u8f7d\u65b9\u5f0f\uff0c\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u6309\u4e0b\u590d\u4f4d\u6309\u94ae\u6216\u91cd\u65b0\u4e0a\u7535\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\uff01\u5982\u679c\u89c9\u5f97\u4e0d\u723d\uff0c\u8bf7\u4f7f\u7528\u4e0b\u9762\u4ecb\u7ecd\u7684 pyOCD \u4e0b\u8f7d\u65b9\u5f0f\u3002", 
            "title": "\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d"
        }, 
        {
            "location": "/getting-started/how-to-upload/#pyocd", 
            "text": "pyOCD  \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, OSX, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002", 
            "title": "\u4f7f\u7528 pyOCD \u4e0b\u8f7d"
        }, 
        {
            "location": "/getting-started/how-to-upload/#_2", 
            "text": "\u5148\u786e\u4fdd\u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86  Python 2.7.x \uff0c\u5efa\u8bae\u4f7f\u7528  Python 2.7.13  \u6216\u4ee5\u4e0a\u7248\u672c\u3002  \u524d\u5f80 Python \u5b98\u7f51\u4e0b\u8f7d  $ python --version # Python 2.7.13 \n$ pip --version # pip 9.0.1   \u53ef\u4ee5\u901a\u8fc7  pip  \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a  $ pip install --pre -U pyocd  \u6216\u8005\u901a\u8fc7\u6e90\u7801\u5b89\u88c5\u5f00\u53d1\u7248\u672c\uff0c\u4f53\u9a8c\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u529f\u80fd\uff1a  $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip   \u6ce8\u610f  \u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 pyOCD\uff0c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u5728\u5b89\u88c5\u547d\u4ee4\u524d\u589e\u52a0  sudo -H  \u8fdb\u884c\u5168\u5c40\u5b89\u88c5\u3002", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/getting-started/how-to-upload/#_3", 
            "text": "\u51c6\u5907\u597d\u4f60\u7684 hex \u6587\u4ef6\uff0c\u6216\u8005\u4e0b\u8f7d  nrf52832-mdk-hello-world.hex  \u6765\u7ec3\u7ec3\u624b\uff0c\u76f8\u5173\u547d\u4ee4\u5982\u4e0b\uff0c\u84dd\u8272 LED \u95ea\u70c1\u8868\u793a\u6b63\u5728\u7f16\u7a0b\uff1a  # -se \u53c2\u6570\u8868\u793a\u6309\u7167\u6240\u9700 sector \u8fdb\u884c\u64e6\u9664 \n$ pyocd-flashtool -d debug -t nrf52 -se your-hex-file.hex # \u5982\u679c\u60f3\u6574\u7247\u64e6\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528 -ce \u53c2\u6570 \n$ pyocd-flashtool -d debug -t nrf52 -ce your-hex-file.hex # \u5982\u679c\u53ea\u662f\u60f3\u64e6\u9664\uff0c\u4e0d\u7f16\u7a0b\uff0c\u53ef\u4ee5\u4e0d\u5e26hex\u6587\u4ef6\u53c2\u6570 \n$ pyocd-flashtool -d debug -t nrf52 -ce   \u6ce8\u610f  \u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u4e0b\u8f7d\uff0c\u8bf7\u5728\u547d\u4ee4\u589e\u52a0  sudo \u3002", 
            "title": "\u4e0b\u8f7d\u56fa\u4ef6"
        }, 
        {
            "location": "/getting-started/how-to-upload/#_4", 
            "text": "\u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e DAPLink \u4ee5\u53ca pyOCD \u7684\u5185\u5bb9\uff0c\u53ef\u8bbf\u95ee\u5176\u5b98\u65b9\u4ed3\u5e93\uff1a   mbedmicro/DAPLink  mbedmicro/pyOCD", 
            "title": "\u66f4\u591a\u5185\u5bb9"
        }, 
        {
            "location": "/getting-started/how-to-upload/#_5", 
            "text": "\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u5bf9 nRF52832-MDK \u7684\u4f7f\u7528\u65b9\u5f0f\u6709\u4e86\u66f4\u8fdb\u4e00\u6b65\u7684\u4e86\u89e3\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u80fd\u591f\u4f7f\u7528 nRF52832-MDK \u8fdb\u884c\u5f00\u53d1\u7684\u6280\u672f\uff0c\u671f\u5f85\u4f60\u7684\u53c2\u4e0e\uff01", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/getting-started/how-to-upload/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/", 
            "text": "nRF5 SDK \nThe official Software Development Kit for nRF5x Series\n\n\n\u524d\u5f80 nRF5 SDK \u5b98\u7f51\n\n\n\u7b80\u4ecb\n\n\nnRF5 SDK \u662f Nordic \u9488\u5bf9 nRF5x \u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\uff0c\u5305\u542b\u5404\u79cd\u5916\u8bbe\u9a71\u52a8\u3001\u4ee3\u7801\u5e93\u3001\u5e94\u7528\u793a\u4f8b\u3001\u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\u4ee5\u53ca\u5176\u4ed6\u5177\u6709\u4e13\u5229\u7684\u65e0\u7ebf\u534f\u8bae\u6808\u3002\n\n\n\u8be5 SDK \u4ee5 \nzip\n \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u53d1\u5e03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u7531\u9009\u62e9\u5f00\u53d1\u73af\u5883\u3002\n\n\nnRF5 SDK \u81ea\u5e26\u7684\u5e94\u7528\u793a\u4f8b\u4e3b\u8981\u8fd0\u884c\u5728 Nordic \u5b98\u65b9\u7684\u5f00\u53d1\u677f\u4e0a\uff0c\u8fd9\u4e9b\u793a\u4f8b\u53ea\u8981\u7a0d\u4f5c\u4fee\u6539\u5747\u53ef\u5728 nRF52832-MDK \u4e0a\u987a\u5229\u8fd0\u884c\u3002\n\n\n\u672c\u6587\u6863\u4e3b\u8981\u57fa\u4e8e\u5b98\u65b9\u53d1\u5e03\u7684 SDK \u4ee5\u53ca \nGNU ARM Embedded Toolchain\n \u64b0\u5199\uff0c\u5185\u5bb9\u4f1a\u968f\u7740 SDK \u53ca\u76f8\u5173\u5de5\u5177\u7248\u672c\u5347\u7ea7\u800c\u4e0d\u65ad\u66f4\u65b0\u5b8c\u5584\u3002\n\n\n\n\n\u63d0\u793a\n\n\nNordic \u6700\u8fd1\u5df2\u7ecf\u53d1\u5e03\u4e86 nRF5 SDK 13.0.0 \u6b63\u5f0f\u7248\uff0c\u672c\u6587\u6863\u53d1\u5e03\u4e4b\u9645\u5c06\u4f1a\u652f\u6301\u6700\u65b0\u7248\u672c\u3002\n\n\n\n\n\u76f8\u5173\u8d44\u6e90\n\n\n\n\n\u4e0b\u8f7d nRF5 SDK\n\n\n\u67e5\u9605\u5b98\u65b9\u5f00\u53d1\u6587\u6863\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/nrf5sdk/#nrf5-sdk-the-official-software-development-kit-for-nrf5x-series", 
            "text": "\u524d\u5f80 nRF5 SDK \u5b98\u7f51", 
            "title": "nRF5 SDK The official Software Development Kit for nRF5x Series"
        }, 
        {
            "location": "/nrf5sdk/#_1", 
            "text": "nRF5 SDK \u662f Nordic \u9488\u5bf9 nRF5x \u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\uff0c\u5305\u542b\u5404\u79cd\u5916\u8bbe\u9a71\u52a8\u3001\u4ee3\u7801\u5e93\u3001\u5e94\u7528\u793a\u4f8b\u3001\u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\u4ee5\u53ca\u5176\u4ed6\u5177\u6709\u4e13\u5229\u7684\u65e0\u7ebf\u534f\u8bae\u6808\u3002  \u8be5 SDK \u4ee5  zip  \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u53d1\u5e03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u7531\u9009\u62e9\u5f00\u53d1\u73af\u5883\u3002  nRF5 SDK \u81ea\u5e26\u7684\u5e94\u7528\u793a\u4f8b\u4e3b\u8981\u8fd0\u884c\u5728 Nordic \u5b98\u65b9\u7684\u5f00\u53d1\u677f\u4e0a\uff0c\u8fd9\u4e9b\u793a\u4f8b\u53ea\u8981\u7a0d\u4f5c\u4fee\u6539\u5747\u53ef\u5728 nRF52832-MDK \u4e0a\u987a\u5229\u8fd0\u884c\u3002  \u672c\u6587\u6863\u4e3b\u8981\u57fa\u4e8e\u5b98\u65b9\u53d1\u5e03\u7684 SDK \u4ee5\u53ca  GNU ARM Embedded Toolchain  \u64b0\u5199\uff0c\u5185\u5bb9\u4f1a\u968f\u7740 SDK \u53ca\u76f8\u5173\u5de5\u5177\u7248\u672c\u5347\u7ea7\u800c\u4e0d\u65ad\u66f4\u65b0\u5b8c\u5584\u3002   \u63d0\u793a  Nordic \u6700\u8fd1\u5df2\u7ecf\u53d1\u5e03\u4e86 nRF5 SDK 13.0.0 \u6b63\u5f0f\u7248\uff0c\u672c\u6587\u6863\u53d1\u5e03\u4e4b\u9645\u5c06\u4f1a\u652f\u6301\u6700\u65b0\u7248\u672c\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/nrf5sdk/#_2", 
            "text": "\u4e0b\u8f7d nRF5 SDK  \u67e5\u9605\u5b98\u65b9\u5f00\u53d1\u6587\u6863", 
            "title": "\u76f8\u5173\u8d44\u6e90"
        }, 
        {
            "location": "/nrf5sdk/#_3", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/", 
            "text": "\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\uff1aMac OSX\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Mac OSX \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\u3002\n\n\n1\u3001\u5b89\u88c5 GCC \u5de5\u5177\u94fe\n\n\nGNU ARM Embedded Toolchain\n \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M \n Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728 \nARM \u5b98\u7f51\n\u4e0b\u8f7d\u6700\u65b0 OSX \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5 \ngcc-arm-none-eabi-6-2017-q1-update\n \u7248\u672c\u4e3a\u4f8b\uff1a\n\n\n\u5c06\u4e0b\u8f7d\u5b8c\u7684\u538b\u7f29\u5305\u89e3\u538b\u5230\u4f60\u81ea\u5df1\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a\n\n\n# \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\n\n$ \ncd\n your_toolchain_path/\n$ tar -xvf gcc-arm-none-eabi-6-2017-q1-update-mac.tar.bz2\n\n\n# \u9a8c\u8bc1\u7248\u672c\n\n$ \ncd\n your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin/\n$ ./arm-none-eabi-gcc --version\n\n\n\n\n\n\n2\u3001\u914d\u7f6e nRF5 SDK\n\n\n\u4e0b\u8f7d Nordic \nnRF5 SDK\n\uff0cSDK \u7248\u672c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8fd9\u91cc\u4ee5\u6700\u8fd1\u53d1\u5e03\u7684\u7248\u672c \nnRF5_SDK_13.0.0_04a0bfd\n \u4f5c\u4e3a\u793a\u4f8b\uff1a\n\n\n\u5c06 \nnRF5_SDK_13.0.0_04a0bfd.zip\n \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u8fd9\u91cc\u4f7f\u7528 \n./nrf52832-mdk/nrf_sdks/\n\uff1a\n\n\n# \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\n\n$ \ncd\n ./nrf52832-mdk/nrf_sdks/\n$ unzip nRF5_SDK_13.0.0_04a0bfd.zip -d ./nRF5_SDK_13.0.0_04a0bfd\n\n\n\n\u4fee\u6539 \n./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix\n \u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a GCC ARM \u5de5\u5177\u94fe\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4fee\u6539\u5982\u4e0b\uff1a\n\n\n# ./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix\n\n\n\nGNU_INSTALL_ROOT\n \n:=\n your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update\n\nGNU_VERSION\n \n:=\n \n6\n.3.1\n\nGNU_PREFIX\n \n:=\n arm-none-eabi\n\n\n\n\n\n3\u3001\u7f16\u8bd1\n\n\n\u5c1d\u8bd5\u7f16\u8bd1\u5b98\u65b9\u5f00\u53d1\u677f PCA10040 \u7684\u793a\u4f8b\uff0c\u9a8c\u8bc1\u57fa\u672c\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a\n\n\n$ \ncd\n ./nRF5_SDK_13.0.0_04a0bfd/examples/peripheral/blinky/pca10040/blank/armgcc\n$ make\n\n\n\n\n\n\u7f16\u8bd1\u6210\u529f\uff1a\n\n\n\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u7f16\u8bd1 nRF52832-MDK \u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5 \nblinky\n \u4e3a\u4f8b\uff0c\u6e90\u7801\u8def\u5f84\u5728 \n./nrf52832-mdk/examples/nrf5-sdk/blinky\n:\n\n\n$ \ncd\n ./nrf52832-mdk/examples/nrf5-sdk/blinky\n$ make\n\n\n\n\n\n\n\n4\u3001\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u751f\u6210\u7684 \nhex\n \u6587\u4ef6\u5b58\u653e\u5728 \n_build\n \u76ee\u5f55\u4e2d\uff0c\u5c06\u786c\u4ef6\u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nnrf52832_xxaa.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u4e0b\u8f7d\u5b8c\u6210\uff0c\u590d\u4f4d\u5373\u53ef\u8fd0\u884c\u7a0b\u5e8f\u3002\n\n\n\u6216\u8005\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n\n\n\u63d0\u9192\n\n\n\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7ae0\u8282\uff1a\n\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f\n\n\n\n\n$ make flash\n\n\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Mac OSX \u4e0a\u642d\u5efa\u4e86 nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy!\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Mac OSX"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/#nrf5-sdk-mac-osx", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Mac OSX \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\u3002", 
            "title": "\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\uff1aMac OSX"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/#1-gcc", 
            "text": "GNU ARM Embedded Toolchain  \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M   Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728  ARM \u5b98\u7f51 \u4e0b\u8f7d\u6700\u65b0 OSX \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5  gcc-arm-none-eabi-6-2017-q1-update  \u7248\u672c\u4e3a\u4f8b\uff1a  \u5c06\u4e0b\u8f7d\u5b8c\u7684\u538b\u7f29\u5305\u89e3\u538b\u5230\u4f60\u81ea\u5df1\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a  # \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55 \n$  cd  your_toolchain_path/\n$ tar -xvf gcc-arm-none-eabi-6-2017-q1-update-mac.tar.bz2 # \u9a8c\u8bc1\u7248\u672c \n$  cd  your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin/\n$ ./arm-none-eabi-gcc --version", 
            "title": "1\u3001\u5b89\u88c5 GCC \u5de5\u5177\u94fe"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/#2-nrf5-sdk", 
            "text": "\u4e0b\u8f7d Nordic  nRF5 SDK \uff0cSDK \u7248\u672c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8fd9\u91cc\u4ee5\u6700\u8fd1\u53d1\u5e03\u7684\u7248\u672c  nRF5_SDK_13.0.0_04a0bfd  \u4f5c\u4e3a\u793a\u4f8b\uff1a  \u5c06  nRF5_SDK_13.0.0_04a0bfd.zip  \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u8fd9\u91cc\u4f7f\u7528  ./nrf52832-mdk/nrf_sdks/ \uff1a  # \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55 \n$  cd  ./nrf52832-mdk/nrf_sdks/\n$ unzip nRF5_SDK_13.0.0_04a0bfd.zip -d ./nRF5_SDK_13.0.0_04a0bfd \n\n\u4fee\u6539  ./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix  \u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a GCC ARM \u5de5\u5177\u94fe\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4fee\u6539\u5982\u4e0b\uff1a  # ./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix  GNU_INSTALL_ROOT   :=  your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update GNU_VERSION   :=   6 .3.1 GNU_PREFIX   :=  arm-none-eabi", 
            "title": "2\u3001\u914d\u7f6e nRF5 SDK"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/#3", 
            "text": "\u5c1d\u8bd5\u7f16\u8bd1\u5b98\u65b9\u5f00\u53d1\u677f PCA10040 \u7684\u793a\u4f8b\uff0c\u9a8c\u8bc1\u57fa\u672c\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a  $  cd  ./nRF5_SDK_13.0.0_04a0bfd/examples/peripheral/blinky/pca10040/blank/armgcc\n$ make  \u7f16\u8bd1\u6210\u529f\uff1a   \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u7f16\u8bd1 nRF52832-MDK \u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5  blinky  \u4e3a\u4f8b\uff0c\u6e90\u7801\u8def\u5f84\u5728  ./nrf52832-mdk/examples/nrf5-sdk/blinky :  $  cd  ./nrf52832-mdk/examples/nrf5-sdk/blinky\n$ make", 
            "title": "3\u3001\u7f16\u8bd1"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/#4", 
            "text": "\u751f\u6210\u7684  hex  \u6587\u4ef6\u5b58\u653e\u5728  _build  \u76ee\u5f55\u4e2d\uff0c\u5c06\u786c\u4ef6\u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  nrf52832_xxaa.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u4e0b\u8f7d\u5b8c\u6210\uff0c\u590d\u4f4d\u5373\u53ef\u8fd0\u884c\u7a0b\u5e8f\u3002  \u6216\u8005\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a   \u63d0\u9192  \u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7ae0\u8282\uff1a \u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f   $ make flash    \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Mac OSX \u4e0a\u642d\u5efa\u4e86 nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy!", 
            "title": "4\u3001\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-osx/#_1", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/", 
            "text": "\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\uff1aLinux\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Linux \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\u3002\n\n\n\n\n\u8bf4\u660e\n\n\n\u8fd9\u91cc\u4ee5 Ubuntu 16.04 LTS \u4f5c\u4e3a\u793a\u4f8b\uff0c\u5176\u4ed6 Linux \u53d1\u884c\u7248\u4e5f\u53ef\u6309\u7167\u6b64\u65b9\u6cd5\u914d\u7f6e\uff0c\u5982\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u53cd\u9988\u3002\n\n\n\n\n1\u3001\u5b89\u88c5 GCC \u5de5\u5177\u94fe\n\n\nGNU ARM Embedded Toolchain\n \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M \n Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728 \nARM \u5b98\u7f51\n\u4e0b\u8f7d\u6700\u65b0 Linux \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5 \ngcc-arm-none-eabi-6-2017-q1-update\n \u7248\u672c\u4e3a\u4f8b\uff1a\n\n\n\u5c06\u4e0b\u8f7d\u5b8c\u7684\u538b\u7f29\u5305\u89e3\u538b\u5230\u4f60\u81ea\u5df1\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a\n\n\n# \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\n\n$ \ncd\n your_toolchain_path/\n$ tar -xvf gcc-arm-none-eabi-6-2017-q1-update-linux.tar.bz2\n\n\n# \u9a8c\u8bc1\u7248\u672c\n\n$ \ncd\n your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin/\n$ ./arm-none-eabi-gcc --version\n\n\n\n\n\n\n2\u3001\u914d\u7f6e nRF5 SDK\n\n\n\u4e0b\u8f7d Nordic \nnRF5 SDK\n\uff0cSDK \u7248\u672c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8fd9\u91cc\u4ee5\u6700\u8fd1\u53d1\u5e03\u7684\u7248\u672c \nnRF5_SDK_13.0.0_04a0bfd\n \u4f5c\u4e3a\u793a\u4f8b\uff1a\n\n\n\u5c06 \nnRF5_SDK_13.0.0_04a0bfd.zip\n \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u8fd9\u91cc\u4f7f\u7528 \n./nrf52832-mdk/nrf_sdks/\n\uff1a\n\n\n# \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\n\n$ \ncd\n ./nrf52832-mdk/nrf_sdks/\n$ unzip nRF5_SDK_13.0.0_04a0bfd.zip -d ./nRF5_SDK_13.0.0_04a0bfd\n\n\n\n\u4fee\u6539 \n./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix\n \u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a GCC ARM \u5de5\u5177\u94fe\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4fee\u6539\u5982\u4e0b\uff1a\n\n\n# ./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix\n\n\n\nGNU_INSTALL_ROOT\n \n:=\n your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update\n\nGNU_VERSION\n \n:=\n \n6\n.3.1\n\nGNU_PREFIX\n \n:=\n arm-none-eabi\n\n\n\n\n\n3\u3001\u7f16\u8bd1\n\n\n\u5c1d\u8bd5\u7f16\u8bd1\u5b98\u65b9\u5f00\u53d1\u677f PCA10040 \u7684\u793a\u4f8b\uff0c\u9a8c\u8bc1\u57fa\u672c\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a\n\n\n$ \ncd\n ./nRF5_SDK_13.0.0_04a0bfd/examples/peripheral/blinky/pca10040/blank/armgcc\n$ make\n\n\n\n\u4e0b\u56fe\u662f\u987a\u5229\u7f16\u8bd1\u7684\u8f93\u51fa\uff1a\n\n\n\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u7f16\u8bd1 nRF52832-MDK \u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5 \nblinky\n \u4e3a\u4f8b\uff0c\u6e90\u7801\u8def\u5f84\u5728 \n./nrf52832-mdk/examples/nrf5-sdk/blinky\n:\n\n\n$ \ncd\n ./nrf52832-mdk/examples/nrf5-sdk/blinky\n$ make\n\n\n\n\n\n\n\n4\u3001\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u751f\u6210\u7684 \nhex\n \u6587\u4ef6\u5b58\u653e\u5728 \n_build\n \u76ee\u5f55\u4e2d\uff0c\u5c06\u786c\u4ef6\u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nnrf52832_xxaa.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u4e0b\u8f7d\u5b8c\u6210\uff0c\u590d\u4f4d\u5373\u53ef\u8fd0\u884c\u7a0b\u5e8f\u3002\n\n\n\u6216\u8005\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n\n\n\u63d0\u9192\n\n\n\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7ae0\u8282\uff1a\n\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f\n\n\n\n\n$ sudo make flash\n\n\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Linux \u7cfb\u7edf\u4e0a\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy!\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Linux"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/#nrf5-sdk-linux", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Linux \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\u3002   \u8bf4\u660e  \u8fd9\u91cc\u4ee5 Ubuntu 16.04 LTS \u4f5c\u4e3a\u793a\u4f8b\uff0c\u5176\u4ed6 Linux \u53d1\u884c\u7248\u4e5f\u53ef\u6309\u7167\u6b64\u65b9\u6cd5\u914d\u7f6e\uff0c\u5982\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u53cd\u9988\u3002", 
            "title": "\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\uff1aLinux"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/#1-gcc", 
            "text": "GNU ARM Embedded Toolchain  \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M   Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728  ARM \u5b98\u7f51 \u4e0b\u8f7d\u6700\u65b0 Linux \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5  gcc-arm-none-eabi-6-2017-q1-update  \u7248\u672c\u4e3a\u4f8b\uff1a  \u5c06\u4e0b\u8f7d\u5b8c\u7684\u538b\u7f29\u5305\u89e3\u538b\u5230\u4f60\u81ea\u5df1\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a  # \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55 \n$  cd  your_toolchain_path/\n$ tar -xvf gcc-arm-none-eabi-6-2017-q1-update-linux.tar.bz2 # \u9a8c\u8bc1\u7248\u672c \n$  cd  your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin/\n$ ./arm-none-eabi-gcc --version", 
            "title": "1\u3001\u5b89\u88c5 GCC \u5de5\u5177\u94fe"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/#2-nrf5-sdk", 
            "text": "\u4e0b\u8f7d Nordic  nRF5 SDK \uff0cSDK \u7248\u672c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8fd9\u91cc\u4ee5\u6700\u8fd1\u53d1\u5e03\u7684\u7248\u672c  nRF5_SDK_13.0.0_04a0bfd  \u4f5c\u4e3a\u793a\u4f8b\uff1a  \u5c06  nRF5_SDK_13.0.0_04a0bfd.zip  \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u8fd9\u91cc\u4f7f\u7528  ./nrf52832-mdk/nrf_sdks/ \uff1a  # \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55 \n$  cd  ./nrf52832-mdk/nrf_sdks/\n$ unzip nRF5_SDK_13.0.0_04a0bfd.zip -d ./nRF5_SDK_13.0.0_04a0bfd \n\n\u4fee\u6539  ./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix  \u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a GCC ARM \u5de5\u5177\u94fe\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4fee\u6539\u5982\u4e0b\uff1a  # ./nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix  GNU_INSTALL_ROOT   :=  your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update GNU_VERSION   :=   6 .3.1 GNU_PREFIX   :=  arm-none-eabi", 
            "title": "2\u3001\u914d\u7f6e nRF5 SDK"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/#3", 
            "text": "\u5c1d\u8bd5\u7f16\u8bd1\u5b98\u65b9\u5f00\u53d1\u677f PCA10040 \u7684\u793a\u4f8b\uff0c\u9a8c\u8bc1\u57fa\u672c\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a  $  cd  ./nRF5_SDK_13.0.0_04a0bfd/examples/peripheral/blinky/pca10040/blank/armgcc\n$ make \n\n\u4e0b\u56fe\u662f\u987a\u5229\u7f16\u8bd1\u7684\u8f93\u51fa\uff1a   \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u7f16\u8bd1 nRF52832-MDK \u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5  blinky  \u4e3a\u4f8b\uff0c\u6e90\u7801\u8def\u5f84\u5728  ./nrf52832-mdk/examples/nrf5-sdk/blinky :  $  cd  ./nrf52832-mdk/examples/nrf5-sdk/blinky\n$ make", 
            "title": "3\u3001\u7f16\u8bd1"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/#4", 
            "text": "\u751f\u6210\u7684  hex  \u6587\u4ef6\u5b58\u653e\u5728  _build  \u76ee\u5f55\u4e2d\uff0c\u5c06\u786c\u4ef6\u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  nrf52832_xxaa.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u4e0b\u8f7d\u5b8c\u6210\uff0c\u590d\u4f4d\u5373\u53ef\u8fd0\u884c\u7a0b\u5e8f\u3002  \u6216\u8005\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a   \u63d0\u9192  \u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7ae0\u8282\uff1a \u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f   $ sudo make flash    \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Linux \u7cfb\u7edf\u4e0a\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy!", 
            "title": "4\u3001\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-linux/#_1", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/", 
            "text": "\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\uff1aWindows\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Windows \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\u3002\n\n\n\n\n\u8bf4\u660e\n\n\n\u8fd9\u91cc\u4ee5 Windows 10 \u4f5c\u4e3a\u793a\u4f8b\uff0c\u4f7f\u7528\u5176\u4ed6 Windows \u7248\u672c\u9047\u5230\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6b22\u8fce\u53cd\u9988\u3002\n\n\n\n\nWindows \u5bf9\u5f00\u53d1\u8005\u6765\u8bf4\u6709\u70b9\u9ebb\u70e6\uff0c\u4e0d\u80fd\u539f\u751f\u652f\u6301\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\uff0c\u5982\u6211\u4eec\u5c06\u9700\u8981\u7528\u5230\u7684\u4e24\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff1a\nmake\n \u548c \nrm\n\u3002\u8981\u60f3\u5728 Windows \u73af\u5883\u4e0b\u4f7f\u7528 GNU \u7684\u5f00\u6e90\u5de5\u5177\uff0c\u6700\u597d\u4e5f\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u5728 Windows \u4e0a\u5b89\u88c5\u4e00\u4e2a Unix \u73af\u5883\u3002\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u57fa\u4e8e \nMSYS2\n (\u4e00\u4e2a\u4e13\u95e8\u4e3a Windows \u5f00\u53d1\u7684\u73b0\u4ee3 Unix \u73af\u5883) \u6765\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\u3002\n\n\n1\u3001\u5b89\u88c5 MSYS2\n\n\n\u4ece \nMSYS2 \u5b98\u7f51\n \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u8f6f\u4ef6\uff0c\u76f4\u63a5\u5b89\u88c5\uff1a\n\n\n\n\n\n\n\n\n2\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n\n\u6253\u5f00 MSYS2\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a\n\n\n$ pacman -S git make gcc diffutils ncurses-devel python2 python3\n\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u5b9e\u9645\u4e0a\u53ea\u9700\u8981 \nmake\n \u548c \ngit\n \u5c31\u597d\u4e86\uff0c\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u5b66\u4e60 Zephyr\uff0c\u5c31\u4e00\u8d77\u5b89\u88c5\u4e86\u3002\n\n\n\n\n\n\n3\u3001\u5b89\u88c5 GNU ARM Embedded\n\n\nGNU ARM Embedded Toolchain\n \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M \n Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728 \nARM \u5b98\u7f51\n\u4e0b\u8f7d\u6700\u65b0 Windows \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5 \ngcc-arm-none-eabi-6-2017-q1-update-win32\n \u7248\u672c\u4e3a\u4f8b\uff1a\n\n\n\u4e0b\u8f7d \ngcc-arm-none-eabi-6-2017-q1-update-win32-zip.zip\n \u538b\u7f29\u5305\u5e76\u89e3\u538b\u5230 \nc:/gccarmemb\n\uff0c\u7136\u540e\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a\n\n\n# \u9a8c\u8bc1\u7248\u672c\n\n$ \ncd\n /c/gccarmemb/bin/\n$ ./arm-none-eabi-gcc --version\n\n\n\n\n\n\n\n4\u3001\u914d\u7f6e nRF5 SDK\n\n\n\u4e0b\u8f7d Nordic \nnRF5 SDK\n\uff0cSDK \u7248\u672c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8fd9\u91cc\u4ee5\u6700\u8fd1\u53d1\u5e03\u7684\u7248\u672c \nnRF5_SDK_13.0.0_04a0bfd\n \u4f5c\u4e3a\u793a\u4f8b\uff1a\n\n\n\u5c06 \nnRF5_SDK_13.0.0_04a0bfd.zip\n \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u8fd9\u91cc\u4f7f\u7528 \nc:/nrf52832-mdk/nrf_sdks/\n\u3002\n\n\n\u4fee\u6539 \nc:/nrf52832-mdk/nrf_sdks/nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix\n \u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a \n/c/gccarmemb\n\uff0c\u4fee\u6539\u5982\u4e0b\uff1a\n\n\n# ./nRF5_SDK_13.0.0_04a0bfd/components/toolchaing/gcc/Makefile.posix\n\n\n\nGNU_INSTALL_ROOT\n \n:=\n /c/gccarmemb\n\nGNU_VERSION\n \n:=\n \n6\n.3.1\n\nGNU_PREFIX\n \n:=\n arm-none-eabi\n\n\n\n\n\n5\u3001\u7f16\u8bd1\n\n\n\u968f\u4fbf\u7f16\u8bd1\u5b98\u65b9\u5f00\u53d1\u677f PCA10040 \u7684\u793a\u4f8b\uff0c\u9a8c\u8bc1\u57fa\u672c\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a\n\n\n$ \ncd\n /c/nrf52832-mdk/nrf_sdks/nRF5_SDK_13.0.0_04a0bfd/examples/peripheral/blinky/pca10040/blank/armgcc\n$ make\n\n\n\n\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u8bd1 nRF52832-MDK \u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5 \nblinky\n \u4e3a\u4f8b\uff0c\u6e90\u7801\u8def\u5f84\u5728 \n./nrf52832-mdk/examples/nrf5-sdk/blinky\n:\n\n\n$ \ncd\n ./nrf52832-mdk/examples/nrf5-sdk/blinky\n$ make\n\n\n\n\n\n\n\n6\u3001\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u751f\u6210\u7684 \nhex\n \u6587\u4ef6\u5b58\u653e\u5728 \n_build\n \u76ee\u5f55\u4e2d\uff0c\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nnrf52832_xxaa.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./_build/nrf52832_xxaa.hex\n\n\n\n\n\n\n\n\u63d0\u9192\n\n\n\u5728 MSYS2 \u73af\u5883\u65e0\u6cd5\u5b9e\u73b0 pyOCD \u4e0b\u8f7d\uff0c\u53ef\u4ee5\u56de\u5230 Windows \u73af\u5883\u8fdb\u884c\u4e0b\u8f7d\u3002\n\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Windows \u7cfb\u7edf\u4e0b\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy!\n\n\n\u62d3\u5c55\u9605\u8bfb\n\n\n\u5728 Windows \u5e73\u53f0\u4e0a\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 \nKeil \u03bcVision\u2122 IDE\n \u4ee5\u53ca \nIAR Embedded Workbench\n \u8fdb\u884c\u5f00\u53d1\uff0c\u7531\u4e8e\u4ed6\u4eec\u90fd\u662f\u5546\u4e1a\u8f6f\u4ef6\uff0c\u8fd9\u91cc\u4e0d\u4fbf\u505a\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u540e\u7eed\u5982\u679c\u6709\u9700\u8981\u518d\u8003\u8651\u589e\u52a0\u76f8\u5173\u7ae0\u8282\u3002\u5efa\u8bae\u5927\u5bb6\u4f7f\u7528\u5f00\u6e90\u7684\u5de5\u5177\u94fe\uff0c\u8fd9\u4e9b\u5de5\u5177\u5df2\u7ecf\u7ef4\u62a4\u5f97\u975e\u5e38\u597d\u7528\u4e86\uff0c\u4e00\u70b9\u90fd\u4e0d\u8f93\u5546\u4e1a\u8f6f\u4ef6\u3002\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Windows"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#nrf5-sdk-windows", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Windows \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\u3002   \u8bf4\u660e  \u8fd9\u91cc\u4ee5 Windows 10 \u4f5c\u4e3a\u793a\u4f8b\uff0c\u4f7f\u7528\u5176\u4ed6 Windows \u7248\u672c\u9047\u5230\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6b22\u8fce\u53cd\u9988\u3002   Windows \u5bf9\u5f00\u53d1\u8005\u6765\u8bf4\u6709\u70b9\u9ebb\u70e6\uff0c\u4e0d\u80fd\u539f\u751f\u652f\u6301\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\uff0c\u5982\u6211\u4eec\u5c06\u9700\u8981\u7528\u5230\u7684\u4e24\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff1a make  \u548c  rm \u3002\u8981\u60f3\u5728 Windows \u73af\u5883\u4e0b\u4f7f\u7528 GNU \u7684\u5f00\u6e90\u5de5\u5177\uff0c\u6700\u597d\u4e5f\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u5728 Windows \u4e0a\u5b89\u88c5\u4e00\u4e2a Unix \u73af\u5883\u3002  \u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u57fa\u4e8e  MSYS2  (\u4e00\u4e2a\u4e13\u95e8\u4e3a Windows \u5f00\u53d1\u7684\u73b0\u4ee3 Unix \u73af\u5883) \u6765\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\u3002", 
            "title": "\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\uff1aWindows"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#1-msys2", 
            "text": "\u4ece  MSYS2 \u5b98\u7f51  \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u8f6f\u4ef6\uff0c\u76f4\u63a5\u5b89\u88c5\uff1a", 
            "title": "1\u3001\u5b89\u88c5 MSYS2"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#2", 
            "text": "\u6253\u5f00 MSYS2\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a  $ pacman -S git make gcc diffutils ncurses-devel python2 python3   \u63d0\u793a  \u5b9e\u9645\u4e0a\u53ea\u9700\u8981  make  \u548c  git  \u5c31\u597d\u4e86\uff0c\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u5b66\u4e60 Zephyr\uff0c\u5c31\u4e00\u8d77\u5b89\u88c5\u4e86\u3002", 
            "title": "2\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#3-gnu-arm-embedded", 
            "text": "GNU ARM Embedded Toolchain  \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M   Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728  ARM \u5b98\u7f51 \u4e0b\u8f7d\u6700\u65b0 Windows \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5  gcc-arm-none-eabi-6-2017-q1-update-win32  \u7248\u672c\u4e3a\u4f8b\uff1a  \u4e0b\u8f7d  gcc-arm-none-eabi-6-2017-q1-update-win32-zip.zip  \u538b\u7f29\u5305\u5e76\u89e3\u538b\u5230  c:/gccarmemb \uff0c\u7136\u540e\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a  # \u9a8c\u8bc1\u7248\u672c \n$  cd  /c/gccarmemb/bin/\n$ ./arm-none-eabi-gcc --version", 
            "title": "3\u3001\u5b89\u88c5 GNU ARM Embedded"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#4-nrf5-sdk", 
            "text": "\u4e0b\u8f7d Nordic  nRF5 SDK \uff0cSDK \u7248\u672c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8fd9\u91cc\u4ee5\u6700\u8fd1\u53d1\u5e03\u7684\u7248\u672c  nRF5_SDK_13.0.0_04a0bfd  \u4f5c\u4e3a\u793a\u4f8b\uff1a  \u5c06  nRF5_SDK_13.0.0_04a0bfd.zip  \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u8fd9\u91cc\u4f7f\u7528  c:/nrf52832-mdk/nrf_sdks/ \u3002  \u4fee\u6539  c:/nrf52832-mdk/nrf_sdks/nRF5_SDK_13.0.0_04a0bfd/components/toolchain/gcc/Makefile.posix  \u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a  /c/gccarmemb \uff0c\u4fee\u6539\u5982\u4e0b\uff1a  # ./nRF5_SDK_13.0.0_04a0bfd/components/toolchaing/gcc/Makefile.posix  GNU_INSTALL_ROOT   :=  /c/gccarmemb GNU_VERSION   :=   6 .3.1 GNU_PREFIX   :=  arm-none-eabi", 
            "title": "4\u3001\u914d\u7f6e nRF5 SDK"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#5", 
            "text": "\u968f\u4fbf\u7f16\u8bd1\u5b98\u65b9\u5f00\u53d1\u677f PCA10040 \u7684\u793a\u4f8b\uff0c\u9a8c\u8bc1\u57fa\u672c\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a  $  cd  /c/nrf52832-mdk/nrf_sdks/nRF5_SDK_13.0.0_04a0bfd/examples/peripheral/blinky/pca10040/blank/armgcc\n$ make   \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u8bd1 nRF52832-MDK \u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5  blinky  \u4e3a\u4f8b\uff0c\u6e90\u7801\u8def\u5f84\u5728  ./nrf52832-mdk/examples/nrf5-sdk/blinky :  $  cd  ./nrf52832-mdk/examples/nrf5-sdk/blinky\n$ make", 
            "title": "5\u3001\u7f16\u8bd1"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#6", 
            "text": "\u751f\u6210\u7684  hex  \u6587\u4ef6\u5b58\u653e\u5728  _build  \u76ee\u5f55\u4e2d\uff0c\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  nrf52832_xxaa.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002   \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./_build/nrf52832_xxaa.hex   \u63d0\u9192  \u5728 MSYS2 \u73af\u5883\u65e0\u6cd5\u5b9e\u73b0 pyOCD \u4e0b\u8f7d\uff0c\u53ef\u4ee5\u56de\u5230 Windows \u73af\u5883\u8fdb\u884c\u4e0b\u8f7d\u3002     \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Windows \u7cfb\u7edf\u4e0b\u642d\u5efa nRF5 SDK \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy!", 
            "title": "6\u3001\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#_1", 
            "text": "\u5728 Windows \u5e73\u53f0\u4e0a\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528  Keil \u03bcVision\u2122 IDE  \u4ee5\u53ca  IAR Embedded Workbench  \u8fdb\u884c\u5f00\u53d1\uff0c\u7531\u4e8e\u4ed6\u4eec\u90fd\u662f\u5546\u4e1a\u8f6f\u4ef6\uff0c\u8fd9\u91cc\u4e0d\u4fbf\u505a\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u540e\u7eed\u5982\u679c\u6709\u9700\u8981\u518d\u8003\u8651\u589e\u52a0\u76f8\u5173\u7ae0\u8282\u3002\u5efa\u8bae\u5927\u5bb6\u4f7f\u7528\u5f00\u6e90\u7684\u5de5\u5177\u94fe\uff0c\u8fd9\u4e9b\u5de5\u5177\u5df2\u7ecf\u7ef4\u62a4\u5f97\u975e\u5e38\u597d\u7528\u4e86\uff0c\u4e00\u70b9\u90fd\u4e0d\u8f93\u5546\u4e1a\u8f6f\u4ef6\u3002", 
            "title": "\u62d3\u5c55\u9605\u8bfb"
        }, 
        {
            "location": "/nrf5sdk/setup-devenv-win/#_2", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/", 
            "text": "nRF5 SDK \u5165\u95e8\u793a\u4f8b\uff1aBlinky\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u7b80\u4ecb\n\n\nBlinky \u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u9879\u76ee\uff0c\u901a\u8fc7\u8be5\u793a\u4f8b\uff0c\u4f60\u5c06\u4f1a\u4e86\u89e3 nRF5 SDK \u5f00\u53d1\u7684\u57fa\u672c\u6b65\u9aa4\uff0c\u4e3a\u540e\u9762\u5f00\u53d1\u66f4\u590d\u6742\u7684\u5e94\u7528\u505a\u597d\u51c6\u5907\u3002\n\n\n\u6e90\u7801\u7ed3\u6784\n\n\n\u4ee5\u4e0b\u6811\u72b6\u56fe\u5c55\u793a\u4e86\u4e0e \nblinky\n \u793a\u4f8b\u76f8\u5173\u7684\u6e90\u7801\u7ed3\u6784\uff0c\u7531 \nMakefile\n \u6587\u4ef6\u7edf\u4e00\u63a7\u5236\u9879\u76ee\u7684\u7f16\u8bd1\u3001\u4e0b\u8f7d\uff0c\u4f60\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u6a21\u677f\u521b\u5efa\u81ea\u5df1\u7684\u9879\u76ee\uff1a\n\n\n.\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nrf5-sdk\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 blinky\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 Makefile              \n# \u7f16\u8bd1\u63a7\u5236\u6587\u4ef6\n\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 _build                \n# \u5b58\u653e\u7f16\u8bd1\u8f93\u51fa\u6587\u4ef6\n\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 blinky_gcc_nrf52.ld   \n# \u94fe\u63a5\u547d\u4ee4\n\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 hex                   \n\u2502\u00a0\u00a0         \u2502   \u2514\u2500\u2500 nrf52832_xxaa.hex \n# \u9884\u7f16\u8bd1hex\u6587\u4ef6\n\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 inc                   \n\u2502\u00a0\u00a0         \u2502   \u251c\u2500\u2500 custom_board.h    \n# \u786c\u4ef6\u914d\u7f6e\u6587\u4ef6\n\n\u2502\u00a0\u00a0         \u2502   \u2514\u2500\u2500 sdk_config.h      \n# SDK\u914d\u7f6e\u6587\u4ef6\n\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 src                 \n\u2502           \u2502   \u2514\u2500\u2500 main.c            \n# \u4e3b\u7a0b\u5e8f\n\n\u2502           \u2514\u2500\u2500 README.md             \n# \u8bf4\u660e\u6587\u6863\n\n\u251c\u2500\u2500 nrf_sdks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nRF5_SDK_13.0.0_04a0bfd       \n# \u5b98\u65b9SDK\u5b58\u653e\u4f4d\u7f6e\n\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 components\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 documentation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 external\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 license.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nRF5x_MDK_8_12_0_IAR_NordicLicense.msi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nRF5x_MDK_8_12_0_Keil4_NordicLicense.msi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 svd\n\u2514\u2500\u2500 tools\n    \u2514\u2500\u2500 mergehex  \n# hex\u6587\u4ef6\u5408\u6210\u5de5\u5177\n\n\n\n\n\n\n\u4e3b\u7a0b\u5e8f\n\n\n\u4e3b\u7a0b\u5e8f\u4f4d\u4e8e \nblinky/src/main.c\n\uff0c\u8fd9\u91cc\u53ea\u7b80\u5355\u5b9e\u73b0 RGB LED \u4ee5\u6d41\u6c34\u706f\u7684\u65b9\u5f0f\u5faa\u73af\u95ea\u70c1\uff0c\u6e90\u7801\u5982\u4e0b\uff1a\n\n\n#include\n \nstdbool.h\n\n\n#include\n \nstdint.h\n\n\n#include\n \nnrf_delay.h\n\n\n#include\n \nboards.h\n\n\n\n/**\n\n\n * @brief Function for application main entry.\n\n\n */\n\n\nint\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \n/* Configure board. */\n\n    \nbsp_board_leds_init\n();\n\n\n    \n/* Toggle LEDs. */\n\n    \nwhile\n \n(\ntrue\n)\n\n    \n{\n\n        \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \nLEDS_NUMBER\n;\n \ni\n++\n)\n\n        \n{\n\n            \nbsp_board_led_invert\n(\ni\n);\n\n            \nnrf_delay_ms\n(\n500\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n/**\n\n\n *@}\n\n\n **/\n\n\n\n\n\n\nMakefile\n\n\nMakefile \u4f1a\u5b9a\u4e49\u7a0b\u5e8f\u7684\u7f16\u8bd1\u89c4\u5219\uff0c\u4e00\u65e6\u5199\u597d\uff0c\u53ea\u9700\u8981\u4e00\u4e2a \nmake\n \u547d\u4ee4\uff0c\u6574\u4e2a\u9879\u76ee\u5b8c\u5168\u81ea\u52a8\u7f16\u8bd1\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u793a\u4f8b\u9879\u76ee\u7684 \nMakefile\n \u6587\u4ef6\u4f5c\u4e3a\u6a21\u677f\uff0c\u4e3b\u8981\u505a\u51e0\u70b9\u4fee\u6539\u5373\u53ef\uff1a\n\n\n# \u4fee\u6539\u9879\u76ee\u7684\u94fe\u63a5\u6587\u4ef6\n\n\nLINKER_SCRIPT\n  \n:=\n blinky_gcc_nrf52.ld\n\n\n# C \u6587\u4ef6\u8def\u5f84\n\n\nSRC_FILES\n \n+=\n your_source_code_path\n\n\n# \u5f15\u7528\u5934\u6587\u4ef6\u7684\u8def\u5f84\n\n\nINC_FOLDERS\n \n+=\n your_header_file_path\n\n\n# \u9759\u6001\u5e93\u8def\u5f84\n\n\nLIB_FILES\n \n+=\n your_lib_file_path\n\n\n# \u5b9a\u4e49\u5b8f\uff0c\u5982\u5fc5\u987b\u5b9a\u4e49 \nBOARD_CUSTOM\n \u5b8f\n\n\nCFLAGS\n \n+=\n -DBOARD_CUSTOM\n\nASMFLAGS\n \n+=\n -DBOARD_CUSTOM\n\n\n\n\n\n\u4e0b\u8f7d\u56fa\u4ef6\n\n\nMakefile \u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4f7f\u7528 pyOCD \u4e0b\u8f7d\u56fa\u4ef6\u7684 shell \u547d\u4ee4\uff1a\n\n\n# \u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f\n\n\nflash\n:\n \n$(\nOUTPUT_DIRECTORY\n)\n/\nnrf\n52832\n_xxaa\n.\nhex\n\n    @echo Flashing: $\n\n    pyocd-flashtool -d debug -t nrf52 -se $\n\n\n\n# \u4e0b\u8f7d softdevice\n\n\nflash_softdevice\n:\n\n    @echo Flashing: s132_nrf52_4.0.2_softdevice.hex\n    pyocd-flashtool -d debug -t nrf52 -se \n$(\nSDK_ROOT\n)\n/components/softdevice/s132/hex/s132_nrf52_4.0.2_softdevice.hex\n\n\n# \u64e6\u9664\u6574\u7247 flash\n\n\nerase\n:\n\n    pyocd-flashtool -d debug -t nrf52 -ce\n\n\n\n\n\n\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u5728\u7ec8\u7aef\u76f4\u63a5\u8fd0\u884c\u76f8\u5173\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u64e6\u9664\u3001\u4e0b\u8f7d\u7b49\u64cd\u4f5c\uff1a\n\n\n# \u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f\n\n$ make flash\n\n\n# \u5982\u679c\u8c03\u7528 softdevice \u7684 API\uff0c\u5fc5\u987b\u4e0b\u8f7d\u9884\u7f16\u8bd1\u597d\u7684 softdevice\uff0csoftdevice \u4e3a Nordic \u7684\u4e13\u5229\uff0c\u8fd9\u90e8\u5206\u6ca1\u6709\u5f00\u653e\u6e90\u7801\n\n$ make flash_softdevice\n\n\n# \u64e6\u9664\u6574\u7247 flash\n\n$ make erase\n\n\n\n\n\n\u597d\u4e86\uff0c\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\u7684\u5b9e\u9645\u8fd0\u884c\u6548\u679c\uff1a\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\u4e00\u4e2a\u4f60\u4f1a\u7231\u4e0a\u7684\u6587\u672c\u7f16\u8f91\u5668\uff1a\nSublime Text\n\n\n\u201c\u8ddf\u6211\u4e00\u8d77\u5199 Makefile\u201d\n\n\nNordic \u5b98\u65b9\u6587\u6863\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Blinky"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#nrf5-sdk-blinky", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "nRF5 SDK \u5165\u95e8\u793a\u4f8b\uff1aBlinky"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#_1", 
            "text": "Blinky \u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u9879\u76ee\uff0c\u901a\u8fc7\u8be5\u793a\u4f8b\uff0c\u4f60\u5c06\u4f1a\u4e86\u89e3 nRF5 SDK \u5f00\u53d1\u7684\u57fa\u672c\u6b65\u9aa4\uff0c\u4e3a\u540e\u9762\u5f00\u53d1\u66f4\u590d\u6742\u7684\u5e94\u7528\u505a\u597d\u51c6\u5907\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#_2", 
            "text": "\u4ee5\u4e0b\u6811\u72b6\u56fe\u5c55\u793a\u4e86\u4e0e  blinky  \u793a\u4f8b\u76f8\u5173\u7684\u6e90\u7801\u7ed3\u6784\uff0c\u7531  Makefile  \u6587\u4ef6\u7edf\u4e00\u63a7\u5236\u9879\u76ee\u7684\u7f16\u8bd1\u3001\u4e0b\u8f7d\uff0c\u4f60\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u6a21\u677f\u521b\u5efa\u81ea\u5df1\u7684\u9879\u76ee\uff1a  .\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nrf5-sdk\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 blinky\n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 Makefile               # \u7f16\u8bd1\u63a7\u5236\u6587\u4ef6 \n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 _build                 # \u5b58\u653e\u7f16\u8bd1\u8f93\u51fa\u6587\u4ef6 \n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 blinky_gcc_nrf52.ld    # \u94fe\u63a5\u547d\u4ee4 \n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 hex                   \n\u2502\u00a0\u00a0         \u2502   \u2514\u2500\u2500 nrf52832_xxaa.hex  # \u9884\u7f16\u8bd1hex\u6587\u4ef6 \n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 inc                   \n\u2502\u00a0\u00a0         \u2502   \u251c\u2500\u2500 custom_board.h     # \u786c\u4ef6\u914d\u7f6e\u6587\u4ef6 \n\u2502\u00a0\u00a0         \u2502   \u2514\u2500\u2500 sdk_config.h       # SDK\u914d\u7f6e\u6587\u4ef6 \n\u2502\u00a0\u00a0      \u00a0\u00a0 \u251c\u2500\u2500 src                 \n\u2502           \u2502   \u2514\u2500\u2500 main.c             # \u4e3b\u7a0b\u5e8f \n\u2502           \u2514\u2500\u2500 README.md              # \u8bf4\u660e\u6587\u6863 \n\u251c\u2500\u2500 nrf_sdks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nRF5_SDK_13.0.0_04a0bfd        # \u5b98\u65b9SDK\u5b58\u653e\u4f4d\u7f6e \n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 components\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 documentation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 external\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 license.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nRF5x_MDK_8_12_0_IAR_NordicLicense.msi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nRF5x_MDK_8_12_0_Keil4_NordicLicense.msi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 svd\n\u2514\u2500\u2500 tools\n    \u2514\u2500\u2500 mergehex   # hex\u6587\u4ef6\u5408\u6210\u5de5\u5177", 
            "title": "\u6e90\u7801\u7ed3\u6784"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#_3", 
            "text": "\u4e3b\u7a0b\u5e8f\u4f4d\u4e8e  blinky/src/main.c \uff0c\u8fd9\u91cc\u53ea\u7b80\u5355\u5b9e\u73b0 RGB LED \u4ee5\u6d41\u6c34\u706f\u7684\u65b9\u5f0f\u5faa\u73af\u95ea\u70c1\uff0c\u6e90\u7801\u5982\u4e0b\uff1a  #include   stdbool.h  #include   stdint.h  #include   nrf_delay.h  #include   boards.h  /**   * @brief Function for application main entry.   */  int   main ( void )  { \n     /* Configure board. */ \n     bsp_board_leds_init (); \n\n     /* Toggle LEDs. */ \n     while   ( true ) \n     { \n         for   ( int   i   =   0 ;   i     LEDS_NUMBER ;   i ++ ) \n         { \n             bsp_board_led_invert ( i ); \n             nrf_delay_ms ( 500 ); \n         } \n     }  }  /**   *@}   **/", 
            "title": "\u4e3b\u7a0b\u5e8f"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#makefile", 
            "text": "Makefile \u4f1a\u5b9a\u4e49\u7a0b\u5e8f\u7684\u7f16\u8bd1\u89c4\u5219\uff0c\u4e00\u65e6\u5199\u597d\uff0c\u53ea\u9700\u8981\u4e00\u4e2a  make  \u547d\u4ee4\uff0c\u6574\u4e2a\u9879\u76ee\u5b8c\u5168\u81ea\u52a8\u7f16\u8bd1\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u793a\u4f8b\u9879\u76ee\u7684  Makefile  \u6587\u4ef6\u4f5c\u4e3a\u6a21\u677f\uff0c\u4e3b\u8981\u505a\u51e0\u70b9\u4fee\u6539\u5373\u53ef\uff1a  # \u4fee\u6539\u9879\u76ee\u7684\u94fe\u63a5\u6587\u4ef6  LINKER_SCRIPT    :=  blinky_gcc_nrf52.ld # C \u6587\u4ef6\u8def\u5f84  SRC_FILES   +=  your_source_code_path # \u5f15\u7528\u5934\u6587\u4ef6\u7684\u8def\u5f84  INC_FOLDERS   +=  your_header_file_path # \u9759\u6001\u5e93\u8def\u5f84  LIB_FILES   +=  your_lib_file_path # \u5b9a\u4e49\u5b8f\uff0c\u5982\u5fc5\u987b\u5b9a\u4e49  BOARD_CUSTOM  \u5b8f  CFLAGS   +=  -DBOARD_CUSTOM ASMFLAGS   +=  -DBOARD_CUSTOM", 
            "title": "Makefile"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#_4", 
            "text": "Makefile \u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4f7f\u7528 pyOCD \u4e0b\u8f7d\u56fa\u4ef6\u7684 shell \u547d\u4ee4\uff1a  # \u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f  flash :   $( OUTPUT_DIRECTORY ) / nrf 52832 _xxaa . hex \n    @echo Flashing: $ \n    pyocd-flashtool -d debug -t nrf52 -se $  # \u4e0b\u8f7d softdevice  flash_softdevice : \n    @echo Flashing: s132_nrf52_4.0.2_softdevice.hex\n    pyocd-flashtool -d debug -t nrf52 -se  $( SDK_ROOT ) /components/softdevice/s132/hex/s132_nrf52_4.0.2_softdevice.hex # \u64e6\u9664\u6574\u7247 flash  erase : \n    pyocd-flashtool -d debug -t nrf52 -ce  \u56e0\u6b64\uff0c\u53ea\u9700\u8981\u5728\u7ec8\u7aef\u76f4\u63a5\u8fd0\u884c\u76f8\u5173\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u64e6\u9664\u3001\u4e0b\u8f7d\u7b49\u64cd\u4f5c\uff1a  # \u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f \n$ make flash # \u5982\u679c\u8c03\u7528 softdevice \u7684 API\uff0c\u5fc5\u987b\u4e0b\u8f7d\u9884\u7f16\u8bd1\u597d\u7684 softdevice\uff0csoftdevice \u4e3a Nordic \u7684\u4e13\u5229\uff0c\u8fd9\u90e8\u5206\u6ca1\u6709\u5f00\u653e\u6e90\u7801 \n$ make flash_softdevice # \u64e6\u9664\u6574\u7247 flash \n$ make erase  \u597d\u4e86\uff0c\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\u7684\u5b9e\u9645\u8fd0\u884c\u6548\u679c\uff1a", 
            "title": "\u4e0b\u8f7d\u56fa\u4ef6"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#_5", 
            "text": "\u4e00\u4e2a\u4f60\u4f1a\u7231\u4e0a\u7684\u6587\u672c\u7f16\u8f91\u5668\uff1a Sublime Text  \u201c\u8ddf\u6211\u4e00\u8d77\u5199 Makefile\u201d  Nordic \u5b98\u65b9\u6587\u6863", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/nrf5sdk/example-blinky/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/", 
            "text": "\u4e32\u53e3\u8c03\u8bd5\uff1aHello World !\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u7b80\u4ecb\n\n\n\u5728\u8c03\u8bd5\u8f6f\u4ef6\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u9009\u62e9\u4e32\u53e3\u6765\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002nRF5 SDK \u5df2\u7ecf\u5b9e\u73b0\u4e86\u975e\u5e38\u68d2\u7684 Logger \u6a21\u5757\uff0c\u6211\u4eec\u4f7f\u7528\u8be5\u6a21\u5757\u6765\u5feb\u901f\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\n\n\n\u786c\u4ef6\u652f\u6301\n\n\nnRF52832-MDK \u96c6\u6210\u4e86 DAPLink \u8c03\u8bd5\u5668\uff0c\u8be5\u8c03\u8bd5\u4e0a\u62e5\u6709\u4e00\u4e2a CDC \u63a5\u53e3\uff0c\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0 USB-to-UART \u529f\u80fd\uff1a\n\n\n\n\n\u4e0e nRF52832 \u7684\u8fde\u63a5\u5982\u4e0b\uff1a\n\n\n\n\nTX \n P20\n\n\nRX \n P19\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u8be5\u4e32\u53e3\u4e0d\u5177\u5907\u786c\u4ef6\u6d41\u63a7\u5236\u529f\u80fd\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7f6e \nRTS\n \u548c \nCTS\n \u5f15\u811a\n\n\n\n\n\u4e32\u53e3\u5de5\u5177\n\n\n\u53ef\u4ee5\u4f7f\u7528\u7684\u4e32\u53e3\u5de5\u5177\u5f88\u591a\uff0c\u5e38\u7528\u7684\u6709\uff1a\n\n\n\n\nscreen - \u8fd9\u662f\u4e00\u4e2a\u547d\u4ee4\u5de5\u5177\uff0cOSX \u548c Linux \u90fd\u652f\u6301\u5f97\u975e\u5e38\u597d\uff0c\u8fd9\u4e5f\u662f\u6211\u5e38\u7528\u7684\u5de5\u5177\n\n\nPuTTY\n - Windows \u5e73\u53f0\u4e0b\u975e\u5e38\u597d\u7528\u7684 SSH \n telnet \u5de5\u5177\uff0c\u652f\u6301\u4e32\u53e3\n\n\nMinicom - Linux \u5e73\u53f0\u6bd4\u8f83\u5e38\u7528\u4e32\u53e3\u5de5\u5177\n\n\n\n\n\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u4ecb\u7ecd\u8fc7\u7684\uff1a\n\u914d\u7f6e\u4e32\u53e3\n\n\n\u793a\u4f8b\u4ee3\u7801\n\n\n#include\n \nstdbool.h\n\n\n#include\n \nstdint.h\n\n\n#include\n \nnrf_delay.h\n\n\n\n#define NRF_LOG_MODULE_NAME \nAPP\n\n\n#include\n \nnrf_log.h\n\n\n#include\n \nnrf_log_ctrl.h\n\n\n\n/**\n\n\n * @brief Function for application main entry.\n\n\n */\n\n\nint\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \n// Initialize.\n\n    \nret_code_t\n \nerr_code\n;\n\n    \nerr_code\n \n=\n \nNRF_LOG_INIT\n(\nNULL\n);\n\n    \nAPP_ERROR_CHECK\n(\nerr_code\n);\n\n\n    \nNRF_LOG_INFO\n(\nStarting... \n\\r\\n\n);\n\n\n    \n/* Print Logs. */\n\n    \nwhile\n \n(\ntrue\n)\n\n    \n{\n\n        \nNRF_LOG_INFO\n(\nHello World !\n\\r\\n\n);\n\n        \nNRF_LOG_WARNING\n(\nHello World !\n\\r\\n\n);\n\n        \nNRF_LOG_ERROR\n(\nHello World !\n\\r\\n\n);\n\n        \nNRF_LOG_FLUSH\n();\n\n        \nnrf_delay_ms\n(\n1000\n);\n\n    \n}\n\n\n}\n\n\n\n/**\n\n\n *@}\n\n\n **/\n\n\n\n\n\n\n\u4e3a\u4e86\u80fd\u591f\u4f7f\u7528 Logger \u6a21\u5757\uff0c\u9700\u8981\u5728 \nsdk_config.h\n \u6587\u4ef6\u4e2d\u4f7f\u80fd\u76f8\u5173\u529f\u80fd\uff1a\n\n\n// sdk_config.h\n\n\n// \nh\n nRF_Log \n\n\n\n//==========================================================\n\n\n// \ne\n NRF_LOG_ENABLED - nrf_log - Logging\n\n\n//==========================================================\n\n\n#ifndef NRF_LOG_ENABLED\n\n\n#define NRF_LOG_ENABLED 1\n\n\n#endif\n\n\n\n...\n\n\n\n// \u914d\u7f6e\u4e32\u53e3\n\n\n\n#ifndef NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE\n\n\n#define NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE 30801920\n\n\n#endif\n\n\n\n// \no\n NRF_LOG_BACKEND_SERIAL_UART_TX_PIN - UART TX pin \n\n\n#ifndef NRF_LOG_BACKEND_SERIAL_UART_TX_PIN\n\n\n#define NRF_LOG_BACKEND_SERIAL_UART_TX_PIN 20\n\n\n#endif\n\n\n\n// \no\n NRF_LOG_BACKEND_SERIAL_UART_RX_PIN - UART RX pin \n\n\n#ifndef NRF_LOG_BACKEND_SERIAL_UART_RX_PIN\n\n\n#define NRF_LOG_BACKEND_SERIAL_UART_RX_PIN 19\n\n\n#endif\n\n\n\n// \no\n NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN - UART RTS pin \n\n\n#ifndef NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN\n\n\n#define NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN 0xFFFFFFFF\n\n\n#endif\n\n\n\n// \no\n NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN - UART CTS pin \n\n\n#ifndef NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN\n\n\n#define NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN 0xFFFFFFFF\n\n\n#endif\n\n\n\n// \no\n NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL  - Hardware Flow Control\n\n\n\n// \n0=\n Disabled \n\n\n// \n1=\n Enabled \n\n\n\n#ifndef NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL\n\n\n#define NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL 0\n\n\n#endif\n\n\n\n\n\n\n\u7f16\u8bd1\u8fd0\u884c\n\n\n$ make flash\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5b66\u4f1a\u4e86\u4e32\u53e3\u8c03\u8bd5\u7684\u6280\u80fd\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u4f8b\u5b50\u4f5c\u4e3a\u6a21\u677f\uff0c\u5d4c\u5165\u5230\u81ea\u5df1\u7684\u5e94\u7528\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u4e32\u53e3\u8c03\u8bd5"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#hello-world", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4e32\u53e3\u8c03\u8bd5\uff1aHello World !"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#_1", 
            "text": "\u5728\u8c03\u8bd5\u8f6f\u4ef6\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u9009\u62e9\u4e32\u53e3\u6765\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002nRF5 SDK \u5df2\u7ecf\u5b9e\u73b0\u4e86\u975e\u5e38\u68d2\u7684 Logger \u6a21\u5757\uff0c\u6211\u4eec\u4f7f\u7528\u8be5\u6a21\u5757\u6765\u5feb\u901f\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#_2", 
            "text": "nRF52832-MDK \u96c6\u6210\u4e86 DAPLink \u8c03\u8bd5\u5668\uff0c\u8be5\u8c03\u8bd5\u4e0a\u62e5\u6709\u4e00\u4e2a CDC \u63a5\u53e3\uff0c\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0 USB-to-UART \u529f\u80fd\uff1a   \u4e0e nRF52832 \u7684\u8fde\u63a5\u5982\u4e0b\uff1a   TX   P20  RX   P19    \u6ce8\u610f  \u8be5\u4e32\u53e3\u4e0d\u5177\u5907\u786c\u4ef6\u6d41\u63a7\u5236\u529f\u80fd\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8bbe\u7f6e  RTS  \u548c  CTS  \u5f15\u811a", 
            "title": "\u786c\u4ef6\u652f\u6301"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#_3", 
            "text": "\u53ef\u4ee5\u4f7f\u7528\u7684\u4e32\u53e3\u5de5\u5177\u5f88\u591a\uff0c\u5e38\u7528\u7684\u6709\uff1a   screen - \u8fd9\u662f\u4e00\u4e2a\u547d\u4ee4\u5de5\u5177\uff0cOSX \u548c Linux \u90fd\u652f\u6301\u5f97\u975e\u5e38\u597d\uff0c\u8fd9\u4e5f\u662f\u6211\u5e38\u7528\u7684\u5de5\u5177  PuTTY  - Windows \u5e73\u53f0\u4e0b\u975e\u5e38\u597d\u7528\u7684 SSH   telnet \u5de5\u5177\uff0c\u652f\u6301\u4e32\u53e3  Minicom - Linux \u5e73\u53f0\u6bd4\u8f83\u5e38\u7528\u4e32\u53e3\u5de5\u5177   \u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u4ecb\u7ecd\u8fc7\u7684\uff1a \u914d\u7f6e\u4e32\u53e3", 
            "title": "\u4e32\u53e3\u5de5\u5177"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#_4", 
            "text": "#include   stdbool.h  #include   stdint.h  #include   nrf_delay.h  #define NRF_LOG_MODULE_NAME  APP  #include   nrf_log.h  #include   nrf_log_ctrl.h  /**   * @brief Function for application main entry.   */  int   main ( void )  { \n     // Initialize. \n     ret_code_t   err_code ; \n     err_code   =   NRF_LOG_INIT ( NULL ); \n     APP_ERROR_CHECK ( err_code ); \n\n     NRF_LOG_INFO ( Starting...  \\r\\n ); \n\n     /* Print Logs. */ \n     while   ( true ) \n     { \n         NRF_LOG_INFO ( Hello World ! \\r\\n ); \n         NRF_LOG_WARNING ( Hello World ! \\r\\n ); \n         NRF_LOG_ERROR ( Hello World ! \\r\\n ); \n         NRF_LOG_FLUSH (); \n         nrf_delay_ms ( 1000 ); \n     }  }  /**   *@}   **/   \u4e3a\u4e86\u80fd\u591f\u4f7f\u7528 Logger \u6a21\u5757\uff0c\u9700\u8981\u5728  sdk_config.h  \u6587\u4ef6\u4e2d\u4f7f\u80fd\u76f8\u5173\u529f\u80fd\uff1a  // sdk_config.h  //  h  nRF_Log   //==========================================================  //  e  NRF_LOG_ENABLED - nrf_log - Logging  //==========================================================  #ifndef NRF_LOG_ENABLED  #define NRF_LOG_ENABLED 1  #endif  ...  // \u914d\u7f6e\u4e32\u53e3  #ifndef NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE  #define NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE 30801920  #endif  //  o  NRF_LOG_BACKEND_SERIAL_UART_TX_PIN - UART TX pin   #ifndef NRF_LOG_BACKEND_SERIAL_UART_TX_PIN  #define NRF_LOG_BACKEND_SERIAL_UART_TX_PIN 20  #endif  //  o  NRF_LOG_BACKEND_SERIAL_UART_RX_PIN - UART RX pin   #ifndef NRF_LOG_BACKEND_SERIAL_UART_RX_PIN  #define NRF_LOG_BACKEND_SERIAL_UART_RX_PIN 19  #endif  //  o  NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN - UART RTS pin   #ifndef NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN  #define NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN 0xFFFFFFFF  #endif  //  o  NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN - UART CTS pin   #ifndef NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN  #define NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN 0xFFFFFFFF  #endif  //  o  NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL  - Hardware Flow Control  //  0=  Disabled   //  1=  Enabled   #ifndef NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL  #define NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL 0  #endif", 
            "title": "\u793a\u4f8b\u4ee3\u7801"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#_5", 
            "text": "$ make flash   \u81f3\u6b64\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5b66\u4f1a\u4e86\u4e32\u53e3\u8c03\u8bd5\u7684\u6280\u80fd\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u4f8b\u5b50\u4f5c\u4e3a\u6a21\u677f\uff0c\u5d4c\u5165\u5230\u81ea\u5df1\u7684\u5e94\u7528\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002", 
            "title": "\u7f16\u8bd1\u8fd0\u884c"
        }, 
        {
            "location": "/nrf5sdk/example-uart-logger/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/", 
            "text": "\u5fae\u4fe1\u6447\u4e00\u6447\u5468\u8fb9\u793a\u4f8b\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u7b80\u4ecb\n\n\n\u6447\u4e00\u6447\u5468\u8fb9\u662f\u5fae\u4fe1\u5728\u7ebf\u4e0b\u7684\u5168\u65b0\u529f\u80fd, \u4e3a\u7ebf\u4e0b\u5546\u6237\u63d0\u4f9b\u8fd1\u8ddd\u79bb\u8fde\u63a5\u7528\u6237\u7684\u80fd\u529b, \u5e76\u652f\u6301\u7ebf\u4e0b\u5546\u6237\u5411\u5468\u8fb9\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u8425\u9500\u3001\u4e92\u52a8\u53ca\u4fe1\u606f\u63a8\u8350\u7b49\u670d\u52a1\u3002\u8be5\u670d\u52a1\u4e3b\u8981\u57fa\u4e8e Apple \u7684 iBeacon \u6280\u672f\uff0c\u800c iBeacon \u5219\u662f\u5229\u7528\u4f4e\u529f\u8017\u84dd\u7259\u7684\u5e7f\u64ad\u5305\u6765\u53d1\u9001\u4fe1\u606f\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 nRF52832-MDK \u6765\u6f14\u793a\u4e00\u4e0b\u8fd9\u79cd\u5e94\u7528\u3002\n\n\n\u66f4\u591a\u5173\u4e8e\u6447\u4e00\u6447\u5468\u8fb9\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\n\u6447\u4e00\u6447\u5468\u8fb9\u5b98\u7f51\n\u3002\n\n\niBeacon\n\n\niBeacon \u662f Apple \u5728\u4f4e\u529f\u8017\u84dd\u7259\u6280\u672f\u57fa\u7840\u4e0a\u5f00\u53d1\u7684\u901a\u4fe1\u534f\u8bae\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u8be5\u6280\u672f\u521b\u5efa\u5177\u5907\u201c\u4f4d\u7f6e\u4e0a\u4e0b\u6587\u201d\u7684\u5e94\u7528\u3002iBeacon \u6280\u672f\u81ea 2013 \u5e74\u63a8\u51fa\u81f3\u4eca\uff0c\u5df2\u7ecf\u5728\u5f88\u591a\u5546\u8d85\u96f6\u552e\u3001\u9910\u996e\u3001\u516c\u5171\u573a\u6240\u7b49\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\n\n\n\u8fd9\u91cc\u53ea\u505a\u7b80\u5355\u5e94\u7528\u4ecb\u7ecd\uff0c\u524d\u5f80\u82f9\u679c\u5f00\u53d1\u8005\u7f51\u7ad9\u4e86\u89e3\u66f4\u591a\u5173\u4e8e iBeacon \u7684\u5185\u5bb9\uff1a\niBeacon for Developers\n.\n\n\niBeacon \u8bbe\u5907\u7684\u5e7f\u64ad\u5305\u4e3b\u8981\u5305\u542b\uff1aiBeacon ID \u4ee5\u53ca\u8868\u793a\u4fe1\u53f7\u5f3a\u5ea6\u7684\u4fe1\u606f\uff0c\u79fb\u52a8\u8bbe\u5907\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u5c31\u77e5\u9053\u81ea\u5df1\u6b63\u5728\u63a5\u6536\u54ea\u4e2a\u8bbe\u5907\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5224\u65ad\u8ddd\u79bb\u8be5\u8bbe\u5907\u6709\u591a\u8fd1\u3002\n\n\niBeacon ID \u957f\u5ea6 20 \u4e2a\u5b57\u8282\uff0c\u88ab\u5206\u6210\uff1aUUID(16 \u5b57\u8282), Major(2 \u5b57\u8282), Minor(2 \u5b57\u8282)\uff0c\u8fd920\u4e2a\u5b57\u8282\u4fbf\u53ef\u786e\u4fdd\u8bbe\u5907\u7684\u552f\u4e00\u6027\u3002\u4e0b\u9762\u7684\u8868\u683c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n\n\n\n\u6447\u4e00\u6447\u5468\u8fb9\u914d\u7f6e\n\n\n\u8981\u4f7f\u7528\u5fae\u4fe1\u6447\u4e00\u6447\u5468\u8fb9\uff0c\u9700\u8981\u4e00\u4e2a\u901a\u8fc7\u5fae\u4fe1\u8ba4\u8bc1\u7684\u516c\u4f17\u53f7\uff0c\u901a\u8fc7\u6dfb\u52a0 \n\u6447\u4e00\u6447\u5468\u8fb9\n \u529f\u80fd\u63d2\u4ef6\u5373\u53ef\u5b9e\u73b0\uff1a\n\n\n\n\n\u6dfb\u52a0\u8bbe\u5907\u7533\u8bf7\u540e\uff0c\u5fae\u4fe1\u4f1a\u63d0\u4f9b \nUUID\n, \nMajor\n, \nMinor\n \u7b49\u4fe1\u606f\uff0c\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u8be5\u8bbe\u5907\u7ed1\u5b9a\u4e00\u4e2a\u9875\u9762\u3002\u6211\u5728\u516c\u4f17\u53f7\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u8bbe\u5907\uff0c\u4ee5\u6b64\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\uff1a\n\n\n\n\n\n\n\n\niBeacon ID\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nUUID\n\n\nFDA50693-A4E2-4FB1-AFCF-C6EB07647825\n\n\n\n\n\n\nMajor\n\n\n10100\n\n\n\n\n\n\nMinor\n\n\n25137\n\n\n\n\n\n\n\n\n\u793a\u4f8b\u4ee3\u7801\n\n\n\u672c\u4f8b\u4ee3\u7801\u5728 nRF5 SDK \u7684\u793a\u4f8b \nble_app_beacon\n \u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u4e3b\u8981\u914d\u7f6e\u4e00\u4e0b iBeacon \u7684\u4fe1\u606f\u5373\u53ef\uff1a\n\n\n//./nrf52832-mdk/examples/nrf5-sdk/ble_app_beacon/src/main.c\n\n\n...\n\n\n\n#define APP_MEASURED_RSSI       0xC3 \n\n\n#define APP_COMPANY_IDENTIFIER  0x004C      \n// 0x004C \u4e3a Apple \u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u91cc\u53ea\u505a\u6d4b\u8bd5\uff0c\u5546\u7528\u9700\u8981\u53bb\u7533\u8bf7                             \n\n\n#define APP_MAJOR_VALUE         0x27, 0x74  \n// \u5373 10100\n\n\n#define APP_MINOR_VALUE         0x62, 0x31  \n// \u5373 25137\n\n\n#define APP_BEACON_UUID         0xFD, 0xA5, 0x06, 0x93, \\\n\n\n                                0xA4, 0xE2, 0x4F, 0xB1, \\\n\n\n                                0xAF, 0xCF, 0xC6, 0xEB, \\\n\n\n                                0x07, 0x64, 0x78, 0x25            \n\n\n...\n\n\n\n\n\n\n\u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e0b\u8f7d\u5230 nRF52832-MDK \u4e0a\uff1a\n\n\n# \u9700\u8981\u5148\u4e0b\u8f7d\u84dd\u7259\u534f\u8bae\u6808 softdevice\n\n$ make flash_softdevice\n\n\n# \u518d\u4e0b\u8f7d ble_app_beacon\n\n$ make flash\n\n\n\n\n\n\u6447\u4e00\u6447\n\n\n\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u540e\u5c31\u4f1a\u4e00\u76f4\u5728\u5e7f\u64ad\u4fe1\u606f\uff0c\u6253\u5f00\u5fae\u4fe1 \n \u53d1\u73b0 \n \u6447\u4e00\u6447\uff0c\u51fa\u73b0 \n\u5468\u8fb9\n \u56fe\u6807\u5c31\u8868\u660e\u5df2\u7ecf\u53d1\u73b0 iBeacon \u8bbe\u5907\u4e86\uff0c\u6447\u4e00\u6447\uff0c\u4f60\u914d\u7f6e\u7684\u9875\u9762\u5c31\u51fa\u6765\u4e86\uff1a\n\n\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\u4e00\u5bb6\u628a Beacon \u6280\u672f\u73a9\u5230\u6781\u81f4\u7684\u516c\u53f8\uff1a\nEstimote\n\n\nApple iBeacon for Developers\n\n\n\u6447\u4e00\u6447\u5468\u8fb9\u5b98\u7f51\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u6447\u4e00\u6447\u5468\u8fb9"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_1", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u5fae\u4fe1\u6447\u4e00\u6447\u5468\u8fb9\u793a\u4f8b"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_2", 
            "text": "\u6447\u4e00\u6447\u5468\u8fb9\u662f\u5fae\u4fe1\u5728\u7ebf\u4e0b\u7684\u5168\u65b0\u529f\u80fd, \u4e3a\u7ebf\u4e0b\u5546\u6237\u63d0\u4f9b\u8fd1\u8ddd\u79bb\u8fde\u63a5\u7528\u6237\u7684\u80fd\u529b, \u5e76\u652f\u6301\u7ebf\u4e0b\u5546\u6237\u5411\u5468\u8fb9\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u8425\u9500\u3001\u4e92\u52a8\u53ca\u4fe1\u606f\u63a8\u8350\u7b49\u670d\u52a1\u3002\u8be5\u670d\u52a1\u4e3b\u8981\u57fa\u4e8e Apple \u7684 iBeacon \u6280\u672f\uff0c\u800c iBeacon \u5219\u662f\u5229\u7528\u4f4e\u529f\u8017\u84dd\u7259\u7684\u5e7f\u64ad\u5305\u6765\u53d1\u9001\u4fe1\u606f\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 nRF52832-MDK \u6765\u6f14\u793a\u4e00\u4e0b\u8fd9\u79cd\u5e94\u7528\u3002  \u66f4\u591a\u5173\u4e8e\u6447\u4e00\u6447\u5468\u8fb9\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u6447\u4e00\u6447\u5468\u8fb9\u5b98\u7f51 \u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#ibeacon", 
            "text": "iBeacon \u662f Apple \u5728\u4f4e\u529f\u8017\u84dd\u7259\u6280\u672f\u57fa\u7840\u4e0a\u5f00\u53d1\u7684\u901a\u4fe1\u534f\u8bae\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u8be5\u6280\u672f\u521b\u5efa\u5177\u5907\u201c\u4f4d\u7f6e\u4e0a\u4e0b\u6587\u201d\u7684\u5e94\u7528\u3002iBeacon \u6280\u672f\u81ea 2013 \u5e74\u63a8\u51fa\u81f3\u4eca\uff0c\u5df2\u7ecf\u5728\u5f88\u591a\u5546\u8d85\u96f6\u552e\u3001\u9910\u996e\u3001\u516c\u5171\u573a\u6240\u7b49\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u5e94\u7528\u3002  \u8fd9\u91cc\u53ea\u505a\u7b80\u5355\u5e94\u7528\u4ecb\u7ecd\uff0c\u524d\u5f80\u82f9\u679c\u5f00\u53d1\u8005\u7f51\u7ad9\u4e86\u89e3\u66f4\u591a\u5173\u4e8e iBeacon \u7684\u5185\u5bb9\uff1a iBeacon for Developers .  iBeacon \u8bbe\u5907\u7684\u5e7f\u64ad\u5305\u4e3b\u8981\u5305\u542b\uff1aiBeacon ID \u4ee5\u53ca\u8868\u793a\u4fe1\u53f7\u5f3a\u5ea6\u7684\u4fe1\u606f\uff0c\u79fb\u52a8\u8bbe\u5907\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u5c31\u77e5\u9053\u81ea\u5df1\u6b63\u5728\u63a5\u6536\u54ea\u4e2a\u8bbe\u5907\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5224\u65ad\u8ddd\u79bb\u8be5\u8bbe\u5907\u6709\u591a\u8fd1\u3002  iBeacon ID \u957f\u5ea6 20 \u4e2a\u5b57\u8282\uff0c\u88ab\u5206\u6210\uff1aUUID(16 \u5b57\u8282), Major(2 \u5b57\u8282), Minor(2 \u5b57\u8282)\uff0c\u8fd920\u4e2a\u5b57\u8282\u4fbf\u53ef\u786e\u4fdd\u8bbe\u5907\u7684\u552f\u4e00\u6027\u3002\u4e0b\u9762\u7684\u8868\u683c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a", 
            "title": "iBeacon"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_3", 
            "text": "\u8981\u4f7f\u7528\u5fae\u4fe1\u6447\u4e00\u6447\u5468\u8fb9\uff0c\u9700\u8981\u4e00\u4e2a\u901a\u8fc7\u5fae\u4fe1\u8ba4\u8bc1\u7684\u516c\u4f17\u53f7\uff0c\u901a\u8fc7\u6dfb\u52a0  \u6447\u4e00\u6447\u5468\u8fb9  \u529f\u80fd\u63d2\u4ef6\u5373\u53ef\u5b9e\u73b0\uff1a   \u6dfb\u52a0\u8bbe\u5907\u7533\u8bf7\u540e\uff0c\u5fae\u4fe1\u4f1a\u63d0\u4f9b  UUID ,  Major ,  Minor  \u7b49\u4fe1\u606f\uff0c\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u8be5\u8bbe\u5907\u7ed1\u5b9a\u4e00\u4e2a\u9875\u9762\u3002\u6211\u5728\u516c\u4f17\u53f7\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u8bbe\u5907\uff0c\u4ee5\u6b64\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\uff1a     iBeacon ID  Value      UUID  FDA50693-A4E2-4FB1-AFCF-C6EB07647825    Major  10100    Minor  25137", 
            "title": "\u6447\u4e00\u6447\u5468\u8fb9\u914d\u7f6e"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_4", 
            "text": "\u672c\u4f8b\u4ee3\u7801\u5728 nRF5 SDK \u7684\u793a\u4f8b  ble_app_beacon  \u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u4e3b\u8981\u914d\u7f6e\u4e00\u4e0b iBeacon \u7684\u4fe1\u606f\u5373\u53ef\uff1a  //./nrf52832-mdk/examples/nrf5-sdk/ble_app_beacon/src/main.c  ...  #define APP_MEASURED_RSSI       0xC3   #define APP_COMPANY_IDENTIFIER  0x004C       // 0x004C \u4e3a Apple \u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u91cc\u53ea\u505a\u6d4b\u8bd5\uff0c\u5546\u7528\u9700\u8981\u53bb\u7533\u8bf7                               #define APP_MAJOR_VALUE         0x27, 0x74   // \u5373 10100  #define APP_MINOR_VALUE         0x62, 0x31   // \u5373 25137  #define APP_BEACON_UUID         0xFD, 0xA5, 0x06, 0x93, \\                                  0xA4, 0xE2, 0x4F, 0xB1, \\                                  0xAF, 0xCF, 0xC6, 0xEB, \\                                  0x07, 0x64, 0x78, 0x25              ...   \u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e0b\u8f7d\u5230 nRF52832-MDK \u4e0a\uff1a  # \u9700\u8981\u5148\u4e0b\u8f7d\u84dd\u7259\u534f\u8bae\u6808 softdevice \n$ make flash_softdevice # \u518d\u4e0b\u8f7d ble_app_beacon \n$ make flash", 
            "title": "\u793a\u4f8b\u4ee3\u7801"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_5", 
            "text": "\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u540e\u5c31\u4f1a\u4e00\u76f4\u5728\u5e7f\u64ad\u4fe1\u606f\uff0c\u6253\u5f00\u5fae\u4fe1   \u53d1\u73b0   \u6447\u4e00\u6447\uff0c\u51fa\u73b0  \u5468\u8fb9  \u56fe\u6807\u5c31\u8868\u660e\u5df2\u7ecf\u53d1\u73b0 iBeacon \u8bbe\u5907\u4e86\uff0c\u6447\u4e00\u6447\uff0c\u4f60\u914d\u7f6e\u7684\u9875\u9762\u5c31\u51fa\u6765\u4e86\uff1a", 
            "title": "\u6447\u4e00\u6447"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_6", 
            "text": "\u4e00\u5bb6\u628a Beacon \u6280\u672f\u73a9\u5230\u6781\u81f4\u7684\u516c\u53f8\uff1a Estimote  Apple iBeacon for Developers  \u6447\u4e00\u6447\u5468\u8fb9\u5b98\u7f51", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/nrf5sdk/example-weixin-shake/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/", 
            "text": "Physical Web \nWalk up and use anything\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\nPhysical Web \u662f\u4ec0\u4e48\uff1f\n\n\nPhysical Web \u4e2d\u6587\u540d\u4e3a \u201c\u5b9e\u7269\u7f51\u201d\uff0c\u662f Google \u5728 2015\u5e74\u63a8\u51fa\u7684\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u65e8\u5728\u4e3a\u7269\u7406\u4e16\u754c\u7684\u6bcf\u4e2a\u7269\u4f53\u8d4b\u4e88 \"URL\", \u8ba9\u4f60\u8f7b\u677e\u83b7\u53d6\u6bcf\u4e2a\u7269\u4f53\u7684\u4fe1\u606f\uff0c\u5e76\u4e0e\u4e4b\u8fdb\u884c\u4ea4\u4e92\uff0c\u6b63\u5982\u5b83\u7684 Slogan \u6240\u8868\u8ff0\u7684\u90a3\u6837\uff1a\n\n\n\n\nWalk up and use anything.\n\n\n\n\n\n\n\u6765\u770b\u770b Scott Jenson \u4ecb\u7ecd Physical Web \u7684\u89c6\u9891\uff1a\n\n\n\n        \u60a8\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301 video \u6807\u7b7e\u3002\n\n\n\n\n\u5de5\u4f5c\u539f\u7406\n\n\nPhysical Web \u4e5f\u662f Beacon \u6280\u672f\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u5b83\u91c7\u7528\u7684\u662f Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae\uff1a\nEddystone\n\uff0c\u66f4\u5177\u4f53\u7684\u8bb2\u5c31\u662f \nEddystone-URL\n \u3002\n\n\n\u4e0e iBeacon \u7c7b\u4f3c\uff0cEddystone-URL \u4e5f\u662f\u57fa\u4e8e\u4f4e\u529f\u8017\u84dd\u7259\u7684\u901a\u4fe1\u534f\u8bae\u3002\u4e0d\u540c\u7684\u662f\uff0ciBeacon \u53d1\u9001\u7684\u662f UUID + Mojor + Minor\uff0cEddystone-URL \u53d1\u9001\u7684\u5219\u662f\u7b80\u5355\u660e\u4e86\u7684 URL \u4fe1\u606f\u3002\u4ee5\u4e0b\u662f Eddystone-URL \u7684\u89c4\u5b9a\uff1a\n\n\n\n\n\n\n\n\nByte offset\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nFrame Type\n\n\nValue = 0x10\n\n\n\n\n\n\n1\n\n\nTX Power\n\n\nCalibrated Tx power at 0 m\n\n\n\n\n\n\n2\n\n\nURL Scheme\n\n\nEncoded Scheme Prefix\n\n\n\n\n\n\n3+\n\n\nEncoded URL\n\n\nLength 1-17\n\n\n\n\n\n\n\n\nURL \u524d\u7f00\u89c4\u5b9a\uff1a\n\n\n\n\n\n\n\n\nDecimal\n\n\nHex\n\n\nExpansion\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0x00\n\n\nhttp://www.\n\n\n\n\n\n\n1\n\n\n0x01\n\n\nhttps://www.\n\n\n\n\n\n\n2\n\n\n0x02\n\n\nhttp://\n\n\n\n\n\n\n3\n\n\n0x03\n\n\nhttps://\n\n\n\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u8981\u8ba9 Chrome \u8bc6\u522b\u8be5 URL\uff0c\u5fc5\u987b\u91c7\u7528 \nhttps://\n \u683c\u5f0f\u3002\n\n\n\n\n\u66f4\u591a\u5173\u4e8e\u534f\u8bae\u7684\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003\uff1a\nhttps://github.com/google/eddystone\n\n\n\u793a\u4f8b\u4ee3\u7801\n\n\n\u8fd9\u91cc\u6211\u4eec\u8ba9 nRF52832-MDK \u4ee5 Eddystone-URL \u89c4\u5b9a\u7684\u65b9\u5f0f\u5e7f\u64ad \nhttps://makerdiary.co\n\uff0c\u76f8\u5173\u7684\u4fee\u6539\u5982\u4e0b\uff1a\n\n\n// ./nrf52832-mdk/examples/ble_app_eddystone/inc/es_app_config.h\n\n\n\n// Eddystone URL data\n\n\n#define APP_ES_URL_FRAME_TYPE    ES_FRAME_TYPE_URL             \n// URL Frame type.\n\n\n#define APP_ES_URL_SCHEME        0x03                          \n// 0x03 = \nhttps://\n\n\n#define APP_ES_URL_URL           \nm\n, \na\n, \nk\n, \ne\n, \nr\n, \\\n\n\n                                 \nd\n, \ni\n, \na\n, \nr\n, \ny\n, \\\n\n\n                                 \n.\n, \nc\n, \no\n                 \n// \nmakerdiary.co\n. \n\n\n\n\n\n\n\u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e0b\u8f7d\u5230 nRF52832-MDK \u4e0a\uff1a\n\n\n# \u9700\u8981\u5148\u4e0b\u8f7d\u84dd\u7259\u534f\u8bae\u6808 softdevice\n\n$ make flash_softdevice\n\n\n# \u518d\u4e0b\u8f7d ble_app_beacon\n\n$ make flash\n\n\n\n\n\n\u6253\u5f00 \nnRF Connect\n App\uff0c\u5c06\u626b\u63cf\u5230\u540d\u79f0\u4e3a \nnRF52832-MDK\n \u7684\u8bbe\u5907\uff0c\u53ef\u67e5\u770b\u8bbe\u5907\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f1a\u53d1\u73b0 URL \nhttps://makerdiary.co\n \u5df2\u7ecf\u5305\u542b\u5728\u5e7f\u64ad\u4fe1\u606f\u4e2d\u4e86\uff1a\n\n\n\n\nChrome \u914d\u7f6e\n\n\nPhysical Web \u53ea\u80fd\u5728 Chrome \u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\uff0c\u9700\u8981\u5728\u4f60\u7684\u8bbe\u5907\u4e0a\u5b89\u88c5 Chrome \u6d4f\u89c8\u5668\u3002\u7136\u540e\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u6587\u6863\u8fdb\u884c\u914d\u7f6e\uff1a\n\n\n\n\nSetting up Physical Web in Chrome\n\n\n\n\n\u4ee5 iOS \u8bbe\u5907\u4e3a\u4f8b\uff0c\u914d\u7f6e\u6210\u529f\u540e\uff0c\u624b\u673a\u5c31\u53ef\u4ee5\u6536\u5230 nRF52832-MDK \u53d1\u51fa\u7684 URL\uff1a\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u4f7f\u7528 Google \u7684\u4e1c\u897f\uff0c\u7ffb\u5899\u662f\u5fc5\u987b\u7684~\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nEddystone \u534f\u8bae\u89c4\u8303\n\n\nPhysical Web \u5b98\u7f51\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Physical Web"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#physical-web-walk-up-and-use-anything", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "Physical Web Walk up and use anything"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#physical-web", 
            "text": "Physical Web \u4e2d\u6587\u540d\u4e3a \u201c\u5b9e\u7269\u7f51\u201d\uff0c\u662f Google \u5728 2015\u5e74\u63a8\u51fa\u7684\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u65e8\u5728\u4e3a\u7269\u7406\u4e16\u754c\u7684\u6bcf\u4e2a\u7269\u4f53\u8d4b\u4e88 \"URL\", \u8ba9\u4f60\u8f7b\u677e\u83b7\u53d6\u6bcf\u4e2a\u7269\u4f53\u7684\u4fe1\u606f\uff0c\u5e76\u4e0e\u4e4b\u8fdb\u884c\u4ea4\u4e92\uff0c\u6b63\u5982\u5b83\u7684 Slogan \u6240\u8868\u8ff0\u7684\u90a3\u6837\uff1a   Walk up and use anything.    \u6765\u770b\u770b Scott Jenson \u4ecb\u7ecd Physical Web \u7684\u89c6\u9891\uff1a  \n        \u60a8\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301 video \u6807\u7b7e\u3002", 
            "title": "Physical Web \u662f\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#_1", 
            "text": "Physical Web \u4e5f\u662f Beacon \u6280\u672f\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u5b83\u91c7\u7528\u7684\u662f Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae\uff1a Eddystone \uff0c\u66f4\u5177\u4f53\u7684\u8bb2\u5c31\u662f  Eddystone-URL  \u3002  \u4e0e iBeacon \u7c7b\u4f3c\uff0cEddystone-URL \u4e5f\u662f\u57fa\u4e8e\u4f4e\u529f\u8017\u84dd\u7259\u7684\u901a\u4fe1\u534f\u8bae\u3002\u4e0d\u540c\u7684\u662f\uff0ciBeacon \u53d1\u9001\u7684\u662f UUID + Mojor + Minor\uff0cEddystone-URL \u53d1\u9001\u7684\u5219\u662f\u7b80\u5355\u660e\u4e86\u7684 URL \u4fe1\u606f\u3002\u4ee5\u4e0b\u662f Eddystone-URL \u7684\u89c4\u5b9a\uff1a     Byte offset  Field  Description      0  Frame Type  Value = 0x10    1  TX Power  Calibrated Tx power at 0 m    2  URL Scheme  Encoded Scheme Prefix    3+  Encoded URL  Length 1-17     URL \u524d\u7f00\u89c4\u5b9a\uff1a     Decimal  Hex  Expansion      0  0x00  http://www.    1  0x01  https://www.    2  0x02  http://    3  0x03  https://      \u6ce8\u610f  \u8981\u8ba9 Chrome \u8bc6\u522b\u8be5 URL\uff0c\u5fc5\u987b\u91c7\u7528  https://  \u683c\u5f0f\u3002   \u66f4\u591a\u5173\u4e8e\u534f\u8bae\u7684\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/google/eddystone", 
            "title": "\u5de5\u4f5c\u539f\u7406"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u8ba9 nRF52832-MDK \u4ee5 Eddystone-URL \u89c4\u5b9a\u7684\u65b9\u5f0f\u5e7f\u64ad  https://makerdiary.co \uff0c\u76f8\u5173\u7684\u4fee\u6539\u5982\u4e0b\uff1a  // ./nrf52832-mdk/examples/ble_app_eddystone/inc/es_app_config.h  // Eddystone URL data  #define APP_ES_URL_FRAME_TYPE    ES_FRAME_TYPE_URL              // URL Frame type.  #define APP_ES_URL_SCHEME        0x03                           // 0x03 =  https://  #define APP_ES_URL_URL            m ,  a ,  k ,  e ,  r , \\                                    d ,  i ,  a ,  r ,  y , \\                                    . ,  c ,  o                   //  makerdiary.co .    \u5c06\u7a0b\u5e8f\u7f16\u8bd1\u4e0b\u8f7d\u5230 nRF52832-MDK \u4e0a\uff1a  # \u9700\u8981\u5148\u4e0b\u8f7d\u84dd\u7259\u534f\u8bae\u6808 softdevice \n$ make flash_softdevice # \u518d\u4e0b\u8f7d ble_app_beacon \n$ make flash  \u6253\u5f00  nRF Connect  App\uff0c\u5c06\u626b\u63cf\u5230\u540d\u79f0\u4e3a  nRF52832-MDK  \u7684\u8bbe\u5907\uff0c\u53ef\u67e5\u770b\u8bbe\u5907\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f1a\u53d1\u73b0 URL  https://makerdiary.co  \u5df2\u7ecf\u5305\u542b\u5728\u5e7f\u64ad\u4fe1\u606f\u4e2d\u4e86\uff1a", 
            "title": "\u793a\u4f8b\u4ee3\u7801"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#chrome", 
            "text": "Physical Web \u53ea\u80fd\u5728 Chrome \u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\uff0c\u9700\u8981\u5728\u4f60\u7684\u8bbe\u5907\u4e0a\u5b89\u88c5 Chrome \u6d4f\u89c8\u5668\u3002\u7136\u540e\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u6587\u6863\u8fdb\u884c\u914d\u7f6e\uff1a   Setting up Physical Web in Chrome   \u4ee5 iOS \u8bbe\u5907\u4e3a\u4f8b\uff0c\u914d\u7f6e\u6210\u529f\u540e\uff0c\u624b\u673a\u5c31\u53ef\u4ee5\u6536\u5230 nRF52832-MDK \u53d1\u51fa\u7684 URL\uff1a    \u63d0\u793a  \u4f7f\u7528 Google \u7684\u4e1c\u897f\uff0c\u7ffb\u5899\u662f\u5fc5\u987b\u7684~", 
            "title": "Chrome \u914d\u7f6e"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#_3", 
            "text": "Eddystone \u534f\u8bae\u89c4\u8303  Physical Web \u5b98\u7f51", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/nrf5sdk/example-physical-web/#_4", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/nrf5sdk/example-more/", 
            "text": "\u66f4\u591a\u6709\u8da3\u7684\u793a\u4f8b\u6b63\u5728\u5f00\u53d1\u4e2d......\n\n\n\u6b22\u8fce\u4f60\u6765\u63d0\u4ea4\u793a\u4f8b\uff0c\u4f60\u5c06\u4f1a\u5e2e\u5230\u66f4\u591a\u7684\u4eba\uff01\n\n\nPull Requests", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/mbedos5/", 
            "text": "ARM mbed OS \nA platform operating system for the internet of things\n\n\n\u524d\u5f80 mbed \u5f00\u53d1\u8005\u7f51\u7ad9\n\n\n\u7b80\u4ecb\n\n\nmbed OS\n \u662f ARM \u4e13\u95e8\u4e3a\u7269\u8054\u7f51\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\u5f00\u6e90\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411 ARM Cortex-M \u7cfb\u5217\u5fae\u63a7\u5236\u5668\uff0c\u975e\u5e38\u9002\u5408\u6d89\u53ca\u667a\u80fd\u57ce\u5e02\u3001\u667a\u80fd\u5bb6\u5ead\u548c\u7a7f\u6234\u5f0f\u8bbe\u5907\u7b49\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\u76f8\u6bd4\u4e8e\u5176\u4ed6\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0cmbed OS \u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a\n\n\n\n\n\u5b89\u5168\u6027\uff1a\u63d0\u4f9b mbed TLS \u548c mbed uVisor \u5b89\u5168\u673a\u5236\n\n\n\u8fde\u63a5\u6027\uff1a\u652f\u6301\u591a\u79cd\u534f\u8bae\u6808\uff0c\u5305\u62ec Bluetooth LE, Wi-Fi, 6LoWPAN, Thread, Lora\u7b49\u7b49\n\n\n\u5b8c\u6574\u7684\u5de5\u5177\u94fe\u652f\u6301\uff1a\u63d0\u4f9b\u5728\u7ebf IDE, mbed CLI \u4ee5\u53ca \u7b2c\u4e09\u65b9 IDE\n\n\n\u826f\u597d\u7684\u793e\u533a\u751f\u6001\uff1a\u73b0\u5df2\u8d85\u8fc7 50 partners\uff0c\u4e5f\u6709\u4e3a\u6570\u4e0d\u5c11\u7684\u4e2a\u4eba\u5f00\u53d1\u8005\n\n\n\n\n\n\nmbed OS 5 \u73b0\u5df2\u7ecf\u80fd\u591f\u5f88\u597d\u5730\u652f\u6301 nRF52832 SoC\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528 nRF52832-MDK \u6765\u5b66\u4e60\u5f00\u53d1 mbed OS 5 \u5e94\u7528\u3002\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nmbed \u5f00\u53d1\u8005\u7f51\u7ad9\n\n\nmbed OS \u5b98\u65b9\u6587\u6863\n\n\nmbed OS \u5b98\u65b9\u4ed3\u5e93\n\n\nmakerdiary/mbed-os\n (\u589e\u52a0 \nnrf52832-mdk\n \u5206\u652f)\n\n\n\u76f8\u5173\u6587\u7ae0\uff1a\n\u662f\u7684\uff0cmbed OS 5 \u53ef\u4ee5\u7528\u4e86\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/mbedos5/#arm-mbed-os-a-platform-operating-system-for-the-internet-of-things", 
            "text": "\u524d\u5f80 mbed \u5f00\u53d1\u8005\u7f51\u7ad9", 
            "title": "ARM mbed OS A platform operating system for the internet of things"
        }, 
        {
            "location": "/mbedos5/#_1", 
            "text": "mbed OS  \u662f ARM \u4e13\u95e8\u4e3a\u7269\u8054\u7f51\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\u5f00\u6e90\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411 ARM Cortex-M \u7cfb\u5217\u5fae\u63a7\u5236\u5668\uff0c\u975e\u5e38\u9002\u5408\u6d89\u53ca\u667a\u80fd\u57ce\u5e02\u3001\u667a\u80fd\u5bb6\u5ead\u548c\u7a7f\u6234\u5f0f\u8bbe\u5907\u7b49\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  \u76f8\u6bd4\u4e8e\u5176\u4ed6\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0cmbed OS \u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a   \u5b89\u5168\u6027\uff1a\u63d0\u4f9b mbed TLS \u548c mbed uVisor \u5b89\u5168\u673a\u5236  \u8fde\u63a5\u6027\uff1a\u652f\u6301\u591a\u79cd\u534f\u8bae\u6808\uff0c\u5305\u62ec Bluetooth LE, Wi-Fi, 6LoWPAN, Thread, Lora\u7b49\u7b49  \u5b8c\u6574\u7684\u5de5\u5177\u94fe\u652f\u6301\uff1a\u63d0\u4f9b\u5728\u7ebf IDE, mbed CLI \u4ee5\u53ca \u7b2c\u4e09\u65b9 IDE  \u826f\u597d\u7684\u793e\u533a\u751f\u6001\uff1a\u73b0\u5df2\u8d85\u8fc7 50 partners\uff0c\u4e5f\u6709\u4e3a\u6570\u4e0d\u5c11\u7684\u4e2a\u4eba\u5f00\u53d1\u8005    mbed OS 5 \u73b0\u5df2\u7ecf\u80fd\u591f\u5f88\u597d\u5730\u652f\u6301 nRF52832 SoC\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528 nRF52832-MDK \u6765\u5b66\u4e60\u5f00\u53d1 mbed OS 5 \u5e94\u7528\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/mbedos5/#_2", 
            "text": "mbed \u5f00\u53d1\u8005\u7f51\u7ad9  mbed OS \u5b98\u65b9\u6587\u6863  mbed OS \u5b98\u65b9\u4ed3\u5e93  makerdiary/mbed-os  (\u589e\u52a0  nrf52832-mdk  \u5206\u652f)  \u76f8\u5173\u6587\u7ae0\uff1a \u662f\u7684\uff0cmbed OS 5 \u53ef\u4ee5\u7528\u4e86", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/#_3", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/getting-started/", 
            "text": "\u5feb\u901f\u5165\u95e8\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u642d\u5efa mbed OS 5 \u7684\u5f00\u53d1\u73af\u5883\uff0c\u5e76\u6210\u529f\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002\n\n\n\n\nmbed OS 5 \u652f\u6301\u5728\u7ebf IDE\uff0cmbed CLI \u4ee5\u53ca\u7b2c\u4e09\u65b9 IDE \u8fdb\u884c\u5f00\u53d1\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 mbed CLI\uff0c\u8fd9\u4e5f\u662f mbed \u4e3b\u63a8\u7684\u4e00\u79cd\u5f00\u53d1\u65b9\u5f0f\u3002\n\n\n\n\n\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n\nPython\n\n\nmbed CLI \u662f\u7528 Python \u5f00\u53d1\u7684\u5de5\u5177\uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u4f60\u7684\u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u4e86 \nPython\n\uff0c\u7248\u672c\u5efa\u8bae\u5728 2.7.11\u6216\u4ee5\u4e0a\uff0c\u4e0d\u652f\u6301 Python 3\u3002\n\n\n$ python --version\nPython \n2\n.7.13\n\n\n\n\n\nGit \n Mercurial\n\n\nmbed CLI \u4f7f\u7528 Git \u548c Mercurial \u4f5c\u4e3a\u7248\u672c\u63a7\u5236\u5de5\u5177\uff0c\u56e0\u6b64\u786e\u4fdd\u5df2\u7ecf\u5b89\u88c5\u4e86\u8fd9\u4e24\u4e2a\u5de5\u5177\uff1a\n\n\n\n\nGit\n - 1.9.5 \u6216\u4ee5\u4e0a\u7248\u672c\n\n\nMercurial\n - 2.2.2 \u6216\u4ee5\u4e0a\u7248\u672c\n\n\n\n\n$ git --version\ngit version \n2\n.10.1\n\n\n# Mercurial \u4f7f\u7528\u7684\u547d\u4ee4\n\n$ hg --version\n\u5206\u5e03\u5f0f\u8f6f\u4ef6\u914d\u7f6e\u7ba1\u7406\u5de5\u5177 - \u6c34\u94f6 \n(\n\u7248\u672c \n3\n.9\n)\n\n\n(\nsee https://mercurial-scm.org \nfor\n more information\n)\n\n\nCopyright \n(\nC\n)\n \n2005\n-2016 Matt Mackall and others\nThis is free software\n;\n see the \nsource\n \nfor\n copying conditions. There is NO\nwarranty\n;\n not even \nfor\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\n\n\n\n\u5b89\u88c5 mbed CLI\n\n\n\u5b8c\u6210\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u4fbf\u53ef\u4ee5\u5b89\u88c5 mbed CLI\uff0c\u53ef\u4ee5\u4f7f\u7528 \npip\n \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\u672c\uff1a\n\n\n$ pip install mbed-cli\n\n\n\n\n\n\u6216\u8005\uff0c\u514b\u9686\u6e90\u7801\u5b89\u88c5\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u7248\u672c\uff1a\n\n\n$ git clone https://github.com/ARMmbed/mbed-cli\n$ \ncd\n mbed-cli\n$ python setup.py install\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u5728 Linux \u548c Mac OSX \u7cfb\u7edf\uff0c\u53ef\u80fd\u9700\u8981\u4f7f\u7528 \nsudo\n \u6765\u5b89\u88c5\u3002\n\n\n\n\n$ mbed --version\n\n1\n.0.0\n\n\n\n\n\n\u914d\u7f6e\u7f16\u8bd1\u5668\n\n\nmbed OS \u53ef\u4ee5\u4f7f\u7528 GCC ARM, ARM Compiler 5, IAR \u7f16\u8bd1\u5de5\u5177\u3002\u8fd9\u91cc\u4f7f\u7528 \nGNU ARM Embedded Toolchain\n\uff0c\u8be5\u5de5\u5177\u94fe\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\n\u4e0b\u8f7d\n\u8be5\u5de5\u5177\u94fe\u5e76\u914d\u7f6e \nGCC_ARM_PATH\n \u53d8\u91cf\uff1a\n\n\n$ mbed config --global GCC_ARM_PATH \nyour_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin\n\n\n\n# \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b mbed CLI \u914d\u7f6e\uff1a\n\n$ mbed config --list\n\n\n\n\n\n\n\n\u5bfc\u5165\u793a\u4f8b\n\n\n\u8fd9\u91cc\u5bfc\u5165\u4e00\u4e2a\u7b80\u5355\u7684 \nblinky\n \u793a\u4f8b\n\n\n$ mbed import https://github.com/makerdiary/mbed-os-example-blinky\n\n\n# \u56fd\u5185\u8bbf\u95ee GitHub \u6709\u70b9\u6162\uff0c\u9700\u8981\u7b49\u5f85...\n\n\n$ \ncd\n ./mbed-os-example-blinky/mbed-os\n\n\n# \u6dfb\u52a0 makerdiary/mbed-os \u8fdc\u7a0b\u4ed3\u5e93\n\n$ git remote add md git@github.com:makerdiary/mbed-os.git\n\n\n# \u65b0\u5efa nrf52832-mdk \u5206\u652f\n\n$ git checkout -b nrf52832-mdk\n\n\n# \u83b7\u53d6 md \u8fdc\u7a0b\u4ed3\u5e93 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\n\n$ git pull md nrf52832-mdk\n\n\n\n\n\n\u793a\u4f8b\u4ee3\u7801\n\n\n\u8fd9\u91cc\u6211\u4eec\u8ba9 LED1(\u5373\u677f\u4e0a\u7eff\u8272 LED) \u95ea\u70c1\uff0c\u95f4\u9694 500ms\uff1a\n\n\n#include\n \nmbed.h\n\n\n\nDigitalOut\n \nled1\n(\nLED1\n);\n\n\n\n// main() runs in its own thread in the OS\n\n\nint\n \nmain\n()\n \n{\n\n    \nwhile\n \n(\ntrue\n)\n \n{\n\n        \nled1\n \n=\n \n!\nled1\n;\n\n        \nwait\n(\n0.5\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n\u4f7f\u7528 \nmbed compile\n \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff1a\n\n\n\n\n\u6307\u5b9a\u5f00\u53d1\u677f\uff1a-m \nboard_name\n\n\n\u6307\u5b9a\u7f16\u8bd1\u5668\uff1a-t \nGCC_ARM\n, \nARM\n or \nIAR\n\n\n\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u6210\u529f\u7f16\u8bd1\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n...\nCompile \n[\n100\n.0%\n]\n: test_env.cpp\nLink: mbed-os-example-blinky\nElf2Bin: mbed-os-example-blinky\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n119\n \n|\n     \n4\n \n|\n   \n24\n \n|\n\n\n|\n Misc                  \n|\n \n26387\n \n|\n  \n2484\n \n|\n  \n118\n \n|\n\n\n|\n hal                   \n|\n   \n344\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1187\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n    \n38\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n5841\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n  \n7751\n \n|\n    \n20\n \n|\n  \n804\n \n|\n\n\n|\n Subtotals             \n|\n \n41667\n \n|\n  \n2536\n \n|\n \n5508\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n43204\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n8044\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n44203\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-example-blinky.hex\n\n\n\n\n\n\u4e0b\u8f7d\u56fa\u4ef6\n\n\nnRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u76f4\u63a5\u5c06\u7f16\u8bd1\u751f\u6210\u7684\u56fa\u4ef6 \n./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-example-blinky.hex\n \u62f7\u8d1d\u5230 \nDAPLINK\n \u7684\u79fb\u52a8\u76d8\uff0c\u5b8c\u6210\u62f7\u8d1d\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u5373\u53ef\u8fd0\u884c\uff1a\n\n\n\n\n\u6216\u8005\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u81ea\u52a8\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-example-blinky.hex\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 nRF52832-MDK \u4e0a\u8dd1 mbed OS 5\u3002Enjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\n\n\u5982\u679c\u4f60\u4e0d\u719f\u6089 Git\uff0c\u8fd9\u91cc\u6709\u5f88\u597d\u7684\u5b66\u4e60\u8d44\u6599\uff1a\n\n\n\n\nPro Git \u4e2d\u6587\u7248\n\n\nLearn Git Branching\n\n\ntryGit\n\n\n\n\n\n\n\n\n\u66f4\u591a\u5173\u4e8e mbed CLI \u7684\u8d44\u6e90\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/mbedos5/getting-started/#_1", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u642d\u5efa mbed OS 5 \u7684\u5f00\u53d1\u73af\u5883\uff0c\u5e76\u6210\u529f\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002   mbed OS 5 \u652f\u6301\u5728\u7ebf IDE\uff0cmbed CLI \u4ee5\u53ca\u7b2c\u4e09\u65b9 IDE \u8fdb\u884c\u5f00\u53d1\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 mbed CLI\uff0c\u8fd9\u4e5f\u662f mbed \u4e3b\u63a8\u7684\u4e00\u79cd\u5f00\u53d1\u65b9\u5f0f\u3002", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/mbedos5/getting-started/#_2", 
            "text": "", 
            "title": "\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"
        }, 
        {
            "location": "/mbedos5/getting-started/#python", 
            "text": "mbed CLI \u662f\u7528 Python \u5f00\u53d1\u7684\u5de5\u5177\uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u4f60\u7684\u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u4e86  Python \uff0c\u7248\u672c\u5efa\u8bae\u5728 2.7.11\u6216\u4ee5\u4e0a\uff0c\u4e0d\u652f\u6301 Python 3\u3002  $ python --version\nPython  2 .7.13", 
            "title": "Python"
        }, 
        {
            "location": "/mbedos5/getting-started/#git-mercurial", 
            "text": "mbed CLI \u4f7f\u7528 Git \u548c Mercurial \u4f5c\u4e3a\u7248\u672c\u63a7\u5236\u5de5\u5177\uff0c\u56e0\u6b64\u786e\u4fdd\u5df2\u7ecf\u5b89\u88c5\u4e86\u8fd9\u4e24\u4e2a\u5de5\u5177\uff1a   Git  - 1.9.5 \u6216\u4ee5\u4e0a\u7248\u672c  Mercurial  - 2.2.2 \u6216\u4ee5\u4e0a\u7248\u672c   $ git --version\ngit version  2 .10.1 # Mercurial \u4f7f\u7528\u7684\u547d\u4ee4 \n$ hg --version\n\u5206\u5e03\u5f0f\u8f6f\u4ef6\u914d\u7f6e\u7ba1\u7406\u5de5\u5177 - \u6c34\u94f6  ( \u7248\u672c  3 .9 )  ( see https://mercurial-scm.org  for  more information ) \n\nCopyright  ( C )   2005 -2016 Matt Mackall and others\nThis is free software ;  see the  source   for  copying conditions. There is NO\nwarranty ;  not even  for  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.", 
            "title": "Git &amp; Mercurial"
        }, 
        {
            "location": "/mbedos5/getting-started/#mbed-cli", 
            "text": "\u5b8c\u6210\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u4fbf\u53ef\u4ee5\u5b89\u88c5 mbed CLI\uff0c\u53ef\u4ee5\u4f7f\u7528  pip  \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\u672c\uff1a  $ pip install mbed-cli  \u6216\u8005\uff0c\u514b\u9686\u6e90\u7801\u5b89\u88c5\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u7248\u672c\uff1a  $ git clone https://github.com/ARMmbed/mbed-cli\n$  cd  mbed-cli\n$ python setup.py install   \u6ce8\u610f  \u5728 Linux \u548c Mac OSX \u7cfb\u7edf\uff0c\u53ef\u80fd\u9700\u8981\u4f7f\u7528  sudo  \u6765\u5b89\u88c5\u3002   $ mbed --version 1 .0.0", 
            "title": "\u5b89\u88c5 mbed CLI"
        }, 
        {
            "location": "/mbedos5/getting-started/#_3", 
            "text": "mbed OS \u53ef\u4ee5\u4f7f\u7528 GCC ARM, ARM Compiler 5, IAR \u7f16\u8bd1\u5de5\u5177\u3002\u8fd9\u91cc\u4f7f\u7528  GNU ARM Embedded Toolchain \uff0c\u8be5\u5de5\u5177\u94fe\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c \u4e0b\u8f7d \u8be5\u5de5\u5177\u94fe\u5e76\u914d\u7f6e  GCC_ARM_PATH  \u53d8\u91cf\uff1a  $ mbed config --global GCC_ARM_PATH  your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin  # \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b mbed CLI \u914d\u7f6e\uff1a \n$ mbed config --list", 
            "title": "\u914d\u7f6e\u7f16\u8bd1\u5668"
        }, 
        {
            "location": "/mbedos5/getting-started/#_4", 
            "text": "\u8fd9\u91cc\u5bfc\u5165\u4e00\u4e2a\u7b80\u5355\u7684  blinky  \u793a\u4f8b  $ mbed import https://github.com/makerdiary/mbed-os-example-blinky # \u56fd\u5185\u8bbf\u95ee GitHub \u6709\u70b9\u6162\uff0c\u9700\u8981\u7b49\u5f85... \n\n$  cd  ./mbed-os-example-blinky/mbed-os # \u6dfb\u52a0 makerdiary/mbed-os \u8fdc\u7a0b\u4ed3\u5e93 \n$ git remote add md git@github.com:makerdiary/mbed-os.git # \u65b0\u5efa nrf52832-mdk \u5206\u652f \n$ git checkout -b nrf52832-mdk # \u83b7\u53d6 md \u8fdc\u7a0b\u4ed3\u5e93 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801 \n$ git pull md nrf52832-mdk", 
            "title": "\u5bfc\u5165\u793a\u4f8b"
        }, 
        {
            "location": "/mbedos5/getting-started/#_5", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u8ba9 LED1(\u5373\u677f\u4e0a\u7eff\u8272 LED) \u95ea\u70c1\uff0c\u95f4\u9694 500ms\uff1a  #include   mbed.h  DigitalOut   led1 ( LED1 );  // main() runs in its own thread in the OS  int   main ()   { \n     while   ( true )   { \n         led1   =   ! led1 ; \n         wait ( 0.5 ); \n     }  }", 
            "title": "\u793a\u4f8b\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/getting-started/#_6", 
            "text": "\u4f7f\u7528  mbed compile  \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff1a   \u6307\u5b9a\u5f00\u53d1\u677f\uff1a-m  board_name  \u6307\u5b9a\u7f16\u8bd1\u5668\uff1a-t  GCC_ARM ,  ARM  or  IAR   $ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u6210\u529f\u7f16\u8bd1\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n...\nCompile  [ 100 .0% ] : test_env.cpp\nLink: mbed-os-example-blinky\nElf2Bin: mbed-os-example-blinky\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     119   |       4   |     24   |  |  Misc                   |   26387   |    2484   |    118   |  |  hal                    |     344   |       0   |     16   |  |  platform               |    1187   |       4   |    264   |  |  rtos                   |      38   |       4   |      4   |  |  rtos/rtx               |    5841   |      20   |   4278   |  |  targets/TARGET_NORDIC  |    7751   |      20   |    804   |  |  Subtotals              |   41667   |    2536   |   5508   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  43204  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  8044  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  44203  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-example-blinky.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/getting-started/#_7", 
            "text": "nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u76f4\u63a5\u5c06\u7f16\u8bd1\u751f\u6210\u7684\u56fa\u4ef6  ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-example-blinky.hex  \u62f7\u8d1d\u5230  DAPLINK  \u7684\u79fb\u52a8\u76d8\uff0c\u5b8c\u6210\u62f7\u8d1d\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u5373\u53ef\u8fd0\u884c\uff1a   \u6216\u8005\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u81ea\u52a8\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-example-blinky.hex   \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 nRF52832-MDK \u4e0a\u8dd1 mbed OS 5\u3002Enjoy !", 
            "title": "\u4e0b\u8f7d\u56fa\u4ef6"
        }, 
        {
            "location": "/mbedos5/getting-started/#_8", 
            "text": "\u5982\u679c\u4f60\u4e0d\u719f\u6089 Git\uff0c\u8fd9\u91cc\u6709\u5f88\u597d\u7684\u5b66\u4e60\u8d44\u6599\uff1a   Pro Git \u4e2d\u6587\u7248  Learn Git Branching  tryGit     \u66f4\u591a\u5173\u4e8e mbed CLI \u7684\u8d44\u6e90", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/getting-started/#_9", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-blinky/", 
            "text": "\u4ece\u5934\u5f00\u59cb\u521b\u5efa Blinky\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u5feb\u901f\u5165\u95e8\n\u4e2d\u4ecb\u7ecd\u4e86\u5982\u4f55\u5bfc\u5165\u5df2\u7ecf\u5b58\u5728\u7684\u5e94\u7528\uff0c\u7136\u800c\u66f4\u591a\u60c5\u51b5\u662f\uff1a\u6211\u4eec\u9700\u8981\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u5e94\u7528\u3002\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4ece\u5934\u521b\u5efa Blinky\u3002\n\n\n\u514b\u9686 mbed-os\n\n\n\u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u65b0\u5efa\u5e94\u7528\u90fd\u8981\u8fd0\u884c \nmbed new \nproject_name\n\uff0c\u7136\u540e\u518d\u4ee5\u8ba9\u4eba\u65e0\u6cd5\u5fcd\u53d7\u7684\u7f51\u901f\u53bb\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6\u6700\u65b0\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06 \nmbed-os\n \u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730\uff0c\u6bcf\u6b21\u65b0\u5efa\u5e94\u7528\u65f6\u8fd0\u884c \nmbed add \nmbed-os-path\n \u5373\u53ef\uff1a\n\n\n# \u8be5\u4ed3\u5e93\u662f\u5728\u5b98\u65b9\u4ee3\u7801\u5e93\u7684\u57fa\u7840\u4e0a\u589e\u52a0 nrf52832-mdk \u5206\u652f\n\n$ git clone https://github.com/makerdiary/mbed-os.git\n\n\n# \u6709\u9700\u8981\u65f6\u518d\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6\u6700\u65b0\u4ee3\u7801\uff1a\n\n$ \ncd\n ./mbed-os\n$ git pull origin nrf52832-mdk\n\n\n\n\n\n\u65b0\u5efa\u5e94\u7528\n\n\n\u5728\u4f60\u7684\u9879\u76ee\u76ee\u5f55\u4e0b\u65b0\u5efa\u5e94\u7528\uff0c\u8fd9\u91cc\u4ee5 \n./nrf52832-mdk/examples/mbedos5/mbed-os-blinky\n \u4e3a\u4f8b\uff1a\n\n\n$ \ncd\n ./nrf52832-mdk/examples/mbedos5/\n\n\n# \u65b0\u5efa mbed-os-blinky \u76ee\u5f55\n\n$ mkdir mbed-os-blinky\n\n\n# \u6dfb\u52a0 mbed-os \u5e93\uff0c\u8def\u5f84\u4e3a\u524d\u9762\u514b\u9686\u4e0b\u6765\u7684 mbed-os \u7684\u76ee\u5f55\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u5b8c\u6210\u540e\uff0cmbed-os \u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0\u8fdb\u6765\n\n$ tree -L \n1\n\n.\n\u251c\u2500\u2500 mbed-os/\n\u251c\u2500\u2500 mbed-os.lib\n\u2514\u2500\u2500 mbed_settings.py\n\n\n\n\n\n\u5e94\u7528\u7a0b\u5e8f\n\n\n\u8fd9\u91cc\u5728\u5e94\u7528\u76ee\u5f55\u4e0b\u65b0\u5efa \nmain.cpp\n\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n// main.cpp\n\n\n\n#include\n \nmbed.h\n\n\n\nDigitalOut\n \nled2\n(\nLED2\n);\n\n\n\n// main() runs in its own thread in the OS\n\n\nint\n \nmain\n()\n \n{\n\n    \nwhile\n \n(\ntrue\n)\n \n{\n\n        \nled2\n \n=\n \n!\nled2\n;\n\n        \nwait\n(\n0.5\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n\u4f7f\u7528 \nmbed compile\n \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff1a\n\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nCompile \n[\n100\n.0%\n]\n: test_env.cpp\nLink: mbed-os-blinky\nElf2Bin: mbed-os-blinky\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n119\n \n|\n     \n4\n \n|\n   \n24\n \n|\n\n\n|\n Misc                  \n|\n \n26387\n \n|\n  \n2484\n \n|\n  \n118\n \n|\n\n\n|\n hal                   \n|\n   \n344\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1187\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n    \n38\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n5841\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n  \n7751\n \n|\n    \n20\n \n|\n  \n804\n \n|\n\n\n|\n Subtotals             \n|\n \n41667\n \n|\n  \n2536\n \n|\n \n5508\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n43204\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n8044\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n44203\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-blinky.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 \n./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-blinky.hex\n \u76f4\u63a5\u62f7\u8d1d\u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u8005\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-blinky.hex\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u6210\u529f\u65b0\u5efa mbed os \u5e94\u7528\uff0c\u5f00\u59cb\u4e0b\u4e00\u4e2a\u5e94\u7528\u5427\uff01\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Blinky"
        }, 
        {
            "location": "/mbedos5/example-blinky/#blinky", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801  \u5feb\u901f\u5165\u95e8 \u4e2d\u4ecb\u7ecd\u4e86\u5982\u4f55\u5bfc\u5165\u5df2\u7ecf\u5b58\u5728\u7684\u5e94\u7528\uff0c\u7136\u800c\u66f4\u591a\u60c5\u51b5\u662f\uff1a\u6211\u4eec\u9700\u8981\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u5e94\u7528\u3002\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4ece\u5934\u521b\u5efa Blinky\u3002", 
            "title": "\u4ece\u5934\u5f00\u59cb\u521b\u5efa Blinky"
        }, 
        {
            "location": "/mbedos5/example-blinky/#mbed-os", 
            "text": "\u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u65b0\u5efa\u5e94\u7528\u90fd\u8981\u8fd0\u884c  mbed new  project_name \uff0c\u7136\u540e\u518d\u4ee5\u8ba9\u4eba\u65e0\u6cd5\u5fcd\u53d7\u7684\u7f51\u901f\u53bb\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6\u6700\u65b0\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06  mbed-os  \u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730\uff0c\u6bcf\u6b21\u65b0\u5efa\u5e94\u7528\u65f6\u8fd0\u884c  mbed add  mbed-os-path  \u5373\u53ef\uff1a  # \u8be5\u4ed3\u5e93\u662f\u5728\u5b98\u65b9\u4ee3\u7801\u5e93\u7684\u57fa\u7840\u4e0a\u589e\u52a0 nrf52832-mdk \u5206\u652f \n$ git clone https://github.com/makerdiary/mbed-os.git # \u6709\u9700\u8981\u65f6\u518d\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u62c9\u53d6\u6700\u65b0\u4ee3\u7801\uff1a \n$  cd  ./mbed-os\n$ git pull origin nrf52832-mdk", 
            "title": "\u514b\u9686 mbed-os"
        }, 
        {
            "location": "/mbedos5/example-blinky/#_1", 
            "text": "\u5728\u4f60\u7684\u9879\u76ee\u76ee\u5f55\u4e0b\u65b0\u5efa\u5e94\u7528\uff0c\u8fd9\u91cc\u4ee5  ./nrf52832-mdk/examples/mbedos5/mbed-os-blinky  \u4e3a\u4f8b\uff1a  $  cd  ./nrf52832-mdk/examples/mbedos5/ # \u65b0\u5efa mbed-os-blinky \u76ee\u5f55 \n$ mkdir mbed-os-blinky # \u6dfb\u52a0 mbed-os \u5e93\uff0c\u8def\u5f84\u4e3a\u524d\u9762\u514b\u9686\u4e0b\u6765\u7684 mbed-os \u7684\u76ee\u5f55 \n$ mbed add  your-mbed-os-path  # \u5b8c\u6210\u540e\uff0cmbed-os \u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0\u8fdb\u6765 \n$ tree -L  1 \n.\n\u251c\u2500\u2500 mbed-os/\n\u251c\u2500\u2500 mbed-os.lib\n\u2514\u2500\u2500 mbed_settings.py", 
            "title": "\u65b0\u5efa\u5e94\u7528"
        }, 
        {
            "location": "/mbedos5/example-blinky/#_2", 
            "text": "\u8fd9\u91cc\u5728\u5e94\u7528\u76ee\u5f55\u4e0b\u65b0\u5efa  main.cpp \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a  // main.cpp  #include   mbed.h  DigitalOut   led2 ( LED2 );  // main() runs in its own thread in the OS  int   main ()   { \n     while   ( true )   { \n         led2   =   ! led2 ; \n         wait ( 0.5 ); \n     }  }", 
            "title": "\u5e94\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/mbedos5/example-blinky/#_3", 
            "text": "\u4f7f\u7528  mbed compile  \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff1a  $ mbed compile -m NRF52832_MDK -t GCC_ARM # \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nCompile  [ 100 .0% ] : test_env.cpp\nLink: mbed-os-blinky\nElf2Bin: mbed-os-blinky\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     119   |       4   |     24   |  |  Misc                   |   26387   |    2484   |    118   |  |  hal                    |     344   |       0   |     16   |  |  platform               |    1187   |       4   |    264   |  |  rtos                   |      38   |       4   |      4   |  |  rtos/rtx               |    5841   |      20   |   4278   |  |  targets/TARGET_NORDIC  |    7751   |      20   |    804   |  |  Subtotals              |   41667   |    2536   |   5508   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  43204  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  8044  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  44203  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-blinky.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-blinky/#_4", 
            "text": "\u5c06  ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-blinky.hex  \u76f4\u63a5\u62f7\u8d1d\u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u8005\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/mbed-os-blinky.hex  \u81f3\u6b64\uff0c\u4f60\u5df2\u6210\u529f\u65b0\u5efa mbed os \u5e94\u7528\uff0c\u5f00\u59cb\u4e0b\u4e00\u4e2a\u5e94\u7528\u5427\uff01", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-blinky/#_5", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-index/", 
            "text": "mbed OS 5 \u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\n\n\n\u7b80\u4ecb\n\n\nmbed OS 5 \u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u4f18\u52bf\u5c31\u662f\u80fd\u591f\u63d0\u4f9b\u975e\u5e38\u5f3a\u5927\u7684\u8fde\u63a5\u529f\u80fd\uff0cBLE \u5c31\u662f\u5176\u4e2d\u652f\u6301\u6bd4\u8f83\u65e9\u3001\u4e5f\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u79cd\u534f\u8bae\u6808\u3002\n\n\nmbed BLE \u63d0\u4f9b\u4e86\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684 API\uff0c\u76f8\u6bd4\u4e0e\u4f7f\u7528 nRF5 SDK\uff0c\u5f00\u53d1\u8d77\u6765\u4f1a\u5feb\u597d\u591a\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 mbed \u5b98\u65b9\u63d0\u4f9b\u7684\u793a\u4f8b\u8fdb\u884c\u5b66\u4e60\uff1a\n\n\n\n\nBLE Battery Level\n\n\nBLE Beacon\n\n\nBLE Button\n\n\nBLE Eddystone Observer\n\n\nBLE Eddystone Service\n\n\nBLE GAP Button\n\n\nBLE HeartRate\n\n\nBLE LED\n\n\nBLE LED Blinker\n\n\nBLE Thermometer\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nmbed BLE \u4ecb\u7ecd\n\n\nmbed BLE API \u6587\u6863\n\n\n\u5b98\u65b9\u793a\u4f8b\u4ee3\u7801\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/mbedos5/example-ble-index/#mbed-os-5", 
            "text": "", 
            "title": "mbed OS 5 \u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b"
        }, 
        {
            "location": "/mbedos5/example-ble-index/#_1", 
            "text": "mbed OS 5 \u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u4f18\u52bf\u5c31\u662f\u80fd\u591f\u63d0\u4f9b\u975e\u5e38\u5f3a\u5927\u7684\u8fde\u63a5\u529f\u80fd\uff0cBLE \u5c31\u662f\u5176\u4e2d\u652f\u6301\u6bd4\u8f83\u65e9\u3001\u4e5f\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u79cd\u534f\u8bae\u6808\u3002  mbed BLE \u63d0\u4f9b\u4e86\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684 API\uff0c\u76f8\u6bd4\u4e0e\u4f7f\u7528 nRF5 SDK\uff0c\u5f00\u53d1\u8d77\u6765\u4f1a\u5feb\u597d\u591a\u3002  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 mbed \u5b98\u65b9\u63d0\u4f9b\u7684\u793a\u4f8b\u8fdb\u884c\u5b66\u4e60\uff1a   BLE Battery Level  BLE Beacon  BLE Button  BLE Eddystone Observer  BLE Eddystone Service  BLE GAP Button  BLE HeartRate  BLE LED  BLE LED Blinker  BLE Thermometer", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/mbedos5/example-ble-index/#_2", 
            "text": "mbed BLE \u4ecb\u7ecd  mbed BLE API \u6587\u6863  \u5b98\u65b9\u793a\u4f8b\u4ee3\u7801", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-index/#_3", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u83b7\u53d6\u7535\u6c60\u7535\u91cf\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u4f1a\u521b\u5efa\u4e00\u4e2a\u7535\u6c60\u7535\u91cf\u7684\u9996\u8981\u670d\u52a1\uff0c\u8fde\u63a5\u540e\u6bcf\u9694 500ms \u66f4\u65b0\u4e00\u6b21\u7535\u6c60\u7535\u91cf\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u8ba9\u7535\u6c60\u7535\u91cf\u4ece 50% \u6bcf\u9694 500ms \u589e\u52a0 1%\uff0c\u8d85\u8fc7 100% \u518d\u56de\u5230 20% \u7ee7\u7eed\u589e\u52a0\uff0c\u4ee5\u6b64\u6765\u6a21\u62df\u7535\u6c60\u7684\u4f7f\u7528\u573a\u666f\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n#include\n \nble/Gap.h\n\n\n#include\n \nble/services/BatteryService.h\n\n\n\nDigitalOut\n \nled1\n(\nLED1\n,\n \n1\n);\n\n\n\nconst\n \nstatic\n \nchar\n     \nDEVICE_NAME\n[]\n \n=\n \nBATTERY\n;\n\n\nstatic\n \nconst\n \nuint16_t\n \nuuid16_list\n[]\n \n=\n \n{\nGattService\n::\nUUID_BATTERY_SERVICE\n};\n\n\n\nstatic\n \nuint8_t\n \nbatteryLevel\n \n=\n \n50\n;\n\n\nstatic\n \nBatteryService\n*\n \nbatteryServicePtr\n;\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n16\n \n*\n \n/* event size */\n \n32\n\n\n);\n\n\n\nvoid\n \ndisconnectionCallback\n(\nconst\n \nGap\n::\nDisconnectionCallbackParams_t\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n::\nInstance\n().\ngap\n().\nstartAdvertising\n();\n\n\n}\n\n\n\nvoid\n \nupdateSensorValue\n()\n \n{\n\n    \nbatteryLevel\n++\n;\n\n    \nif\n \n(\nbatteryLevel\n \n \n100\n)\n \n{\n\n        \nbatteryLevel\n \n=\n \n20\n;\n\n    \n}\n\n\n    \nbatteryServicePtr\n-\nupdateBatteryLevel\n(\nbatteryLevel\n);\n\n\n}\n\n\n\nvoid\n \nblinkCallback\n(\nvoid\n)\n\n\n{\n\n    \nled1\n \n=\n \n!\nled1\n;\n \n/* Do blinky on LED1 while we\nre waiting for BLE events */\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nif\n \n(\nble\n.\ngap\n().\ngetState\n().\nconnected\n)\n \n{\n\n        \neventQueue\n.\ncall\n(\nupdateSensorValue\n);\n\n    \n}\n\n\n}\n\n\n\n/**\n\n\n * This function is called when the ble initialization process has failled\n\n\n */\n\n\nvoid\n \nonBleInitError\n(\nBLE\n \nble\n,\n \nble_error_t\n \nerror\n)\n\n\n{\n\n    \n/* Initialization error handling should go here */\n\n\n}\n\n\n\n/**\n\n\n * Callback triggered when the ble initialization process has finished\n\n\n */\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n        \nble\n   \n=\n \nparams\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \nparams\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \n/* In case of error, forward the error handling to onBleInitError */\n\n        \nonBleInitError\n(\nble\n,\n \nerror\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n/* Ensure that it is the default instance of BLE */\n\n    \nif\n(\nble\n.\ngetInstanceID\n()\n \n!=\n \nBLE\n::\nDEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nble\n.\ngap\n().\nonDisconnection\n(\ndisconnectionCallback\n);\n\n\n    \n/* Setup primary service */\n\n    \nbatteryServicePtr\n \n=\n \nnew\n \nBatteryService\n(\nble\n,\n \nbatteryLevel\n);\n\n\n    \n/* Setup advertising */\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nBREDR_NOT_SUPPORTED\n \n|\n \nGapAdvertisingData\n::\nLE_GENERAL_DISCOVERABLE\n);\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LIST_16BIT_SERVICE_IDS\n,\n \n(\nuint8_t\n \n*\n)\n \nuuid16_list\n,\n \nsizeof\n(\nuuid16_list\n));\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LOCAL_NAME\n,\n \n(\nuint8_t\n \n*\n)\n \nDEVICE_NAME\n,\n \nsizeof\n(\nDEVICE_NAME\n));\n\n    \nble\n.\ngap\n().\nsetAdvertisingType\n(\nGapAdvertisingParams\n::\nADV_CONNECTABLE_UNDIRECTED\n);\n\n    \nble\n.\ngap\n().\nsetAdvertisingInterval\n(\n1000\n);\n \n/* 1000ms */\n\n    \nble\n.\ngap\n().\nstartAdvertising\n();\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nblinkCallback\n);\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_BatteryLevel\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_BatteryLevel\nElf2Bin: BLE_BatteryLevel\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n167\n \n|\n    \n10\n \n|\n   \n43\n \n|\n\n\n|\n Misc                  \n|\n \n28414\n \n|\n  \n2489\n \n|\n  \n230\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16408\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n79257\n \n|\n  \n2672\n \n|\n \n7636\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40940\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10308\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n81929\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_BatteryLevel.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_BatteryLevel.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_BatteryLevel.hex\n\n\n\n\n\n\u9a8c\u8bc1\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907\uff0c\u53d1\u73b0\u4e00\u4e2a ServiceUUID \u4e3a \n0x180F\n \u7684\u7535\u6c60\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a\u540d\u4e3a \nBattery Level\n \u7684 Characteristic\uff0c\u8bfb\u53d6 \nBattery Level\n \u7684\u5c5e\u6027\u503c\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u8bbe\u5907\u7684\u7535\u6c60\u7535\u91cf\u3002\n\n\n\n\n\n\n\u63d0\u9192\n\n\n\u5982\u679c\u7535\u6c60\u670d\u52a1\u91cc\u9762\u51fa\u73b0\u5f88\u591a \nUnknown Characteristic\n\uff0c\u8fd9\u662f\u56e0\u4e3a nRF52832-MDK \u8fd0\u884c\u8fc7\u5176\u4ed6 BLE \u793a\u4f8b\uff0c\u624b\u673a\u5c06\u8fd9\u4e9b \nCharacteristics\n \u7f13\u5b58\u4e0b\u6765\u4e86\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u7cfb\u7edf\u8bbe\u7f6e\u5c06\u84dd\u7259\u5173\u95ed\u518d\u91cd\u65b0\u6253\u5f00\uff0c\u4ee5\u6e05\u9664\u7f13\u5b58\u3002\n\n\n\n\n\u5c0f\u5f69\u86cb\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 Chrome \u6d4f\u89c8\u5668\u67e5\u770b\u672c\u6587\u6863\uff0c\u540c\u65f6\u4f60\u7684\u8bbe\u5907\u4e5f\u652f\u6301 BLE\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4ee5\u4e0b\u6309\u94ae\u83b7\u53d6\u8bbe\u5907\u7535\u91cf\uff1a\n\n\n\u83b7\u53d6\u7535\u6c60\u7535\u91cf\n\n\n\n  \nOutput log here.\n\n\n\n\n\n\n\n\n\u8bf4\u660e\n\n\n\u8fd9\u662f\u57fa\u4e8e\u6700\u65b0\u7684 Web Bluetooth API \u5b9e\u73b0\u7684\uff0c\u901a\u8fc7\u6d4f\u89c8\u5668\u5c31\u53ef\u4ee5\u4e0e\u84dd\u7259\u8bbe\u5907\u901a\u4fe1\uff0c\u5f88\u9177\u5427~ \u611f\u5174\u8da3\u7684\u8bdd\u4e0b\u9762\u6709\u76f8\u5173\u7684\u63a8\u8350\u8d44\u6e90\u94fe\u63a5\uff0c\u8fd9\u91cc\u6682\u4e0d\u6df1\u5165\uff0c\u540e\u7eed\u6709\u4e13\u95e8\u7684\u7ae0\u8282\u5f00\u5c55\u8fd9\u65b9\u9762\u7684\u5185\u5bb9\u3002\n\n\n\n\n\n  var ChromeSamples = {\n    log: function() {\n      var line = Array.prototype.slice.call(arguments).map(function(argument) {\n        return typeof argument === 'string' ? argument : JSON.stringify(argument);\n      }).join(' ');\n\n      document.querySelector('#log').textContent += line + '\\n';\n    },\n\n    clearLog: function() {\n      document.querySelector('#log').textContent = '';\n    },\n\n    setStatus: function(status) {\n      document.querySelector('#status').textContent = status;\n    },\n\n    setContent: function(newContent) {\n      var content = document.querySelector('#content');\n      while(content.hasChildNodes()) {\n        content.removeChild(content.lastChild);\n      }\n      content.appendChild(newContent);\n    }\n  };\n\n\n\n\n\n  if (/Chrome\\/(\\d+\\.\\d+.\\d+.\\d+)/.test(navigator.userAgent)){\n    // Let's log a warning if the sample is not supposed to execute on this\n    // version of Chrome.\n    if (45 > parseInt(RegExp.$1)) {\n      ChromeSamples.setStatus('Warning! Keep in mind this sample has been tested with Chrome ' + 45 + '.');\n    }\n  }\n\n\n\n\n\nfunction onButtonClick() {\n  log('Requesting Bluetooth Device...');\n  navigator.bluetooth.requestDevice(\n    {filters: [{services: ['battery_service']}]})\n  .then(device => {\n    log('Connecting to GATT Server...');\n    return device.gatt.connect();\n  })\n  .then(server => {\n    log('Getting Battery Service...');\n    return server.getPrimaryService('battery_service');\n  })\n  .then(service => {\n    log('Getting Battery Level Characteristic...');\n    return service.getCharacteristic('battery_level');\n  })\n  .then(characteristic => {\n    log('Reading Battery Level...');\n    return characteristic.readValue();\n  })\n  .then(value => {\n    let batteryLevel = value.getUint8(0);\n    log('> Battery Level is ' + batteryLevel + '%');\n  })\n  .catch(error => {\n    log('Argh! ' + error);\n  });\n}\n\n\n\n\n\n  document.querySelector('#btn_get_battery_level').addEventListener('click', function() {\n    if (isWebBluetoothEnabled()) {\n      ChromeSamples.clearLog();\n      onButtonClick();\n    }\n  });\n\n\n\n\n\n  log = ChromeSamples.log;\n\n  function isWebBluetoothEnabled() {\n    if (navigator.bluetooth) {\n      return true;\n    } else {\n      ChromeSamples.setStatus('Web Bluetooth API is not available.\\n' +\n          'Please make sure the \"Experimental Web Platform features\" flag is enabled.');\n      return false;\n    }\n  }\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\n\n\n\n\nBLE Battery Service\n\n\n\n\n\n\nmbed-os-example-ble/BLE_BatteryLevel\n\n\n\n\n\n\nWeb Bluetooth API\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Battery Level"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_1", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u83b7\u53d6\u7535\u6c60\u7535\u91cf"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_2", 
            "text": "\u672c\u4f8b\u4f1a\u521b\u5efa\u4e00\u4e2a\u7535\u6c60\u7535\u91cf\u7684\u9996\u8981\u670d\u52a1\uff0c\u8fde\u63a5\u540e\u6bcf\u9694 500ms \u66f4\u65b0\u4e00\u6b21\u7535\u6c60\u7535\u91cf\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u8ba9\u7535\u6c60\u7535\u91cf\u4ece 50% \u6bcf\u9694 500ms \u589e\u52a0 1%\uff0c\u8d85\u8fc7 100% \u518d\u56de\u5230 20% \u7ee7\u7eed\u589e\u52a0\uff0c\u4ee5\u6b64\u6765\u6a21\u62df\u7535\u6c60\u7684\u4f7f\u7528\u573a\u666f\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_3", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  #include   ble/Gap.h  #include   ble/services/BatteryService.h  DigitalOut   led1 ( LED1 ,   1 );  const   static   char       DEVICE_NAME []   =   BATTERY ;  static   const   uint16_t   uuid16_list []   =   { GattService :: UUID_BATTERY_SERVICE };  static   uint8_t   batteryLevel   =   50 ;  static   BatteryService *   batteryServicePtr ;  static   EventQueue   eventQueue ( \n     /* event count */   16   *   /* event size */   32  );  void   disconnectionCallback ( const   Gap :: DisconnectionCallbackParams_t   * params )  { \n     BLE :: Instance (). gap (). startAdvertising ();  }  void   updateSensorValue ()   { \n     batteryLevel ++ ; \n     if   ( batteryLevel     100 )   { \n         batteryLevel   =   20 ; \n     } \n\n     batteryServicePtr - updateBatteryLevel ( batteryLevel );  }  void   blinkCallback ( void )  { \n     led1   =   ! led1 ;   /* Do blinky on LED1 while we re waiting for BLE events */ \n\n     BLE   ble   =   BLE :: Instance (); \n     if   ( ble . gap (). getState (). connected )   { \n         eventQueue . call ( updateSensorValue ); \n     }  }  /**   * This function is called when the ble initialization process has failled   */  void   onBleInitError ( BLE   ble ,   ble_error_t   error )  { \n     /* Initialization error handling should go here */  }  /**   * Callback triggered when the ble initialization process has finished   */  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * params )  { \n     BLE          ble     =   params - ble ; \n     ble_error_t   error   =   params - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         /* In case of error, forward the error handling to onBleInitError */ \n         onBleInitError ( ble ,   error ); \n         return ; \n     } \n\n     /* Ensure that it is the default instance of BLE */ \n     if ( ble . getInstanceID ()   !=   BLE :: DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n     ble . gap (). onDisconnection ( disconnectionCallback ); \n\n     /* Setup primary service */ \n     batteryServicePtr   =   new   BatteryService ( ble ,   batteryLevel ); \n\n     /* Setup advertising */ \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: BREDR_NOT_SUPPORTED   |   GapAdvertisingData :: LE_GENERAL_DISCOVERABLE ); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LIST_16BIT_SERVICE_IDS ,   ( uint8_t   * )   uuid16_list ,   sizeof ( uuid16_list )); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LOCAL_NAME ,   ( uint8_t   * )   DEVICE_NAME ,   sizeof ( DEVICE_NAME )); \n     ble . gap (). setAdvertisingType ( GapAdvertisingParams :: ADV_CONNECTABLE_UNDIRECTED ); \n     ble . gap (). setAdvertisingInterval ( 1000 );   /* 1000ms */ \n     ble . gap (). startAdvertising ();  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     eventQueue . call_every ( 500 ,   blinkCallback ); \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_4", 
            "text": "$  cd  ./BLE_BatteryLevel # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_BatteryLevel\nElf2Bin: BLE_BatteryLevel\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     167   |      10   |     43   |  |  Misc                   |   28414   |    2489   |    230   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16408   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   79257   |    2672   |   7636   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40940  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10308  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  81929  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_BatteryLevel.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_BatteryLevel.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_BatteryLevel.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_6", 
            "text": "\u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907\uff0c\u53d1\u73b0\u4e00\u4e2a ServiceUUID \u4e3a  0x180F  \u7684\u7535\u6c60\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a\u540d\u4e3a  Battery Level  \u7684 Characteristic\uff0c\u8bfb\u53d6  Battery Level  \u7684\u5c5e\u6027\u503c\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u8bbe\u5907\u7684\u7535\u6c60\u7535\u91cf\u3002    \u63d0\u9192  \u5982\u679c\u7535\u6c60\u670d\u52a1\u91cc\u9762\u51fa\u73b0\u5f88\u591a  Unknown Characteristic \uff0c\u8fd9\u662f\u56e0\u4e3a nRF52832-MDK \u8fd0\u884c\u8fc7\u5176\u4ed6 BLE \u793a\u4f8b\uff0c\u624b\u673a\u5c06\u8fd9\u4e9b  Characteristics  \u7f13\u5b58\u4e0b\u6765\u4e86\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u7cfb\u7edf\u8bbe\u7f6e\u5c06\u84dd\u7259\u5173\u95ed\u518d\u91cd\u65b0\u6253\u5f00\uff0c\u4ee5\u6e05\u9664\u7f13\u5b58\u3002", 
            "title": "\u9a8c\u8bc1"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_7", 
            "text": "\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 Chrome \u6d4f\u89c8\u5668\u67e5\u770b\u672c\u6587\u6863\uff0c\u540c\u65f6\u4f60\u7684\u8bbe\u5907\u4e5f\u652f\u6301 BLE\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4ee5\u4e0b\u6309\u94ae\u83b7\u53d6\u8bbe\u5907\u7535\u91cf\uff1a  \u83b7\u53d6\u7535\u6c60\u7535\u91cf  \n   Output log here.     \u8bf4\u660e  \u8fd9\u662f\u57fa\u4e8e\u6700\u65b0\u7684 Web Bluetooth API \u5b9e\u73b0\u7684\uff0c\u901a\u8fc7\u6d4f\u89c8\u5668\u5c31\u53ef\u4ee5\u4e0e\u84dd\u7259\u8bbe\u5907\u901a\u4fe1\uff0c\u5f88\u9177\u5427~ \u611f\u5174\u8da3\u7684\u8bdd\u4e0b\u9762\u6709\u76f8\u5173\u7684\u63a8\u8350\u8d44\u6e90\u94fe\u63a5\uff0c\u8fd9\u91cc\u6682\u4e0d\u6df1\u5165\uff0c\u540e\u7eed\u6709\u4e13\u95e8\u7684\u7ae0\u8282\u5f00\u5c55\u8fd9\u65b9\u9762\u7684\u5185\u5bb9\u3002   \n  var ChromeSamples = {\n    log: function() {\n      var line = Array.prototype.slice.call(arguments).map(function(argument) {\n        return typeof argument === 'string' ? argument : JSON.stringify(argument);\n      }).join(' ');\n\n      document.querySelector('#log').textContent += line + '\\n';\n    },\n\n    clearLog: function() {\n      document.querySelector('#log').textContent = '';\n    },\n\n    setStatus: function(status) {\n      document.querySelector('#status').textContent = status;\n    },\n\n    setContent: function(newContent) {\n      var content = document.querySelector('#content');\n      while(content.hasChildNodes()) {\n        content.removeChild(content.lastChild);\n      }\n      content.appendChild(newContent);\n    }\n  };  \n  if (/Chrome\\/(\\d+\\.\\d+.\\d+.\\d+)/.test(navigator.userAgent)){\n    // Let's log a warning if the sample is not supposed to execute on this\n    // version of Chrome.\n    if (45 > parseInt(RegExp.$1)) {\n      ChromeSamples.setStatus('Warning! Keep in mind this sample has been tested with Chrome ' + 45 + '.');\n    }\n  }  \nfunction onButtonClick() {\n  log('Requesting Bluetooth Device...');\n  navigator.bluetooth.requestDevice(\n    {filters: [{services: ['battery_service']}]})\n  .then(device => {\n    log('Connecting to GATT Server...');\n    return device.gatt.connect();\n  })\n  .then(server => {\n    log('Getting Battery Service...');\n    return server.getPrimaryService('battery_service');\n  })\n  .then(service => {\n    log('Getting Battery Level Characteristic...');\n    return service.getCharacteristic('battery_level');\n  })\n  .then(characteristic => {\n    log('Reading Battery Level...');\n    return characteristic.readValue();\n  })\n  .then(value => {\n    let batteryLevel = value.getUint8(0);\n    log('> Battery Level is ' + batteryLevel + '%');\n  })\n  .catch(error => {\n    log('Argh! ' + error);\n  });\n}  \n  document.querySelector('#btn_get_battery_level').addEventListener('click', function() {\n    if (isWebBluetoothEnabled()) {\n      ChromeSamples.clearLog();\n      onButtonClick();\n    }\n  });  \n  log = ChromeSamples.log;\n\n  function isWebBluetoothEnabled() {\n    if (navigator.bluetooth) {\n      return true;\n    } else {\n      ChromeSamples.setStatus('Web Bluetooth API is not available.\\n' +\n          'Please make sure the \"Experimental Web Platform features\" flag is enabled.');\n      return false;\n    }\n  }", 
            "title": "\u5c0f\u5f69\u86cb"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_8", 
            "text": "mbed BLE API \u6587\u6863    BLE Battery Service    mbed-os-example-ble/BLE_BatteryLevel    Web Bluetooth API", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-batterylevel/#_9", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aBeacon\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u5373\u5c06\u521b\u5efa\u4e00\u4e2a iBeacon \u8bbe\u5907\uff0c\u7136\u540e\u6bcf\u9694 1s \u5e7f\u64ad\u4e00\u6b21\u6570\u636e\uff08\u5305\u62ec 16\u5b57\u8282 UUID + 2\u5b57\u8282 Major + 2\u5b57\u8282 Minor + 1\u5b57\u8282 Tx-Power\uff09\u3002\n\n\n\u4f5c\u4e3a\u793a\u4f8b\uff0ciBeacon ID \u7531\u6211\u7684\u516c\u4f17\u53f7\u300c\n\u9020\u7269\u90a6\n\u300d\u914d\u7f6e\u751f\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7\u5fae\u4fe1\u6447\u4e00\u6447\u8fdb\u5165\u5230\u672c\u6587\u6863\u9875\u9762\u3002iBeacon ID \u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n\niBeacon ID\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nUUID\n\n\nFDA50693-A4E2-4FB1-AFCF-C6EB07647825\n\n\n\n\n\n\nMajor\n\n\n10100\n\n\n\n\n\n\nMinor\n\n\n56482\n\n\n\n\n\n\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n#include\n \nble/services/iBeacon.h\n\n\n\nstatic\n \niBeacon\n*\n \nibeaconPtr\n;\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n4\n \n*\n \n/* event size */\n \n32\n    \n\n);\n\n\n\n/**\n\n\n * This function is called when the ble initialization process has failled\n\n\n */\n\n\nvoid\n \nonBleInitError\n(\nBLE\n \nble\n,\n \nble_error_t\n \nerror\n)\n\n\n{\n\n    \n/* Initialization error handling should go here */\n\n\n}\n\n\n\n/**\n\n\n * Callback triggered when the ble initialization process has finished\n\n\n */\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n        \nble\n   \n=\n \nparams\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \nparams\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \n/* In case of error, forward the error handling to onBleInitError */\n\n        \nonBleInitError\n(\nble\n,\n \nerror\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n/* Ensure that it is the default instance of BLE */\n\n    \nif\n(\nble\n.\ngetInstanceID\n()\n \n!=\n \nBLE\n::\nDEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n/**\n\n\n     * The Beacon payload has the following composition:\n\n\n     * 128-Bit / 16byte UUID = FDA50693-A4E2-4FB1-AFCF-C6EB07647825\n\n\n     * Major/Minor  = 10100 / 56482\n\n\n     * Tx Power     = 0xC8 = 200, 2\ns compliment is 256-200 = (-56dB)\n\n\n     *\n\n\n     * Note: please remember to calibrate your beacons TX Power for more accurate results.\n\n\n     */\n\n    \nstatic\n \nconst\n \nuint8_t\n \nuuid\n[]\n \n=\n \n{\n0xFD\n,\n \n0xA5\n,\n \n0x06\n,\n \n0x93\n,\n \n0xA4\n,\n \n0xE2\n,\n \n0x4F\n,\n \n0xB1\n,\n\n                                   \n0xAF\n,\n \n0xCF\n,\n \n0xC6\n,\n \n0xEB\n,\n \n0x07\n,\n \n0x64\n,\n \n0x78\n,\n \n0x25\n};\n\n    \nuint16_t\n \nmajorNumber\n \n=\n \n10100\n;\n\n    \nuint16_t\n \nminorNumber\n \n=\n \n56482\n;\n\n    \nuint16_t\n \ntxPower\n     \n=\n \n0xC8\n;\n\n    \nibeaconPtr\n \n=\n \nnew\n \niBeacon\n(\nble\n,\n \nuuid\n,\n \nmajorNumber\n,\n \nminorNumber\n,\n \ntxPower\n);\n\n\n    \nble\n.\ngap\n().\nsetAdvertisingInterval\n(\n1000\n);\n \n/* 1000ms. */\n\n    \nble\n.\ngap\n().\nstartAdvertising\n();\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_Beacon\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_Beacon\nElf2Bin: BLE_Beacon\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n223\n \n|\n     \n3\n \n|\n   \n40\n \n|\n\n\n|\n Misc                  \n|\n \n27692\n \n|\n  \n2488\n \n|\n  \n225\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1238\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16376\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23587\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n78455\n \n|\n  \n2664\n \n|\n \n7628\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40956\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10292\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n81119\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Beacon.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_Beacon.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Beacon.hex\n\n\n\n\n\n\u6447\u4e00\u6447\n\n\n\u624b\u673a\u6253\u5f00\u84dd\u7259\uff0c\u8fdb\u5165\u5fae\u4fe1 \n \u53d1\u73b0 \n \u6447\u4e00\u6447\uff0c\u5982\u679c\u53d1\u73b0 iBeacon \u8bbe\u5907\uff0c\u4f1a\u51fa\u73b0 \n\u5468\u8fb9\n \u56fe\u6807\uff0c\u6447\u4e00\u6447\u5c31\u4f1a\u51fa\u73b0\u8be5\u8bbe\u5907\u6240\u7ed1\u5b9a\u7684\u9875\u9762\uff1a\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\nmbed-os-example-ble/BLE_Beacon\n\n\n\u4e00\u5bb6\u628a Beacon \u6280\u672f\u73a9\u5230\u6781\u81f4\u7684\u516c\u53f8\uff1a\nEstimote\n\n\nApple iBeacon for Developers\n\n\n\u6447\u4e00\u6447\u5468\u8fb9\u5b98\u7f51\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Beacon"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#beacon", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aBeacon"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_1", 
            "text": "\u672c\u4f8b\u5373\u5c06\u521b\u5efa\u4e00\u4e2a iBeacon \u8bbe\u5907\uff0c\u7136\u540e\u6bcf\u9694 1s \u5e7f\u64ad\u4e00\u6b21\u6570\u636e\uff08\u5305\u62ec 16\u5b57\u8282 UUID + 2\u5b57\u8282 Major + 2\u5b57\u8282 Minor + 1\u5b57\u8282 Tx-Power\uff09\u3002  \u4f5c\u4e3a\u793a\u4f8b\uff0ciBeacon ID \u7531\u6211\u7684\u516c\u4f17\u53f7\u300c \u9020\u7269\u90a6 \u300d\u914d\u7f6e\u751f\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7\u5fae\u4fe1\u6447\u4e00\u6447\u8fdb\u5165\u5230\u672c\u6587\u6863\u9875\u9762\u3002iBeacon ID \u5982\u4e0b\uff1a     iBeacon ID  Value      UUID  FDA50693-A4E2-4FB1-AFCF-C6EB07647825    Major  10100    Minor  56482", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_2", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  #include   ble/services/iBeacon.h  static   iBeacon *   ibeaconPtr ;  static   EventQueue   eventQueue ( \n     /* event count */   4   *   /* event size */   32      );  /**   * This function is called when the ble initialization process has failled   */  void   onBleInitError ( BLE   ble ,   ble_error_t   error )  { \n     /* Initialization error handling should go here */  }  /**   * Callback triggered when the ble initialization process has finished   */  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * params )  { \n     BLE          ble     =   params - ble ; \n     ble_error_t   error   =   params - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         /* In case of error, forward the error handling to onBleInitError */ \n         onBleInitError ( ble ,   error ); \n         return ; \n     } \n\n     /* Ensure that it is the default instance of BLE */ \n     if ( ble . getInstanceID ()   !=   BLE :: DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n     /**       * The Beacon payload has the following composition:       * 128-Bit / 16byte UUID = FDA50693-A4E2-4FB1-AFCF-C6EB07647825       * Major/Minor  = 10100 / 56482       * Tx Power     = 0xC8 = 200, 2 s compliment is 256-200 = (-56dB)       *       * Note: please remember to calibrate your beacons TX Power for more accurate results.       */ \n     static   const   uint8_t   uuid []   =   { 0xFD ,   0xA5 ,   0x06 ,   0x93 ,   0xA4 ,   0xE2 ,   0x4F ,   0xB1 , \n                                    0xAF ,   0xCF ,   0xC6 ,   0xEB ,   0x07 ,   0x64 ,   0x78 ,   0x25 }; \n     uint16_t   majorNumber   =   10100 ; \n     uint16_t   minorNumber   =   56482 ; \n     uint16_t   txPower       =   0xC8 ; \n     ibeaconPtr   =   new   iBeacon ( ble ,   uuid ,   majorNumber ,   minorNumber ,   txPower ); \n\n     ble . gap (). setAdvertisingInterval ( 1000 );   /* 1000ms. */ \n     ble . gap (). startAdvertising ();  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_3", 
            "text": "$  cd  ./BLE_Beacon # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_Beacon\nElf2Bin: BLE_Beacon\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     223   |       3   |     40   |  |  Misc                   |   27692   |    2488   |    225   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1238   |       0   |     61   |  |  features/FEATURE_BLE   |   16376   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23587   |     140   |   2200   |  |  Subtotals              |   78455   |    2664   |   7628   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40956  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10292  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  81119  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Beacon.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_Beacon.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Beacon.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_5", 
            "text": "\u624b\u673a\u6253\u5f00\u84dd\u7259\uff0c\u8fdb\u5165\u5fae\u4fe1   \u53d1\u73b0   \u6447\u4e00\u6447\uff0c\u5982\u679c\u53d1\u73b0 iBeacon \u8bbe\u5907\uff0c\u4f1a\u51fa\u73b0  \u5468\u8fb9  \u56fe\u6807\uff0c\u6447\u4e00\u6447\u5c31\u4f1a\u51fa\u73b0\u8be5\u8bbe\u5907\u6240\u7ed1\u5b9a\u7684\u9875\u9762\uff1a   Enjoy !", 
            "title": "\u6447\u4e00\u6447"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_6", 
            "text": "mbed BLE API \u6587\u6863  mbed-os-example-ble/BLE_Beacon  \u4e00\u5bb6\u628a Beacon \u6280\u672f\u73a9\u5230\u6781\u81f4\u7684\u516c\u53f8\uff1a Estimote  Apple iBeacon for Developers  \u6447\u4e00\u6447\u5468\u8fb9\u5b98\u7f51", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-beacon/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-button/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u6309\u94ae\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u5c06\u81ea\u5b9a\u4e49\u4e00\u4e2a UUID \u4e3a \n0xA000\n \u7684\u9996\u8981\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a UUID \u4e3a \n0xA001\n \u7684 Characteristic\uff0c\u901a\u8fc7\u8bfb\u53d6\u5176\u5c5e\u6027\u503c\u4fbf\u53ef\u4ee5\u83b7\u5f97\u6309\u94ae\u7684\u72b6\u6001\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u672c\u4f8b\u53ef\u4ee5\u4f5c\u4e3a\u5982\u4f55\u521b\u5efa BLE Service \u7684\u6a21\u677f\uff0c\u4f8b\u5982\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u8bfb\u53d6\u5176\u4ed6\u4f20\u611f\u5668\u6570\u503c\u7684 Service\u3002\n\n\n\n\n\u6e90\u4ee3\u7801\n\n\n\u84dd\u7259\u8054\u76df\n\u6ca1\u6709\u5b9a\u4e49\u540d\u4e3a \nButton\n GATT Service\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u8be5\u670d\u52a1\uff1a\n\n\n// ButtonService.h\n\n\n\nclass\n \nButtonService\n \n{\n\n\npublic\n:\n\n    \nconst\n \nstatic\n \nuint16_t\n \nBUTTON_SERVICE_UUID\n              \n=\n \n0xA000\n;\n\n    \nconst\n \nstatic\n \nuint16_t\n \nBUTTON_STATE_CHARACTERISTIC_UUID\n \n=\n \n0xA001\n;\n\n\n    \nButtonService\n(\nBLE\n \n_ble\n,\n \nbool\n \nbuttonPressedInitial\n)\n \n:\n\n        \nble\n(\n_ble\n),\n \nbuttonState\n(\nBUTTON_STATE_CHARACTERISTIC_UUID\n,\n \nbuttonPressedInitial\n,\n \nGattCharacteristic\n::\nBLE_GATT_CHAR_PROPERTIES_NOTIFY\n)\n\n    \n{\n\n        \nGattCharacteristic\n \n*\ncharTable\n[]\n \n=\n \n{\nbuttonState\n};\n\n        \nGattService\n         \nbuttonService\n(\nButtonService\n::\nBUTTON_SERVICE_UUID\n,\n \ncharTable\n,\n \nsizeof\n(\ncharTable\n)\n \n/\n \nsizeof\n(\nGattCharacteristic\n \n*\n));\n\n        \nble\n.\ngattServer\n().\naddService\n(\nbuttonService\n);\n\n    \n}\n\n\n    \nvoid\n \nupdateButtonState\n(\nbool\n \nnewState\n)\n \n{\n\n        \nble\n.\ngattServer\n().\nwrite\n(\nbuttonState\n.\ngetValueHandle\n(),\n \n(\nuint8_t\n \n*\n)\nnewState\n,\n \nsizeof\n(\nbool\n));\n\n    \n}\n\n\n\nprivate\n:\n\n    \nBLE\n                              \nble\n;\n\n    \nReadOnlyGattCharacteristic\nbool\n  \nbuttonState\n;\n\n\n};\n\n\n\n\n\n\n\u4e3b\u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff0c\u53ea\u8981\u6309\u94ae\u6309\u4e0b\u6216\u91ca\u653e\u5c31\u66f4\u65b0 Characteristic \u7684\u5c5e\u6027\u503c\uff1a\n\n\n#include\n \nevents/mbed_events.h\n\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n#include\n \nble/Gap.h\n\n\n#include\n \nButtonService.h\n\n\n\nDigitalOut\n  \nled1\n(\nLED1\n,\n \n1\n);\n\n\nInterruptIn\n \nbutton\n(\nBLE_BUTTON_PIN_NAME\n);\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n10\n \n*\n \n/* event size */\n \n32\n\n\n);\n\n\n\nconst\n \nstatic\n \nchar\n     \nDEVICE_NAME\n[]\n \n=\n \nButton\n;\n\n\nstatic\n \nconst\n \nuint16_t\n \nuuid16_list\n[]\n \n=\n \n{\nButtonService\n::\nBUTTON_SERVICE_UUID\n};\n\n\n\nButtonService\n \n*\nbuttonServicePtr\n;\n\n\n\nvoid\n \nbuttonPressedCallback\n(\nvoid\n)\n\n\n{\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n(\nbool\n)\n(\nbuttonServicePtr\n,\n \nButtonService\n::\nupdateButtonState\n),\n \ntrue\n);\n\n\n}\n\n\n\nvoid\n \nbuttonReleasedCallback\n(\nvoid\n)\n\n\n{\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n(\nbool\n)\n(\nbuttonServicePtr\n,\n \nButtonService\n::\nupdateButtonState\n),\n \nfalse\n);\n\n\n}\n\n\n\nvoid\n \ndisconnectionCallback\n(\nconst\n \nGap\n::\nDisconnectionCallbackParams_t\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n::\nInstance\n().\ngap\n().\nstartAdvertising\n();\n \n// restart advertising\n\n\n}\n\n\n\nvoid\n \nblinkCallback\n(\nvoid\n)\n\n\n{\n\n    \nled1\n \n=\n \n!\nled1\n;\n \n/* Do blinky on LED1 to indicate system aliveness. */\n\n\n}\n\n\n\nvoid\n \nonBleInitError\n(\nBLE\n \nble\n,\n \nble_error_t\n \nerror\n)\n\n\n{\n\n    \n/* Initialization error handling should go here */\n\n\n}\n\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n        \nble\n   \n=\n \nparams\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \nparams\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \n/* In case of error, forward the error handling to onBleInitError */\n\n        \nonBleInitError\n(\nble\n,\n \nerror\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n/* Ensure that it is the default instance of BLE */\n\n    \nif\n(\nble\n.\ngetInstanceID\n()\n \n!=\n \nBLE\n::\nDEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nble\n.\ngap\n().\nonDisconnection\n(\ndisconnectionCallback\n);\n\n\n    \nbutton\n.\nfall\n(\nbuttonPressedCallback\n);\n\n    \nbutton\n.\nrise\n(\nbuttonReleasedCallback\n);\n\n\n    \n/* Setup primary service. */\n\n    \nbuttonServicePtr\n \n=\n \nnew\n \nButtonService\n(\nble\n,\n \nfalse\n \n/* initial value for button pressed */\n);\n\n\n    \n/* setup advertising */\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nBREDR_NOT_SUPPORTED\n \n|\n \nGapAdvertisingData\n::\nLE_GENERAL_DISCOVERABLE\n);\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LIST_16BIT_SERVICE_IDS\n,\n \n(\nuint8_t\n \n*\n)\nuuid16_list\n,\n \nsizeof\n(\nuuid16_list\n));\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LOCAL_NAME\n,\n \n(\nuint8_t\n \n*\n)\nDEVICE_NAME\n,\n \nsizeof\n(\nDEVICE_NAME\n));\n\n    \nble\n.\ngap\n().\nsetAdvertisingType\n(\nGapAdvertisingParams\n::\nADV_CONNECTABLE_UNDIRECTED\n);\n\n    \nble\n.\ngap\n().\nsetAdvertisingInterval\n(\n1000\n);\n \n/* 1000ms. */\n\n    \nble\n.\ngap\n().\nstartAdvertising\n();\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nblinkCallback\n);\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_Button\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_Button\nElf2Bin: BLE_Button\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n192\n \n|\n     \n3\n \n|\n   \n47\n \n|\n\n\n|\n Misc                  \n|\n \n28761\n \n|\n  \n2488\n \n|\n  \n274\n \n|\n\n\n|\n drivers               \n|\n  \n1203\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16408\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n550\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n24011\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n80476\n \n|\n  \n2664\n \n|\n \n7684\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40900\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10348\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n83140\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Button.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_Button.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Button.hex\n\n\n\n\n\n\u9a8c\u8bc1\n\n\n\u5728 nRF52832-MDK \u7684 P25 \u5f15\u811a\u4e0a\u8fde\u63a5\u4e00\u4e2a\u8f7b\u89e6\u6309\u94ae\uff0c\u6309\u94ae\u6309\u4e0b\u65f6\uff0cP25 \u4e0b\u62c9\u5230\u4f4e\u7535\u5e73\uff1a\n\n\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907\uff0c\u53d1\u73b0\u4e00\u4e2a ServiceUUID \u4e3a \n0xA000\n \u7684\u6309\u94ae\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a UUID \u4e3a \n0xA001\n \u7684 Characteristic\uff0c\u8bfb\u53d6\u5176\u5c5e\u6027\u503c\uff0c\u5373\u53ef\u83b7\u5f97\u6309\u94ae\u7684\u72b6\u6001\uff1a\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\nmbed-os-example-ble/BLE_Button\n\n\nBluetooth Specifications\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Button"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_1", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u6309\u94ae"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_2", 
            "text": "\u672c\u4f8b\u5c06\u81ea\u5b9a\u4e49\u4e00\u4e2a UUID \u4e3a  0xA000  \u7684\u9996\u8981\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a UUID \u4e3a  0xA001  \u7684 Characteristic\uff0c\u901a\u8fc7\u8bfb\u53d6\u5176\u5c5e\u6027\u503c\u4fbf\u53ef\u4ee5\u83b7\u5f97\u6309\u94ae\u7684\u72b6\u6001\u3002   \u63d0\u793a  \u672c\u4f8b\u53ef\u4ee5\u4f5c\u4e3a\u5982\u4f55\u521b\u5efa BLE Service \u7684\u6a21\u677f\uff0c\u4f8b\u5982\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u8bfb\u53d6\u5176\u4ed6\u4f20\u611f\u5668\u6570\u503c\u7684 Service\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_3", 
            "text": "\u84dd\u7259\u8054\u76df \u6ca1\u6709\u5b9a\u4e49\u540d\u4e3a  Button  GATT Service\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u8be5\u670d\u52a1\uff1a  // ButtonService.h  class   ButtonService   {  public : \n     const   static   uint16_t   BUTTON_SERVICE_UUID                =   0xA000 ; \n     const   static   uint16_t   BUTTON_STATE_CHARACTERISTIC_UUID   =   0xA001 ; \n\n     ButtonService ( BLE   _ble ,   bool   buttonPressedInitial )   : \n         ble ( _ble ),   buttonState ( BUTTON_STATE_CHARACTERISTIC_UUID ,   buttonPressedInitial ,   GattCharacteristic :: BLE_GATT_CHAR_PROPERTIES_NOTIFY ) \n     { \n         GattCharacteristic   * charTable []   =   { buttonState }; \n         GattService           buttonService ( ButtonService :: BUTTON_SERVICE_UUID ,   charTable ,   sizeof ( charTable )   /   sizeof ( GattCharacteristic   * )); \n         ble . gattServer (). addService ( buttonService ); \n     } \n\n     void   updateButtonState ( bool   newState )   { \n         ble . gattServer (). write ( buttonState . getValueHandle (),   ( uint8_t   * ) newState ,   sizeof ( bool )); \n     }  private : \n     BLE                                ble ; \n     ReadOnlyGattCharacteristic bool    buttonState ;  };   \u4e3b\u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff0c\u53ea\u8981\u6309\u94ae\u6309\u4e0b\u6216\u91ca\u653e\u5c31\u66f4\u65b0 Characteristic \u7684\u5c5e\u6027\u503c\uff1a  #include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  #include   ble/Gap.h  #include   ButtonService.h  DigitalOut    led1 ( LED1 ,   1 );  InterruptIn   button ( BLE_BUTTON_PIN_NAME );  static   EventQueue   eventQueue ( \n     /* event count */   10   *   /* event size */   32  );  const   static   char       DEVICE_NAME []   =   Button ;  static   const   uint16_t   uuid16_list []   =   { ButtonService :: BUTTON_SERVICE_UUID };  ButtonService   * buttonServicePtr ;  void   buttonPressedCallback ( void )  { \n     eventQueue . call ( Callback void ( bool ) ( buttonServicePtr ,   ButtonService :: updateButtonState ),   true );  }  void   buttonReleasedCallback ( void )  { \n     eventQueue . call ( Callback void ( bool ) ( buttonServicePtr ,   ButtonService :: updateButtonState ),   false );  }  void   disconnectionCallback ( const   Gap :: DisconnectionCallbackParams_t   * params )  { \n     BLE :: Instance (). gap (). startAdvertising ();   // restart advertising  }  void   blinkCallback ( void )  { \n     led1   =   ! led1 ;   /* Do blinky on LED1 to indicate system aliveness. */  }  void   onBleInitError ( BLE   ble ,   ble_error_t   error )  { \n     /* Initialization error handling should go here */  }  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * params )  { \n     BLE          ble     =   params - ble ; \n     ble_error_t   error   =   params - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         /* In case of error, forward the error handling to onBleInitError */ \n         onBleInitError ( ble ,   error ); \n         return ; \n     } \n\n     /* Ensure that it is the default instance of BLE */ \n     if ( ble . getInstanceID ()   !=   BLE :: DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n     ble . gap (). onDisconnection ( disconnectionCallback ); \n\n     button . fall ( buttonPressedCallback ); \n     button . rise ( buttonReleasedCallback ); \n\n     /* Setup primary service. */ \n     buttonServicePtr   =   new   ButtonService ( ble ,   false   /* initial value for button pressed */ ); \n\n     /* setup advertising */ \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: BREDR_NOT_SUPPORTED   |   GapAdvertisingData :: LE_GENERAL_DISCOVERABLE ); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LIST_16BIT_SERVICE_IDS ,   ( uint8_t   * ) uuid16_list ,   sizeof ( uuid16_list )); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LOCAL_NAME ,   ( uint8_t   * ) DEVICE_NAME ,   sizeof ( DEVICE_NAME )); \n     ble . gap (). setAdvertisingType ( GapAdvertisingParams :: ADV_CONNECTABLE_UNDIRECTED ); \n     ble . gap (). setAdvertisingInterval ( 1000 );   /* 1000ms. */ \n     ble . gap (). startAdvertising ();  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     eventQueue . call_every ( 500 ,   blinkCallback ); \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_4", 
            "text": "$  cd  ./BLE_Button # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_Button\nElf2Bin: BLE_Button\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     192   |       3   |     47   |  |  Misc                   |   28761   |    2488   |    274   |  |  drivers                |    1203   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16408   |       5   |    540   |  |  hal                    |     550   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   24011   |     140   |   2200   |  |  Subtotals              |   80476   |    2664   |   7684   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40900  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10348  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  83140  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Button.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_Button.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Button.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_6", 
            "text": "\u5728 nRF52832-MDK \u7684 P25 \u5f15\u811a\u4e0a\u8fde\u63a5\u4e00\u4e2a\u8f7b\u89e6\u6309\u94ae\uff0c\u6309\u94ae\u6309\u4e0b\u65f6\uff0cP25 \u4e0b\u62c9\u5230\u4f4e\u7535\u5e73\uff1a   \u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907\uff0c\u53d1\u73b0\u4e00\u4e2a ServiceUUID \u4e3a  0xA000  \u7684\u6309\u94ae\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a UUID \u4e3a  0xA001  \u7684 Characteristic\uff0c\u8bfb\u53d6\u5176\u5c5e\u6027\u503c\uff0c\u5373\u53ef\u83b7\u5f97\u6309\u94ae\u7684\u72b6\u6001\uff1a   Enjoy !", 
            "title": "\u9a8c\u8bc1"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_7", 
            "text": "mbed BLE API \u6587\u6863  mbed-os-example-ble/BLE_Button  Bluetooth Specifications", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-button/#_8", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aEddystone \u76d1\u542c\u5668\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\nEddystone \u662f Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae\uff0c\u76f8\u6bd4 iBeacon\uff0cEddystone \u534f\u8bae\u89c4\u5b9a\u66f4\u52a0\u7075\u6d3b\u3001\u5f00\u653e\uff0c\u53ef\u4ee5\u517c\u5bb9 Android \u548c iOS \u8bbe\u5907\u3002\n\n\n\u66f4\u591a\u5173\u4e8e Eddystone \u534f\u8bae\u89c4\u8303\u53ef\u4ee5\u53c2\u8003\uff1a\nhttps://github.com/google/eddystone\n.\n\n\n\u672c\u4f8b\u5c06\u521b\u5efa\u4e00\u4e2a Eddystone \u76d1\u542c\u5668\uff0c\u7528\u4e8e\u76d1\u542c\u5176\u4ed6 Eddystone \u8bbe\u5907\u53d1\u51fa\u7684 URL\uff0c\u5e76\u901a\u8fc7\u4e32\u53e3\u5c06\u8fd9\u4e9b\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u672c\u4f8b\u9700\u8981\u989d\u5916\u7684\u84dd\u7259\u8bbe\u5907\u6765\u53d1\u9001 Eddystone-URL\uff0c\u4f8b\u5982\u989d\u5916\u7684 nRF52832-MDK \u6216\u8005 \u4e00\u53f0\u652f\u6301 BLE \u7684\u7b14\u8bb0\u672c(\u6211\u4eec\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u8ba9\u5176\u53d1\u51fa Eddystone-URL)\u3002\n\n\n\n\n\u5de5\u4f5c\u539f\u7406\n\n\n\u672c\u4f8b\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e86 BLE \u7684\u88ab\u52a8\u626b\u63cf\u529f\u80fd\uff0c\u4e3b\u8981\u7528\u6765\u63a5\u6536\u5bf9\u7aef\u8bbe\u5907\u7684\u5e7f\u64ad\u6570\u636e\u5305\uff0c\u4ece\u63a5\u6536\u5230\u7684\u5e7f\u64ad\u5305\u4e2d\u5224\u65ad\u662f\u5426\u6709 Eddystone-URL \u7684\u4fe1\u606f\uff0c\u6709\u5219\u5c06\u5176\u6253\u5370\u51fa\u6765\u3002\n\n\n\u4ee5\u4e0b\u4e3a\u88ab\u52a8\u626b\u63cf\u7684\u57fa\u672c\u6d41\u7a0b\uff1a\n\n\n\n\n\u626b\u63cf\u53c2\u6570\u4e2d\uff0c\u626b\u63cf\u95f4\u9694 (Scan interval) \u548c\u626b\u63cf\u7a97\u53e3 (Scan Window) \u662f\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u4eec\u51b3\u5b9a\u4e86\u63a7\u5236\u5668\u7684\u626b\u63cf\u9891\u7387\u548c\u626b\u63cf\u65f6\u95f4\u7684\u957f\u77ed\uff1a\n\n\n\n\n\u626b\u63cf\u95f4\u9694 \u2014\u2014 \u63a7\u5236\u5668\u95f4\u9694\u591a\u957f\u65f6\u95f4\u626b\u63cf\u4e00\u6b21\uff1b\n\n\n\u626b\u63cf\u7a97\u53e3 \u2014\u2014 \u6bcf\u4e00\u6b21\u626b\u63cf\u7684\u6301\u7eed\u65f6\u95f4\u3002\n\n\n\n\n\u4f8b\u5982\uff0c\u672c\u4f8b\u4e2d\u626b\u63cf\u95f4\u9694\u4e3a 1800 ms\uff0c\u626b\u63cf\u7a97\u53e3\u4e3a 1000ms\uff0c\u63a7\u5236\u5668\u7684\u626b\u63cf\u5360\u7a7a\u6bd4\u4e3a 56%\u3002\u7406\u8bba\u4e0a\u53ef\u6355\u83b7\u5230\u5b9a\u5411\u5e7f\u64ad\u6570\u636e\u5305\u7684\u6700\u4f4e\u5360\u7a7a\u6bd4\u4e3a 0.4%\uff0c\u626b\u63cf\u95f4\u9694\u8d8a\u957f\u3001\u5360\u7a7a\u6bd4\u8d8a\u4f4e\uff0c\u8d8a\u4e0d\u5bb9\u6613\u6355\u83b7\u5230\u5e7f\u64ad\u6570\u636e\u5305\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n\nstatic\n \nconst\n \nint\n \nURI_MAX_LENGTH\n \n=\n \n18\n;\n             \n// Maximum size of service data in ADV packets\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n16\n \n*\n \n/* event size */\n \n32\n\n\n);\n\n\n\nDigitalOut\n \nled1\n(\nLED1\n,\n \n1\n);\n\n\n\nvoid\n \nperiodicCallback\n(\nvoid\n)\n\n\n{\n\n    \nled1\n \n=\n \n!\nled1\n;\n \n/* Do blinky on LED1 while we\nre waiting for BLE events */\n\n\n}\n\n\n\nvoid\n \ndecodeURI\n(\nconst\n \nuint8_t\n*\n \nuriData\n,\n \nconst\n \nsize_t\n \nuriLen\n)\n\n\n{\n\n    \nconst\n \nchar\n \n*\nprefixes\n[]\n \n=\n \n{\n\n        \nhttp://www.\n,\n\n        \nhttps://www.\n,\n\n        \nhttp://\n,\n\n        \nhttps://\n,\n\n        \nurn:uuid:\n\n    \n};\n\n    \nconst\n \nsize_t\n \nNUM_PREFIXES\n \n=\n \nsizeof\n(\nprefixes\n)\n \n/\n \nsizeof\n(\nchar\n \n*\n);\n\n    \nconst\n \nchar\n \n*\nsuffixes\n[]\n \n=\n \n{\n\n        \n.com/\n,\n\n        \n.org/\n,\n\n        \n.edu/\n,\n\n        \n.net/\n,\n\n        \n.info/\n,\n\n        \n.biz/\n,\n\n        \n.gov/\n,\n\n        \n.com\n,\n\n        \n.org\n,\n\n        \n.edu\n,\n\n        \n.net\n,\n\n        \n.info\n,\n\n        \n.biz\n,\n\n        \n.gov\n\n    \n};\n\n    \nconst\n \nsize_t\n \nNUM_SUFFIXES\n \n=\n \nsizeof\n(\nsuffixes\n)\n \n/\n \nsizeof\n(\nchar\n \n*\n);\n\n\n    \nsize_t\n \nindex\n \n=\n \n0\n;\n\n\n    \n/* First byte is the URL Scheme. */\n\n    \nif\n \n(\nuriData\n[\nindex\n]\n \n \nNUM_PREFIXES\n)\n \n{\n\n        \nprintf\n(\n%s\n,\n \nprefixes\n[\nuriData\n[\nindex\n]]);\n\n        \nindex\n++\n;\n\n    \n}\n \nelse\n \n{\n\n        \nprintf\n(\nURL Scheme was not encoded!\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n/* From second byte onwards we can have a character or a suffix */\n\n    \nwhile\n(\nindex\n \n \nuriLen\n)\n \n{\n\n        \nif\n \n(\nuriData\n[\nindex\n]\n \n \nNUM_SUFFIXES\n)\n \n{\n\n            \nprintf\n(\n%s\n,\n \nsuffixes\n[\nuriData\n[\nindex\n]]);\n\n        \n}\n \nelse\n \n{\n\n            \nprintf\n(\n%c\n,\n \nuriData\n[\nindex\n]);\n\n        \n}\n\n        \nindex\n++\n;\n\n    \n}\n\n\n    \nprintf\n(\n\\n\\r\n);\n\n\n}\n\n\n\n/*\n\n\n * This function is called every time we scan an advertisement.\n\n\n */\n\n\nvoid\n \nadvertisementCallback\n(\nconst\n \nGap\n::\nAdvertisementCallbackParams_t\n \n*\nparams\n)\n\n\n{\n\n    \nstruct\n \nAdvertisingData_t\n \n{\n\n        \nuint8_t\n                        \nlength\n;\n \n/* doesn\nt include itself */\n\n        \nGapAdvertisingData\n::\nDataType_t\n \ndataType\n;\n\n        \nuint8_t\n                        \ndata\n[\n1\n];\n\n    \n}\n \nAdvDataPacket\n;\n\n\n    \nstruct\n \nApplicationData_t\n \n{\n\n        \nuint8_t\n \napplicationSpecificId\n[\n2\n];\n\n        \nuint8_t\n \nframeType\n;\n\n        \nuint8_t\n \nadvPowerLevels\n;\n\n        \nuint8_t\n \nuriData\n[\nURI_MAX_LENGTH\n];\n\n    \n}\n \nAppDataPacket\n;\n\n\n    \nconst\n \nuint8_t\n \nBEACON_UUID\n[\nsizeof\n(\nUUID\n::\nShortUUIDBytes_t\n)]\n \n=\n \n{\n0xAA\n,\n \n0xFE\n};\n\n    \nconst\n \nuint8_t\n \nFRAME_TYPE_URL\n                              \n=\n \n0x10\n;\n\n    \nconst\n \nuint8_t\n \nAPPLICATION_DATA_OFFSET\n                     \n=\n \nsizeof\n(\nApplicationData_t\n)\n \n+\n \nsizeof\n(\nAdvDataPacket\n.\ndataType\n)\n \n-\n \nsizeof\n(\nAppDataPacket\n.\nuriData\n);\n\n\n    \nAdvertisingData_t\n \n*\npAdvData\n;\n\n    \nsize_t\n \nindex\n \n=\n \n0\n;\n\n    \nwhile\n(\nindex\n \n \nparams\n-\nadvertisingDataLen\n)\n \n{\n\n        \npAdvData\n \n=\n \n(\nAdvertisingData_t\n \n*\n)\nparams\n-\nadvertisingData\n[\nindex\n];\n\n        \nif\n \n(\npAdvData\n-\ndataType\n \n==\n \nGapAdvertisingData\n::\nSERVICE_DATA\n)\n \n{\n\n            \nApplicationData_t\n \n*\npAppData\n \n=\n \n(\nApplicationData_t\n \n*\n)\n \npAdvData\n-\ndata\n;\n\n            \nif\n \n(\n!\nmemcmp\n(\npAppData\n-\napplicationSpecificId\n,\n \nBEACON_UUID\n,\n \nsizeof\n(\nBEACON_UUID\n))\n \n \n(\npAppData\n-\nframeType\n \n==\n \nFRAME_TYPE_URL\n))\n \n{\n\n                \ndecodeURI\n(\npAppData\n-\nuriData\n,\n \npAdvData\n-\nlength\n \n-\n \nAPPLICATION_DATA_OFFSET\n);\n\n                \nbreak\n;\n\n            \n}\n\n        \n}\n\n        \nindex\n \n+=\n \n(\npAdvData\n-\nlength\n \n+\n \n1\n);\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nonBleInitError\n(\nBLE\n \nble\n,\n \nble_error_t\n \nerror\n)\n\n\n{\n\n   \n/* Initialization error handling should go here */\n\n\n}\n\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n        \nble\n   \n=\n \nparams\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \nparams\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nonBleInitError\n(\nble\n,\n \nerror\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nif\n \n(\nble\n.\ngetInstanceID\n()\n \n!=\n \nBLE\n::\nDEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nble\n.\ngap\n().\nsetScanParams\n(\n1800\n \n/* scan interval */\n,\n \n1500\n \n/* scan window */\n);\n\n    \nble\n.\ngap\n().\nstartScan\n(\nadvertisementCallback\n);\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nperiodicCallback\n);\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_EddystoneObserver\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_EddystoneObserver\nElf2Bin: BLE_EddystoneObserver\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n165\n \n|\n     \n3\n \n|\n   \n47\n \n|\n\n\n|\n Misc                  \n|\n \n33600\n \n|\n  \n2488\n \n|\n  \n226\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16458\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n84491\n \n|\n  \n2664\n \n|\n \n7636\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40948\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10300\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n87155\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneObserver.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_EddystoneObserver.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneObserver.hex\n\n\n\n\n\n\u521b\u5efa Eddystone Beacon\n\n\n\u5982\u679c\u4f60\u624b\u4e0a\u6709\u591a\u4f59\u7684 nRF52832-MDK \u677f\u5b50\uff0c\u53ef\u4ee5\u53c2\u7167 \n\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aEddystone Beacon\n \u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a Eddystone Beacon \u8bbe\u5907\uff0c\u7528\u6765\u5e7f\u64ad Eddystone-URL \u4fe1\u606f\uff1a\n\n\n\n\n\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u627e\u4e00\u53f0\u652f\u6301 BLE \u7684\u7b14\u8bb0\u672c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a Eddystone Beacon \u6765\u5e7f\u64ad Eddystone-URL \u4fe1\u606f\uff1a\n\n\n# \u5b89\u88c5\u57fa\u4e8e node.js \u7684 eddystone-beacon\n\n$ npm install eddystone-beacon\n\n\n\n\n\n\u6e90\u4ee3\u7801\u4f4d\u4e8e \n./BLE_EddystoneObserver/eddystone-url.js\n\uff1a\n\n\n// eddystone-url.js\n\n\n\nvar\n \neddystoneBeacon\n \n=\n \nrequire\n(\neddystone-beacon\n);\n\n\n\neddystoneBeacon\n.\nadvertiseUrl\n(\nhttps://www.google.com\n);\n\n\n\n\n\n\nnode \u8fd0\u884c eddystone-url.js \u5f00\u59cb\u5e7f\u64ad\uff1a\n\n\n$ \ncd\n ./BLE_EddystoneObserver/\n\n$ node eddystone-url.js\n\n\n\n\n\n\u76d1\u542c\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u76d1\u542c\u5468\u56f4\u6709\u54ea\u4e9b Eddystone Beacon \u5728\u5e7f\u64ad\u6570\u636e\u3002\u4e32\u53e3\u7684\u4f7f\u7528\u8bf7\u53c2\u8003 \n\u9996\u6b21\u4f7f\u7528\n \u4e2d\u7684\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u4ee5 Mac OSX \u7cfb\u7edf\u4e3a\u4f8b\uff1a\n\n\n# \u6253\u5f00\u4e32\u53e3\uff0cmbed os \u9ed8\u8ba4\u7684\u4e32\u53e3\u6ce2\u7279\u7387\u4e3a 9600bps\n\n$ screen /dev/cu.usbmodem1422 \n9600\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\u6709\u4e24\u4e2a URL \u6b63\u5728\u88ab\u5e7f\u64ad\u51fa\u6765\uff1a\nhttps://google.com\n \u548c \nhttps://mbed.om\n.\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nEddystone \u534f\u8bae\u89c4\u8303\n\n\nmbed BLE API \u6587\u6863\n\n\nmbed-os-example-ble/BLE_EddystoneObserver\n\n\nBluetooth Specifications\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Eddystone Observer"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#eddystone", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aEddystone \u76d1\u542c\u5668"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_1", 
            "text": "Eddystone \u662f Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae\uff0c\u76f8\u6bd4 iBeacon\uff0cEddystone \u534f\u8bae\u89c4\u5b9a\u66f4\u52a0\u7075\u6d3b\u3001\u5f00\u653e\uff0c\u53ef\u4ee5\u517c\u5bb9 Android \u548c iOS \u8bbe\u5907\u3002  \u66f4\u591a\u5173\u4e8e Eddystone \u534f\u8bae\u89c4\u8303\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/google/eddystone .  \u672c\u4f8b\u5c06\u521b\u5efa\u4e00\u4e2a Eddystone \u76d1\u542c\u5668\uff0c\u7528\u4e8e\u76d1\u542c\u5176\u4ed6 Eddystone \u8bbe\u5907\u53d1\u51fa\u7684 URL\uff0c\u5e76\u901a\u8fc7\u4e32\u53e3\u5c06\u8fd9\u4e9b\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002   \u63d0\u793a  \u672c\u4f8b\u9700\u8981\u989d\u5916\u7684\u84dd\u7259\u8bbe\u5907\u6765\u53d1\u9001 Eddystone-URL\uff0c\u4f8b\u5982\u989d\u5916\u7684 nRF52832-MDK \u6216\u8005 \u4e00\u53f0\u652f\u6301 BLE \u7684\u7b14\u8bb0\u672c(\u6211\u4eec\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u8ba9\u5176\u53d1\u51fa Eddystone-URL)\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_2", 
            "text": "\u672c\u4f8b\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e86 BLE \u7684\u88ab\u52a8\u626b\u63cf\u529f\u80fd\uff0c\u4e3b\u8981\u7528\u6765\u63a5\u6536\u5bf9\u7aef\u8bbe\u5907\u7684\u5e7f\u64ad\u6570\u636e\u5305\uff0c\u4ece\u63a5\u6536\u5230\u7684\u5e7f\u64ad\u5305\u4e2d\u5224\u65ad\u662f\u5426\u6709 Eddystone-URL \u7684\u4fe1\u606f\uff0c\u6709\u5219\u5c06\u5176\u6253\u5370\u51fa\u6765\u3002  \u4ee5\u4e0b\u4e3a\u88ab\u52a8\u626b\u63cf\u7684\u57fa\u672c\u6d41\u7a0b\uff1a   \u626b\u63cf\u53c2\u6570\u4e2d\uff0c\u626b\u63cf\u95f4\u9694 (Scan interval) \u548c\u626b\u63cf\u7a97\u53e3 (Scan Window) \u662f\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u4eec\u51b3\u5b9a\u4e86\u63a7\u5236\u5668\u7684\u626b\u63cf\u9891\u7387\u548c\u626b\u63cf\u65f6\u95f4\u7684\u957f\u77ed\uff1a   \u626b\u63cf\u95f4\u9694 \u2014\u2014 \u63a7\u5236\u5668\u95f4\u9694\u591a\u957f\u65f6\u95f4\u626b\u63cf\u4e00\u6b21\uff1b  \u626b\u63cf\u7a97\u53e3 \u2014\u2014 \u6bcf\u4e00\u6b21\u626b\u63cf\u7684\u6301\u7eed\u65f6\u95f4\u3002   \u4f8b\u5982\uff0c\u672c\u4f8b\u4e2d\u626b\u63cf\u95f4\u9694\u4e3a 1800 ms\uff0c\u626b\u63cf\u7a97\u53e3\u4e3a 1000ms\uff0c\u63a7\u5236\u5668\u7684\u626b\u63cf\u5360\u7a7a\u6bd4\u4e3a 56%\u3002\u7406\u8bba\u4e0a\u53ef\u6355\u83b7\u5230\u5b9a\u5411\u5e7f\u64ad\u6570\u636e\u5305\u7684\u6700\u4f4e\u5360\u7a7a\u6bd4\u4e3a 0.4%\uff0c\u626b\u63cf\u95f4\u9694\u8d8a\u957f\u3001\u5360\u7a7a\u6bd4\u8d8a\u4f4e\uff0c\u8d8a\u4e0d\u5bb9\u6613\u6355\u83b7\u5230\u5e7f\u64ad\u6570\u636e\u5305\u3002", 
            "title": "\u5de5\u4f5c\u539f\u7406"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_3", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  static   const   int   URI_MAX_LENGTH   =   18 ;               // Maximum size of service data in ADV packets  static   EventQueue   eventQueue ( \n     /* event count */   16   *   /* event size */   32  );  DigitalOut   led1 ( LED1 ,   1 );  void   periodicCallback ( void )  { \n     led1   =   ! led1 ;   /* Do blinky on LED1 while we re waiting for BLE events */  }  void   decodeURI ( const   uint8_t *   uriData ,   const   size_t   uriLen )  { \n     const   char   * prefixes []   =   { \n         http://www. , \n         https://www. , \n         http:// , \n         https:// , \n         urn:uuid: \n     }; \n     const   size_t   NUM_PREFIXES   =   sizeof ( prefixes )   /   sizeof ( char   * ); \n     const   char   * suffixes []   =   { \n         .com/ , \n         .org/ , \n         .edu/ , \n         .net/ , \n         .info/ , \n         .biz/ , \n         .gov/ , \n         .com , \n         .org , \n         .edu , \n         .net , \n         .info , \n         .biz , \n         .gov \n     }; \n     const   size_t   NUM_SUFFIXES   =   sizeof ( suffixes )   /   sizeof ( char   * ); \n\n     size_t   index   =   0 ; \n\n     /* First byte is the URL Scheme. */ \n     if   ( uriData [ index ]     NUM_PREFIXES )   { \n         printf ( %s ,   prefixes [ uriData [ index ]]); \n         index ++ ; \n     }   else   { \n         printf ( URL Scheme was not encoded! ); \n         return ; \n     } \n\n     /* From second byte onwards we can have a character or a suffix */ \n     while ( index     uriLen )   { \n         if   ( uriData [ index ]     NUM_SUFFIXES )   { \n             printf ( %s ,   suffixes [ uriData [ index ]]); \n         }   else   { \n             printf ( %c ,   uriData [ index ]); \n         } \n         index ++ ; \n     } \n\n     printf ( \\n\\r );  }  /*   * This function is called every time we scan an advertisement.   */  void   advertisementCallback ( const   Gap :: AdvertisementCallbackParams_t   * params )  { \n     struct   AdvertisingData_t   { \n         uint8_t                          length ;   /* doesn t include itself */ \n         GapAdvertisingData :: DataType_t   dataType ; \n         uint8_t                          data [ 1 ]; \n     }   AdvDataPacket ; \n\n     struct   ApplicationData_t   { \n         uint8_t   applicationSpecificId [ 2 ]; \n         uint8_t   frameType ; \n         uint8_t   advPowerLevels ; \n         uint8_t   uriData [ URI_MAX_LENGTH ]; \n     }   AppDataPacket ; \n\n     const   uint8_t   BEACON_UUID [ sizeof ( UUID :: ShortUUIDBytes_t )]   =   { 0xAA ,   0xFE }; \n     const   uint8_t   FRAME_TYPE_URL                                =   0x10 ; \n     const   uint8_t   APPLICATION_DATA_OFFSET                       =   sizeof ( ApplicationData_t )   +   sizeof ( AdvDataPacket . dataType )   -   sizeof ( AppDataPacket . uriData ); \n\n     AdvertisingData_t   * pAdvData ; \n     size_t   index   =   0 ; \n     while ( index     params - advertisingDataLen )   { \n         pAdvData   =   ( AdvertisingData_t   * ) params - advertisingData [ index ]; \n         if   ( pAdvData - dataType   ==   GapAdvertisingData :: SERVICE_DATA )   { \n             ApplicationData_t   * pAppData   =   ( ApplicationData_t   * )   pAdvData - data ; \n             if   ( ! memcmp ( pAppData - applicationSpecificId ,   BEACON_UUID ,   sizeof ( BEACON_UUID ))     ( pAppData - frameType   ==   FRAME_TYPE_URL ))   { \n                 decodeURI ( pAppData - uriData ,   pAdvData - length   -   APPLICATION_DATA_OFFSET ); \n                 break ; \n             } \n         } \n         index   +=   ( pAdvData - length   +   1 ); \n     }  }  void   onBleInitError ( BLE   ble ,   ble_error_t   error )  { \n    /* Initialization error handling should go here */  }  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * params )  { \n     BLE          ble     =   params - ble ; \n     ble_error_t   error   =   params - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         onBleInitError ( ble ,   error ); \n         return ; \n     } \n\n     if   ( ble . getInstanceID ()   !=   BLE :: DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n     ble . gap (). setScanParams ( 1800   /* scan interval */ ,   1500   /* scan window */ ); \n     ble . gap (). startScan ( advertisementCallback );  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     eventQueue . call_every ( 500 ,   periodicCallback ); \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_4", 
            "text": "$  cd  ./BLE_EddystoneObserver # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_EddystoneObserver\nElf2Bin: BLE_EddystoneObserver\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     165   |       3   |     47   |  |  Misc                   |   33600   |    2488   |    226   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16458   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   84491   |    2664   |   7636   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40948  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10300  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  87155  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneObserver.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_EddystoneObserver.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneObserver.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#eddystone-beacon", 
            "text": "\u5982\u679c\u4f60\u624b\u4e0a\u6709\u591a\u4f59\u7684 nRF52832-MDK \u677f\u5b50\uff0c\u53ef\u4ee5\u53c2\u7167  \u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aEddystone Beacon  \u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a Eddystone Beacon \u8bbe\u5907\uff0c\u7528\u6765\u5e7f\u64ad Eddystone-URL \u4fe1\u606f\uff1a   \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u627e\u4e00\u53f0\u652f\u6301 BLE \u7684\u7b14\u8bb0\u672c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a Eddystone Beacon \u6765\u5e7f\u64ad Eddystone-URL \u4fe1\u606f\uff1a  # \u5b89\u88c5\u57fa\u4e8e node.js \u7684 eddystone-beacon \n$ npm install eddystone-beacon  \u6e90\u4ee3\u7801\u4f4d\u4e8e  ./BLE_EddystoneObserver/eddystone-url.js \uff1a  // eddystone-url.js  var   eddystoneBeacon   =   require ( eddystone-beacon );  eddystoneBeacon . advertiseUrl ( https://www.google.com );   node \u8fd0\u884c eddystone-url.js \u5f00\u59cb\u5e7f\u64ad\uff1a  $  cd  ./BLE_EddystoneObserver/\n\n$ node eddystone-url.js", 
            "title": "\u521b\u5efa Eddystone Beacon"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_6", 
            "text": "\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u76d1\u542c\u5468\u56f4\u6709\u54ea\u4e9b Eddystone Beacon \u5728\u5e7f\u64ad\u6570\u636e\u3002\u4e32\u53e3\u7684\u4f7f\u7528\u8bf7\u53c2\u8003  \u9996\u6b21\u4f7f\u7528  \u4e2d\u7684\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u4ee5 Mac OSX \u7cfb\u7edf\u4e3a\u4f8b\uff1a  # \u6253\u5f00\u4e32\u53e3\uff0cmbed os \u9ed8\u8ba4\u7684\u4e32\u53e3\u6ce2\u7279\u7387\u4e3a 9600bps \n$ screen /dev/cu.usbmodem1422  9600  \n\n\u53ef\u4ee5\u53d1\u73b0\u6709\u4e24\u4e2a URL \u6b63\u5728\u88ab\u5e7f\u64ad\u51fa\u6765\uff1a https://google.com  \u548c  https://mbed.om .   Enjoy !", 
            "title": "\u76d1\u542c"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_7", 
            "text": "Eddystone \u534f\u8bae\u89c4\u8303  mbed BLE API \u6587\u6863  mbed-os-example-ble/BLE_EddystoneObserver  Bluetooth Specifications", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneobserver/#_8", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aEddystone Beacon\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\nEddystone \u662f Google \u53d1\u5e03\u7684\u4e00\u6b3e\u8de8\u5e73\u53f0\u7684\u5f00\u6e90\u84dd\u7259\u4f4e\u529f\u8017\uff08Bluetooth Low Energy\uff0cBLE\uff09Beacon \u6807\u51c6\uff0c\u5176\u76ee\u6807\u5728\u4e8e\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a\u9c81\u68d2\u3001\u53ef\u6269\u5c55\u7684 Beacon \u6807\u51c6\uff0c\u5e76\u8bd5\u56fe\u628a\u5546\u4eba\u3001\u5f00\u53d1\u8005\u548c\u5236\u9020\u5546\u96c6\u5408\u5728\u4e00\u8d77\uff0c\u5efa\u7acb\u8d77\u4e00\u4e2a\u5b8c\u5584\u7684 Beacon \u751f\u6001\u7cfb\u7edf\u3002\n\n\nEddystone \u652f\u6301\u901a\u7528\u552f\u4e00\u8bc6\u522b\u7801\uff08Universally Unique Identifier\uff0cUUID\uff09\u3001URL\u94fe\u63a5\u3001\u4e34\u65f6\u6807\u8bc6\uff08Ephemeral Identifiers\uff0cEID\uff09\u4ee5\u53ca\u9065\u6d4b\u6570\u636e\u7b49\u56db\u79cd\u6846\u67b6\u7c7b\u578b\uff1a\n\n\n\n\n\n\nEddystone-UID\n: \u5e7f\u64ad 16 \u5b57\u8282\u7684 Beacon ID\uff0c\u4e0e iBeacon \u7c7b\u4f3c\uff1b\n\n\n\n\n\n\nEddystone-URL\n: \u5e7f\u64ad\u4f7f\u7528\u538b\u7f29\u7f16\u7801\u683c\u5f0f\u7684 URL\uff0c\u6bd4 UID \u66f4\u52a0\u7b80\u5355\u3001\u76f4\u63a5\uff1b\n\n\n\n\n\n\nEddystone-EID\n\uff1a\u5e7f\u64ad\u52a0\u5bc6\u8fc7\u7684\u4e34\u65f6\u6807\u8bc6\uff0c\u53ea\u6709\u7ecf\u8fc7\u6388\u6743\u7684\u8bbe\u5907\u624d\u80fd\u8bfb\u53d6\u4fe1\u606f\uff1b\n\n\n\n\n\n\nEddystone-TLM\n: \u5e7f\u64ad\u9065\u6d4b\u6570\u636e\uff0c\u7528\u4e8e\u7ba1\u7406\u5458\u638c\u63e1 Beacon \u8bbe\u5907\u7684\u72b6\u6001\uff0c\u5982\u7535\u6c60\u7535\u91cf\u3001\u6e29\u5ea6\u7b49\u7b49\u3002\n\n\n\n\n\n\n\u66f4\u591a\u5173\u4e8e Eddystone \u534f\u8bae\u89c4\u8303\u53ef\u4ee5\u53c2\u8003\uff1a\nhttps://github.com/google/eddystone\n.\n\n\n\u672c\u4f8b\u5c06\u521b\u5efa\u80fd\u591f\u5e7f\u64ad Eddystone-UID, Eddystone-URL, Eddystone-TLM \u4e09\u79cd\u6570\u636e\u7684 Eddystone Beacon \u8bbe\u5907\u3002\n\n\n\u4e3b\u8981\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n#include\n \nEddystoneService.h\n\n\n\n#include\n \nPersistentStorageHelper/ConfigParamsPersistence.h\n\n\n\nEddystoneService\n \n*\neddyServicePtr\n;\n\n\n\n/* Duration after power-on that config service is available. */\n\n\nstatic\n \nconst\n \nint\n \nCONFIG_ADVERTISEMENT_TIMEOUT_SECONDS\n \n=\n \n30\n;\n\n\n\n/* Default UID frame data */\n\n\nstatic\n \nconst\n \nUIDNamespaceID_t\n \nuidNamespaceID\n \n=\n \n{\n0x00\n,\n \n0x11\n,\n \n0x22\n,\n \n0x33\n,\n \n0x44\n,\n \n0x55\n,\n \n0x66\n,\n \n0x77\n,\n \n0x88\n,\n \n0x99\n};\n\n\nstatic\n \nconst\n \nUIDInstanceID_t\n  \nuidInstanceID\n  \n=\n \n{\n0xAA\n,\n \n0xBB\n,\n \n0xCC\n,\n \n0xDD\n,\n \n0xEE\n,\n \n0xFF\n};\n\n\n\n/* Default version in TLM frame */\n\n\nstatic\n \nconst\n \nuint8_t\n \ntlmVersion\n \n=\n \n0x00\n;\n\n\n\n/* Values for ADV packets related to firmware levels, calibrated based on measured values at 1m */\n\n\nstatic\n \nconst\n \nPowerLevels_t\n \ndefaultAdvPowerLevels\n \n=\n \n{\n-\n47\n,\n \n-\n33\n,\n \n-\n21\n,\n \n-\n13\n};\n\n\n/* Values for radio power levels, provided by manufacturer. */\n\n\nstatic\n \nconst\n \nPowerLevels_t\n \nradioPowerLevels\n      \n=\n \n{\n-\n30\n,\n \n-\n16\n,\n \n-\n4\n,\n \n4\n};\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n16\n \n*\n \n/* event size */\n \n32\n\n\n);\n\n\n\nDigitalOut\n \nled\n(\nLED1\n,\n \n1\n);\n\n\n\n/**\n\n\n * Callback triggered upon a disconnection event.\n\n\n */\n\n\nstatic\n \nvoid\n \ndisconnectionCallback\n(\nconst\n \nGap\n::\nDisconnectionCallbackParams_t\n \n*\ncbParams\n)\n\n\n{\n\n    \n(\nvoid\n)\n \ncbParams\n;\n\n    \nBLE\n::\nInstance\n().\ngap\n().\nstartAdvertising\n();\n\n\n}\n\n\n\n/**\n\n\n * Callback triggered some time after application started to switch to beacon mode.\n\n\n */\n\n\nstatic\n \nvoid\n \ntimeout\n(\nvoid\n)\n\n\n{\n\n    \nGap\n::\nGapState_t\n \nstate\n;\n\n    \nstate\n \n=\n \nBLE\n::\nInstance\n().\ngap\n().\ngetState\n();\n\n    \nif\n \n(\n!\nstate\n.\nconnected\n)\n \n{\n \n/* don\nt switch if we\nre in a connected state. */\n\n        \neddyServicePtr\n-\nstartBeaconService\n();\n\n        \nEddystoneService\n::\nEddystoneParams_t\n \nparams\n;\n\n        \neddyServicePtr\n-\ngetEddystoneParams\n(\nparams\n);\n\n        \nsaveEddystoneServiceConfigParams\n(\nparams\n);\n\n    \n}\n \nelse\n \n{\n\n        \neventQueue\n.\ncall_in\n(\nCONFIG_ADVERTISEMENT_TIMEOUT_SECONDS\n \n*\n \n1000\n,\n \ntimeout\n);\n\n    \n}\n\n\n}\n\n\n\nstatic\n \nvoid\n \nblinky\n(\nvoid\n)\n\n\n{\n\n    \nled\n \n=\n \n!\nled\n;\n\n\n}\n\n\n\nstatic\n \nvoid\n \nonBleInitError\n(\nBLE\n::\nInitializationCompleteCallbackContext\n*\n \ninitContext\n)\n\n\n{\n\n    \n/* Initialization error handling goes here... */\n\n    \n(\nvoid\n)\n \ninitContext\n;\n\n\n}\n\n\n\nstatic\n \nvoid\n \ninitializeEddystoneToDefaults\n(\nBLE\n \nble\n)\n\n\n{\n\n    \n/* Set everything to defaults */\n\n    \neddyServicePtr\n \n=\n \nnew\n \nEddystoneService\n(\nble\n,\n \ndefaultAdvPowerLevels\n,\n \nradioPowerLevels\n,\n \neventQueue\n);\n\n\n    \n/* Set default URL, UID and TLM frame data if not initialized through the config service */\n\n    \nconst\n \nchar\n*\n \nurl\n \n=\n \nYOTTA_CFG_EDDYSTONE_DEFAULT_URL\n;\n\n    \neddyServicePtr\n-\nsetURLData\n(\nurl\n);\n\n    \neddyServicePtr\n-\nsetUIDData\n(\nuidNamespaceID\n,\n \nuidInstanceID\n);\n\n    \neddyServicePtr\n-\nsetTLMData\n(\ntlmVersion\n);\n\n\n}\n\n\n\nstatic\n \nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n*\n \ninitContext\n)\n\n\n{\n\n    \nBLE\n         \nble\n  \n=\n \ninitContext\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \ninitContext\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nonBleInitError\n(\ninitContext\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nble\n.\ngap\n().\nonDisconnection\n(\ndisconnectionCallback\n);\n\n\n    \nEddystoneService\n::\nEddystoneParams_t\n \nparams\n;\n\n    \nif\n \n(\nloadEddystoneServiceConfigParams\n(\nparams\n))\n \n{\n\n        \neddyServicePtr\n \n=\n \nnew\n \nEddystoneService\n(\nble\n,\n \nparams\n,\n \nradioPowerLevels\n,\n \neventQueue\n);\n\n    \n}\n \nelse\n \n{\n\n        \ninitializeEddystoneToDefaults\n(\nble\n);\n\n    \n}\n\n\n    \n/* Start Eddystone in config mode */\n\n   \neddyServicePtr\n-\nstartConfigService\n();\n\n\n   \neventQueue\n.\ncall_in\n(\nCONFIG_ADVERTISEMENT_TIMEOUT_SECONDS\n \n*\n \n1000\n,\n \ntimeout\n);\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \n/* Tell standard C library to not allocate large buffers for these streams */\n\n    \nsetbuf\n(\nstdout\n,\n \nNULL\n);\n\n    \nsetbuf\n(\nstderr\n,\n \nNULL\n);\n\n    \nsetbuf\n(\nstdin\n,\n \nNULL\n);\n\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nblinky\n);\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_EddystoneService\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_EddystoneService\nElf2Bin: BLE_EddystoneService\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n184\n \n|\n     \n3\n \n|\n   \n43\n \n|\n\n\n|\n Misc                  \n|\n \n35812\n \n|\n  \n2488\n \n|\n  \n230\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n52\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1416\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16472\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1581\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n86961\n \n|\n  \n2664\n \n|\n \n7636\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40948\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10300\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n89625\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneService.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_EddystoneService.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneService.hex\n\n\n\n\n\n\u9a8c\u8bc1\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907 \nEDDYSTONE CONFIG\n\uff0c\u5c06\u5176 ServiceData \u8bbe\u7f6e\u4e3a Eddystone \u683c\u5f0f\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u8bbe\u5907\u5728\u8f6e\u6d41\u5e7f\u64ad\u4e09\u79cd\u6570\u636e\uff1a\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nEddystone \u534f\u8bae\u89c4\u8303\n\n\nmbed BLE API \u6587\u6863\n\n\nmbed-os-example-ble/BLE_EddystoneService\n\n\nBluetooth Specifications\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Eddystone Service"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#eddystone-beacon", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aEddystone Beacon"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_1", 
            "text": "Eddystone \u662f Google \u53d1\u5e03\u7684\u4e00\u6b3e\u8de8\u5e73\u53f0\u7684\u5f00\u6e90\u84dd\u7259\u4f4e\u529f\u8017\uff08Bluetooth Low Energy\uff0cBLE\uff09Beacon \u6807\u51c6\uff0c\u5176\u76ee\u6807\u5728\u4e8e\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a\u9c81\u68d2\u3001\u53ef\u6269\u5c55\u7684 Beacon \u6807\u51c6\uff0c\u5e76\u8bd5\u56fe\u628a\u5546\u4eba\u3001\u5f00\u53d1\u8005\u548c\u5236\u9020\u5546\u96c6\u5408\u5728\u4e00\u8d77\uff0c\u5efa\u7acb\u8d77\u4e00\u4e2a\u5b8c\u5584\u7684 Beacon \u751f\u6001\u7cfb\u7edf\u3002  Eddystone \u652f\u6301\u901a\u7528\u552f\u4e00\u8bc6\u522b\u7801\uff08Universally Unique Identifier\uff0cUUID\uff09\u3001URL\u94fe\u63a5\u3001\u4e34\u65f6\u6807\u8bc6\uff08Ephemeral Identifiers\uff0cEID\uff09\u4ee5\u53ca\u9065\u6d4b\u6570\u636e\u7b49\u56db\u79cd\u6846\u67b6\u7c7b\u578b\uff1a    Eddystone-UID : \u5e7f\u64ad 16 \u5b57\u8282\u7684 Beacon ID\uff0c\u4e0e iBeacon \u7c7b\u4f3c\uff1b    Eddystone-URL : \u5e7f\u64ad\u4f7f\u7528\u538b\u7f29\u7f16\u7801\u683c\u5f0f\u7684 URL\uff0c\u6bd4 UID \u66f4\u52a0\u7b80\u5355\u3001\u76f4\u63a5\uff1b    Eddystone-EID \uff1a\u5e7f\u64ad\u52a0\u5bc6\u8fc7\u7684\u4e34\u65f6\u6807\u8bc6\uff0c\u53ea\u6709\u7ecf\u8fc7\u6388\u6743\u7684\u8bbe\u5907\u624d\u80fd\u8bfb\u53d6\u4fe1\u606f\uff1b    Eddystone-TLM : \u5e7f\u64ad\u9065\u6d4b\u6570\u636e\uff0c\u7528\u4e8e\u7ba1\u7406\u5458\u638c\u63e1 Beacon \u8bbe\u5907\u7684\u72b6\u6001\uff0c\u5982\u7535\u6c60\u7535\u91cf\u3001\u6e29\u5ea6\u7b49\u7b49\u3002    \u66f4\u591a\u5173\u4e8e Eddystone \u534f\u8bae\u89c4\u8303\u53ef\u4ee5\u53c2\u8003\uff1a https://github.com/google/eddystone .  \u672c\u4f8b\u5c06\u521b\u5efa\u80fd\u591f\u5e7f\u64ad Eddystone-UID, Eddystone-URL, Eddystone-TLM \u4e09\u79cd\u6570\u636e\u7684 Eddystone Beacon \u8bbe\u5907\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_2", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  #include   EddystoneService.h  #include   PersistentStorageHelper/ConfigParamsPersistence.h  EddystoneService   * eddyServicePtr ;  /* Duration after power-on that config service is available. */  static   const   int   CONFIG_ADVERTISEMENT_TIMEOUT_SECONDS   =   30 ;  /* Default UID frame data */  static   const   UIDNamespaceID_t   uidNamespaceID   =   { 0x00 ,   0x11 ,   0x22 ,   0x33 ,   0x44 ,   0x55 ,   0x66 ,   0x77 ,   0x88 ,   0x99 };  static   const   UIDInstanceID_t    uidInstanceID    =   { 0xAA ,   0xBB ,   0xCC ,   0xDD ,   0xEE ,   0xFF };  /* Default version in TLM frame */  static   const   uint8_t   tlmVersion   =   0x00 ;  /* Values for ADV packets related to firmware levels, calibrated based on measured values at 1m */  static   const   PowerLevels_t   defaultAdvPowerLevels   =   { - 47 ,   - 33 ,   - 21 ,   - 13 };  /* Values for radio power levels, provided by manufacturer. */  static   const   PowerLevels_t   radioPowerLevels        =   { - 30 ,   - 16 ,   - 4 ,   4 };  static   EventQueue   eventQueue ( \n     /* event count */   16   *   /* event size */   32  );  DigitalOut   led ( LED1 ,   1 );  /**   * Callback triggered upon a disconnection event.   */  static   void   disconnectionCallback ( const   Gap :: DisconnectionCallbackParams_t   * cbParams )  { \n     ( void )   cbParams ; \n     BLE :: Instance (). gap (). startAdvertising ();  }  /**   * Callback triggered some time after application started to switch to beacon mode.   */  static   void   timeout ( void )  { \n     Gap :: GapState_t   state ; \n     state   =   BLE :: Instance (). gap (). getState (); \n     if   ( ! state . connected )   {   /* don t switch if we re in a connected state. */ \n         eddyServicePtr - startBeaconService (); \n         EddystoneService :: EddystoneParams_t   params ; \n         eddyServicePtr - getEddystoneParams ( params ); \n         saveEddystoneServiceConfigParams ( params ); \n     }   else   { \n         eventQueue . call_in ( CONFIG_ADVERTISEMENT_TIMEOUT_SECONDS   *   1000 ,   timeout ); \n     }  }  static   void   blinky ( void )  { \n     led   =   ! led ;  }  static   void   onBleInitError ( BLE :: InitializationCompleteCallbackContext *   initContext )  { \n     /* Initialization error handling goes here... */ \n     ( void )   initContext ;  }  static   void   initializeEddystoneToDefaults ( BLE   ble )  { \n     /* Set everything to defaults */ \n     eddyServicePtr   =   new   EddystoneService ( ble ,   defaultAdvPowerLevels ,   radioPowerLevels ,   eventQueue ); \n\n     /* Set default URL, UID and TLM frame data if not initialized through the config service */ \n     const   char *   url   =   YOTTA_CFG_EDDYSTONE_DEFAULT_URL ; \n     eddyServicePtr - setURLData ( url ); \n     eddyServicePtr - setUIDData ( uidNamespaceID ,   uidInstanceID ); \n     eddyServicePtr - setTLMData ( tlmVersion );  }  static   void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext *   initContext )  { \n     BLE           ble    =   initContext - ble ; \n     ble_error_t   error   =   initContext - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         onBleInitError ( initContext ); \n         return ; \n     } \n\n     ble . gap (). onDisconnection ( disconnectionCallback ); \n\n     EddystoneService :: EddystoneParams_t   params ; \n     if   ( loadEddystoneServiceConfigParams ( params ))   { \n         eddyServicePtr   =   new   EddystoneService ( ble ,   params ,   radioPowerLevels ,   eventQueue ); \n     }   else   { \n         initializeEddystoneToDefaults ( ble ); \n     } \n\n     /* Start Eddystone in config mode */ \n    eddyServicePtr - startConfigService (); \n\n    eventQueue . call_in ( CONFIG_ADVERTISEMENT_TIMEOUT_SECONDS   *   1000 ,   timeout );  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     /* Tell standard C library to not allocate large buffers for these streams */ \n     setbuf ( stdout ,   NULL ); \n     setbuf ( stderr ,   NULL ); \n     setbuf ( stdin ,   NULL ); \n\n     eventQueue . call_every ( 500 ,   blinky ); \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n     return   0 ;  }", 
            "title": "\u4e3b\u8981\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_3", 
            "text": "$  cd  ./BLE_EddystoneService # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_EddystoneService\nElf2Bin: BLE_EddystoneService\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     184   |       3   |     43   |  |  Misc                   |   35812   |    2488   |    230   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      52   |       0   |      0   |  |  events/equeue          |    1416   |       0   |     61   |  |  features/FEATURE_BLE   |   16472   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1581   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   86961   |    2664   |   7636   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40948  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10300  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  89625  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneService.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_EddystoneService.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_EddystoneService.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_5", 
            "text": "\u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907  EDDYSTONE CONFIG \uff0c\u5c06\u5176 ServiceData \u8bbe\u7f6e\u4e3a Eddystone \u683c\u5f0f\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u8bbe\u5907\u5728\u8f6e\u6d41\u5e7f\u64ad\u4e09\u79cd\u6570\u636e\uff1a   Enjoy !", 
            "title": "\u9a8c\u8bc1"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_6", 
            "text": "Eddystone \u534f\u8bae\u89c4\u8303  mbed BLE API \u6587\u6863  mbed-os-example-ble/BLE_EddystoneService  Bluetooth Specifications", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-eddystoneservice/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aGAP Button\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u4f60\u53ef\u80fd\u5df2\u7ecf\u8bd5\u9a8c\u8fc7\u524d\u9762\u4ecb\u7ecd\u7684 \nBLE Button\n \u793a\u4f8b\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5176\u5b9e\u662f\u9700\u8981\u5148\u5efa\u7acb GATT \u8fde\u63a5\uff0c\u7136\u540e\u518d\u53bb\u8bfb\u53d6 Button \u670d\u52a1\u91cc\u7684 Characteristic \u5c5e\u6027\u503c\u3002\n\n\n\u672c\u4f8b\u901a\u8fc7\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u6765\u83b7\u53d6\u6309\u94ae\u7684\u72b6\u6001\uff0c\u53ea\u8981\u6309\u94ae\u72b6\u6001\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u5c06\u6309\u952e\u6b21\u6570\u653e\u5230\u5e7f\u64ad\u6570\u636e\u5305\u4e2d\u53d1\u9001\u51fa\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u65e0\u9700\u5efa\u7acb\u8fde\u63a5\u7684\u6309\u94ae\u793a\u4f8b\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n\nDigitalOut\n  \nled1\n(\nLED1\n,\n \n1\n);\n\n\nInterruptIn\n \nbutton\n(\nBLE_BUTTON_PIN_NAME\n);\n\n\nuint8_t\n \ncnt\n;\n\n\n\n// Change your device name below\n\n\nconst\n \nchar\n \nDEVICE_NAME\n[]\n \n=\n \nGAPButton\n;\n\n\n\n/* We can arbiturarily choose the GAPButton service UUID to be 0xAA00\n\n\n * as long as it does not overlap with the UUIDs defined here:\n\n\n * https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx */\n\n\n#define GAPButtonUUID 0xAA00\n\n\nconst\n \nuint16_t\n \nuuid16_list\n[]\n \n=\n \n{\nGAPButtonUUID\n};\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n16\n \n*\n \n/* event size */\n \n32\n\n\n);\n\n\n\nvoid\n \nprint_error\n(\nble_error_t\n \nerror\n,\n \nconst\n \nchar\n*\n \nmsg\n)\n\n\n{\n\n    \nprintf\n(\n%s: \n,\n \nmsg\n);\n\n    \nswitch\n(\nerror\n)\n \n{\n\n        \ncase\n \nBLE_ERROR_NONE\n:\n\n            \nprintf\n(\nBLE_ERROR_NONE: No error\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_BUFFER_OVERFLOW\n:\n\n            \nprintf\n(\nBLE_ERROR_BUFFER_OVERFLOW: The requested action would cause a buffer overflow and has been aborted\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_NOT_IMPLEMENTED\n:\n\n            \nprintf\n(\nBLE_ERROR_NOT_IMPLEMENTED: Requested a feature that isn\nt yet implement or isn\nt supported by the target HW\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_PARAM_OUT_OF_RANGE\n:\n\n            \nprintf\n(\nBLE_ERROR_PARAM_OUT_OF_RANGE: One of the supplied parameters is outside the valid range\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_INVALID_PARAM\n:\n\n            \nprintf\n(\nBLE_ERROR_INVALID_PARAM: One of the supplied parameters is invalid\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_STACK_BUSY\n:\n\n            \nprintf\n(\nBLE_STACK_BUSY: The stack is busy\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_INVALID_STATE\n:\n\n            \nprintf\n(\nBLE_ERROR_INVALID_STATE: Invalid state\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_NO_MEM\n:\n\n            \nprintf\n(\nBLE_ERROR_NO_MEM: Out of Memory\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_OPERATION_NOT_PERMITTED\n:\n\n            \nprintf\n(\nBLE_ERROR_OPERATION_NOT_PERMITTED\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_INITIALIZATION_INCOMPLETE\n:\n\n            \nprintf\n(\nBLE_ERROR_INITIALIZATION_INCOMPLETE\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_ALREADY_INITIALIZED\n:\n\n            \nprintf\n(\nBLE_ERROR_ALREADY_INITIALIZED\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_UNSPECIFIED\n:\n\n            \nprintf\n(\nBLE_ERROR_UNSPECIFIED: Unknown error\n);\n\n            \nbreak\n;\n\n        \ncase\n \nBLE_ERROR_INTERNAL_STACK_FAILURE\n:\n\n            \nprintf\n(\nBLE_ERROR_INTERNAL_STACK_FAILURE: internal stack faillure\n);\n\n            \nbreak\n;\n\n    \n}\n\n    \nprintf\n(\n\\r\\n\n);\n\n\n}\n\n\n\nvoid\n \nupdatePayload\n(\nvoid\n)\n\n\n{\n\n    \n// Update the count in the SERVICE_DATA field of the advertising payload\n\n    \nuint8_t\n \nservice_data\n[\n3\n];\n\n    \nservice_data\n[\n0\n]\n \n=\n \nGAPButtonUUID\n \n \n0xff\n;\n\n    \nservice_data\n[\n1\n]\n \n=\n \nGAPButtonUUID\n \n \n8\n;\n\n    \nservice_data\n[\n2\n]\n \n=\n \ncnt\n;\n \n// Put the button click count in the third byte\n\n    \nble_error_t\n \nerr\n \n=\n \nBLE\n::\nInstance\n().\ngap\n().\nupdateAdvertisingPayload\n(\nGapAdvertisingData\n::\nSERVICE_DATA\n,\n \n(\nuint8_t\n \n*\n)\nservice_data\n,\n \nsizeof\n(\nservice_data\n));\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nUpdating payload failed\n);\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nbuttonPressedCallback\n(\nvoid\n)\n\n\n{\n\n    \n++\ncnt\n;\n\n\n    \n// Calling BLE api in interrupt context may cause race conditions\n\n    \n// Using mbed-events to schedule calls to BLE api for safety\n\n    \neventQueue\n.\ncall\n(\nupdatePayload\n);\n\n\n}\n\n\n\nvoid\n \nblinkCallback\n(\nvoid\n)\n\n\n{\n\n    \nled1\n \n=\n \n!\nled1\n;\n\n\n}\n\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\ncontext\n)\n\n\n{\n\n    \nBLE\n        \nble\n \n=\n \ncontext\n-\nble\n;\n\n    \nble_error_t\n \nerr\n \n=\n \ncontext\n-\nerror\n;\n\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nBLE initialisation failed\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n// Set up the advertising flags. Note: not all combination of flags are valid\n\n    \n// BREDR_NOT_SUPPORTED: Device does not support Basic Rate or Enchanced Data Rate, It is Low Energy only.\n\n    \n// LE_GENERAL_DISCOVERABLE: Peripheral device is discoverable at any moment\n\n    \nerr\n \n=\n \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nBREDR_NOT_SUPPORTED\n \n|\n \nGapAdvertisingData\n::\nLE_GENERAL_DISCOVERABLE\n);\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nSetting GAP flags failed\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n// Put the device name in the advertising payload\n\n    \nerr\n \n=\n \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LOCAL_NAME\n,\n \n(\nuint8_t\n \n*\n)\nDEVICE_NAME\n,\n \nsizeof\n(\nDEVICE_NAME\n));\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nSetting device name failed\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nerr\n \n=\n \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LIST_16BIT_SERVICE_IDS\n,\n \n(\nuint8_t\n \n*\n)\nuuid16_list\n,\n \nsizeof\n(\nuuid16_list\n));\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nSetting service UUID failed\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n// The Service Data data type consists of a service UUID with the data associated with that service.\n\n    \n// We will encode the number of button clicks in the Service Data field\n\n    \n// First two bytes of SERVICE_DATA field should contain the UUID of the service\n\n    \nuint8_t\n \nservice_data\n[\n3\n];\n\n    \nservice_data\n[\n0\n]\n \n=\n \nGAPButtonUUID\n \n \n0xff\n;\n\n    \nservice_data\n[\n1\n]\n \n=\n \nGAPButtonUUID\n \n \n8\n;\n\n    \nservice_data\n[\n2\n]\n \n=\n \ncnt\n;\n \n// Put the button click count in the third byte\n\n    \nerr\n \n=\n \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nSERVICE_DATA\n,\n \n(\nuint8_t\n \n*\n)\nservice_data\n,\n \nsizeof\n(\nservice_data\n));\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nSetting service data failed\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n// It is not connectable as we are just boardcasting\n\n    \nble\n.\ngap\n().\nsetAdvertisingType\n(\nGapAdvertisingParams\n::\nADV_NON_CONNECTABLE_UNDIRECTED\n);\n\n\n    \n// Send out the advertising payload every 1000ms\n\n    \nble\n.\ngap\n().\nsetAdvertisingInterval\n(\n1000\n);\n\n\n    \nerr\n \n=\n \nble\n.\ngap\n().\nstartAdvertising\n();\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nSart advertising failed\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \ncnt\n \n=\n \n0\n;\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble_error_t\n \nerr\n \n=\n \nble\n.\ninit\n(\nbleInitComplete\n);\n\n    \nif\n \n(\nerr\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nprint_error\n(\nerr\n,\n \nBLE initialisation failed\n);\n\n        \nreturn\n \n0\n;\n\n    \n}\n\n\n    \n// Blink LED every 500 ms to indicate system aliveness\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nblinkCallback\n);\n\n\n    \n// Register function to be called when button is released\n\n    \nbutton\n.\nrise\n(\nbuttonPressedCallback\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_GAPButton\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_GAPButton\nElf2Bin: BLE_GAPButton\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n179\n \n|\n     \n3\n \n|\n   \n42\n \n|\n\n\n|\n Misc                  \n|\n \n35190\n \n|\n  \n2488\n \n|\n  \n271\n \n|\n\n\n|\n drivers               \n|\n  \n1127\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16350\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n550\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n24011\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n86758\n \n|\n  \n2664\n \n|\n \n7676\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40908\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10340\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n89422\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_GAPButton.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_GAPButton.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_GAPButton.hex\n\n\n\n\n\n\u9a8c\u8bc1\n\n\n\u5728 nRF52832-MDK \u7684 P25 \u5f15\u811a\u4e0a\u8fde\u63a5\u4e00\u4e2a\u8f7b\u89e6\u6309\u94ae\uff0c\u6309\u94ae\u6309\u4e0b\u65f6\uff0cP25 \u4e0b\u62c9\u5230\u4f4e\u7535\u5e73\uff1a\n\n\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907\uff0c\u53d1\u73b0\u5176 \nServiceUUID\n \u4e3a \n0xAA00\n\uff0c\u6309\u952e\u6b21\u6570\u5305\u542b\u5728 \nServiceData\n \u4e2d\uff1a\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\nmbed-os-example-ble/BLE_GAPButton\n\n\nBluetooth Specifications\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE GAP Button"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#gap-button", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aGAP Button"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_1", 
            "text": "\u4f60\u53ef\u80fd\u5df2\u7ecf\u8bd5\u9a8c\u8fc7\u524d\u9762\u4ecb\u7ecd\u7684  BLE Button  \u793a\u4f8b\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5176\u5b9e\u662f\u9700\u8981\u5148\u5efa\u7acb GATT \u8fde\u63a5\uff0c\u7136\u540e\u518d\u53bb\u8bfb\u53d6 Button \u670d\u52a1\u91cc\u7684 Characteristic \u5c5e\u6027\u503c\u3002  \u672c\u4f8b\u901a\u8fc7\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\u6765\u83b7\u53d6\u6309\u94ae\u7684\u72b6\u6001\uff0c\u53ea\u8981\u6309\u94ae\u72b6\u6001\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u5c06\u6309\u952e\u6b21\u6570\u653e\u5230\u5e7f\u64ad\u6570\u636e\u5305\u4e2d\u53d1\u9001\u51fa\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u65e0\u9700\u5efa\u7acb\u8fde\u63a5\u7684\u6309\u94ae\u793a\u4f8b\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_2", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  DigitalOut    led1 ( LED1 ,   1 );  InterruptIn   button ( BLE_BUTTON_PIN_NAME );  uint8_t   cnt ;  // Change your device name below  const   char   DEVICE_NAME []   =   GAPButton ;  /* We can arbiturarily choose the GAPButton service UUID to be 0xAA00   * as long as it does not overlap with the UUIDs defined here:   * https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx */  #define GAPButtonUUID 0xAA00  const   uint16_t   uuid16_list []   =   { GAPButtonUUID };  static   EventQueue   eventQueue ( \n     /* event count */   16   *   /* event size */   32  );  void   print_error ( ble_error_t   error ,   const   char *   msg )  { \n     printf ( %s:  ,   msg ); \n     switch ( error )   { \n         case   BLE_ERROR_NONE : \n             printf ( BLE_ERROR_NONE: No error ); \n             break ; \n         case   BLE_ERROR_BUFFER_OVERFLOW : \n             printf ( BLE_ERROR_BUFFER_OVERFLOW: The requested action would cause a buffer overflow and has been aborted ); \n             break ; \n         case   BLE_ERROR_NOT_IMPLEMENTED : \n             printf ( BLE_ERROR_NOT_IMPLEMENTED: Requested a feature that isn t yet implement or isn t supported by the target HW ); \n             break ; \n         case   BLE_ERROR_PARAM_OUT_OF_RANGE : \n             printf ( BLE_ERROR_PARAM_OUT_OF_RANGE: One of the supplied parameters is outside the valid range ); \n             break ; \n         case   BLE_ERROR_INVALID_PARAM : \n             printf ( BLE_ERROR_INVALID_PARAM: One of the supplied parameters is invalid ); \n             break ; \n         case   BLE_STACK_BUSY : \n             printf ( BLE_STACK_BUSY: The stack is busy ); \n             break ; \n         case   BLE_ERROR_INVALID_STATE : \n             printf ( BLE_ERROR_INVALID_STATE: Invalid state ); \n             break ; \n         case   BLE_ERROR_NO_MEM : \n             printf ( BLE_ERROR_NO_MEM: Out of Memory ); \n             break ; \n         case   BLE_ERROR_OPERATION_NOT_PERMITTED : \n             printf ( BLE_ERROR_OPERATION_NOT_PERMITTED ); \n             break ; \n         case   BLE_ERROR_INITIALIZATION_INCOMPLETE : \n             printf ( BLE_ERROR_INITIALIZATION_INCOMPLETE ); \n             break ; \n         case   BLE_ERROR_ALREADY_INITIALIZED : \n             printf ( BLE_ERROR_ALREADY_INITIALIZED ); \n             break ; \n         case   BLE_ERROR_UNSPECIFIED : \n             printf ( BLE_ERROR_UNSPECIFIED: Unknown error ); \n             break ; \n         case   BLE_ERROR_INTERNAL_STACK_FAILURE : \n             printf ( BLE_ERROR_INTERNAL_STACK_FAILURE: internal stack faillure ); \n             break ; \n     } \n     printf ( \\r\\n );  }  void   updatePayload ( void )  { \n     // Update the count in the SERVICE_DATA field of the advertising payload \n     uint8_t   service_data [ 3 ]; \n     service_data [ 0 ]   =   GAPButtonUUID     0xff ; \n     service_data [ 1 ]   =   GAPButtonUUID     8 ; \n     service_data [ 2 ]   =   cnt ;   // Put the button click count in the third byte \n     ble_error_t   err   =   BLE :: Instance (). gap (). updateAdvertisingPayload ( GapAdvertisingData :: SERVICE_DATA ,   ( uint8_t   * ) service_data ,   sizeof ( service_data )); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   Updating payload failed ); \n     }  }  void   buttonPressedCallback ( void )  { \n     ++ cnt ; \n\n     // Calling BLE api in interrupt context may cause race conditions \n     // Using mbed-events to schedule calls to BLE api for safety \n     eventQueue . call ( updatePayload );  }  void   blinkCallback ( void )  { \n     led1   =   ! led1 ;  }  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * context )  { \n     BLE          ble   =   context - ble ; \n     ble_error_t   err   =   context - error ; \n\n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   BLE initialisation failed ); \n         return ; \n     } \n\n     // Set up the advertising flags. Note: not all combination of flags are valid \n     // BREDR_NOT_SUPPORTED: Device does not support Basic Rate or Enchanced Data Rate, It is Low Energy only. \n     // LE_GENERAL_DISCOVERABLE: Peripheral device is discoverable at any moment \n     err   =   ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: BREDR_NOT_SUPPORTED   |   GapAdvertisingData :: LE_GENERAL_DISCOVERABLE ); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   Setting GAP flags failed ); \n         return ; \n     } \n\n     // Put the device name in the advertising payload \n     err   =   ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LOCAL_NAME ,   ( uint8_t   * ) DEVICE_NAME ,   sizeof ( DEVICE_NAME )); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   Setting device name failed ); \n         return ; \n     } \n\n     err   =   ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LIST_16BIT_SERVICE_IDS ,   ( uint8_t   * ) uuid16_list ,   sizeof ( uuid16_list )); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   Setting service UUID failed ); \n         return ; \n     } \n\n     // The Service Data data type consists of a service UUID with the data associated with that service. \n     // We will encode the number of button clicks in the Service Data field \n     // First two bytes of SERVICE_DATA field should contain the UUID of the service \n     uint8_t   service_data [ 3 ]; \n     service_data [ 0 ]   =   GAPButtonUUID     0xff ; \n     service_data [ 1 ]   =   GAPButtonUUID     8 ; \n     service_data [ 2 ]   =   cnt ;   // Put the button click count in the third byte \n     err   =   ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: SERVICE_DATA ,   ( uint8_t   * ) service_data ,   sizeof ( service_data )); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   Setting service data failed ); \n         return ; \n     } \n\n     // It is not connectable as we are just boardcasting \n     ble . gap (). setAdvertisingType ( GapAdvertisingParams :: ADV_NON_CONNECTABLE_UNDIRECTED ); \n\n     // Send out the advertising payload every 1000ms \n     ble . gap (). setAdvertisingInterval ( 1000 ); \n\n     err   =   ble . gap (). startAdvertising (); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   Sart advertising failed ); \n         return ; \n     }  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     cnt   =   0 ; \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble_error_t   err   =   ble . init ( bleInitComplete ); \n     if   ( err   !=   BLE_ERROR_NONE )   { \n         print_error ( err ,   BLE initialisation failed ); \n         return   0 ; \n     } \n\n     // Blink LED every 500 ms to indicate system aliveness \n     eventQueue . call_every ( 500 ,   blinkCallback ); \n\n     // Register function to be called when button is released \n     button . rise ( buttonPressedCallback ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_3", 
            "text": "$  cd  ./BLE_GAPButton # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_GAPButton\nElf2Bin: BLE_GAPButton\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     179   |       3   |     42   |  |  Misc                   |   35190   |    2488   |    271   |  |  drivers                |    1127   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16350   |       5   |    540   |  |  hal                    |     550   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   24011   |     140   |   2200   |  |  Subtotals              |   86758   |    2664   |   7676   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40908  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10340  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  89422  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_GAPButton.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_GAPButton.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_GAPButton.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_5", 
            "text": "\u5728 nRF52832-MDK \u7684 P25 \u5f15\u811a\u4e0a\u8fde\u63a5\u4e00\u4e2a\u8f7b\u89e6\u6309\u94ae\uff0c\u6309\u94ae\u6309\u4e0b\u65f6\uff0cP25 \u4e0b\u62c9\u5230\u4f4e\u7535\u5e73\uff1a   \u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u5c06\u626b\u63cf\u5230\u8bbe\u5907\uff0c\u53d1\u73b0\u5176  ServiceUUID  \u4e3a  0xAA00 \uff0c\u6309\u952e\u6b21\u6570\u5305\u542b\u5728  ServiceData  \u4e2d\uff1a   Enjoy !", 
            "title": "\u9a8c\u8bc1"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_6", 
            "text": "mbed BLE API \u6587\u6863  mbed-os-example-ble/BLE_GAPButton  Bluetooth Specifications", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-gapbutton/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u5fc3\u7387\u68c0\u6d4b\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u4f1a\u521b\u5efa\u4e00\u4e2a\u5fc3\u7387\u68c0\u6d4b\u7684\u9996\u8981\u670d\u52a1\uff0c\u6839\u636e \nBluetooth SIG\n \u5bf9\u5fc3\u7387\u670d\u52a1\u7684\u5b9a\u4e49\uff0c\u8be5\u670d\u52a1\u4f1a\u5305\u542b 3 \u4e2a Characteristic\uff1aHeart Rate Measurement, Body Sensor Location \u548c Heart Rate Control Point, \u5206\u522b\u7528\u4e8e\u83b7\u53d6\u5fc3\u7387\u6d4b\u91cf\u503c\u3001\u4f20\u611f\u5668\u4f4d\u7f6e\u4ee5\u53ca\u63a7\u5236\u5176\u884c\u4e3a\u3002\n\n\n\u8fde\u63a5\u6210\u529f\u540e\u6bcf\u9694 500ms \u66f4\u65b0\u4e00\u6b21\u5fc3\u7387\u6570\u503c\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u7528\u8f6f\u4ef6\u6a21\u62df\u5fc3\u7387\u4f20\u611f\u5668\uff0c\u8ba9\u5176\u6570\u503c\u4ece 100 \u9010\u6e10\u9012\u589e\uff0c\u8d85\u8fc7 175 \u518d\u56de\u5230 100 \u91cd\u65b0\u8ba1\u6570\u3002\n\n\n\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4f7f\u7528 Web Bluetooth API \u7684\u9875\u9762\u6765\u8bfb\u53d6\u5fc3\u7387\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n#include\n \nble/Gap.h\n\n\n#include\n \nble/services/HeartRateService.h\n\n\n\nDigitalOut\n \nled1\n(\nLED1\n,\n \n1\n);\n\n\n\nconst\n \nstatic\n \nchar\n     \nDEVICE_NAME\n[]\n \n=\n \nHRM\n;\n\n\nstatic\n \nconst\n \nuint16_t\n \nuuid16_list\n[]\n \n=\n \n{\nGattService\n::\nUUID_HEART_RATE_SERVICE\n};\n\n\n\nstatic\n \nuint8_t\n \nhrmCounter\n \n=\n \n100\n;\n \n// init HRM to 100bps\n\n\nstatic\n \nHeartRateService\n \n*\nhrServicePtr\n;\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n16\n \n*\n \n/* event size */\n \n32\n\n\n);\n\n\n\nvoid\n \ndisconnectionCallback\n(\nconst\n \nGap\n::\nDisconnectionCallbackParams_t\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n::\nInstance\n().\ngap\n().\nstartAdvertising\n();\n \n// restart advertising\n\n\n}\n\n\n\nvoid\n \nupdateSensorValue\n()\n \n{\n\n    \n// Do blocking calls or whatever is necessary for sensor polling.\n\n    \n// In our case, we simply update the HRM measurement.\n\n    \nhrmCounter\n++\n;\n\n\n    \n//  100 \n= HRM bps \n=175\n\n    \nif\n \n(\nhrmCounter\n \n==\n \n175\n)\n \n{\n\n        \nhrmCounter\n \n=\n \n100\n;\n\n    \n}\n\n\n    \nhrServicePtr\n-\nupdateHeartRate\n(\nhrmCounter\n);\n\n\n}\n\n\n\nvoid\n \nperiodicCallback\n(\nvoid\n)\n\n\n{\n\n    \nled1\n \n=\n \n!\nled1\n;\n \n/* Do blinky on LED1 while we\nre waiting for BLE events */\n\n\n    \nif\n \n(\nBLE\n::\nInstance\n().\ngetGapState\n().\nconnected\n)\n \n{\n\n        \neventQueue\n.\ncall\n(\nupdateSensorValue\n);\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nonBleInitError\n(\nBLE\n \nble\n,\n \nble_error_t\n \nerror\n)\n\n\n{\n\n    \n(\nvoid\n)\nble\n;\n\n    \n(\nvoid\n)\nerror\n;\n\n   \n/* Initialization error handling should go here */\n\n\n}\n\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n        \nble\n   \n=\n \nparams\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \nparams\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \nonBleInitError\n(\nble\n,\n \nerror\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nif\n \n(\nble\n.\ngetInstanceID\n()\n \n!=\n \nBLE\n::\nDEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nble\n.\ngap\n().\nonDisconnection\n(\ndisconnectionCallback\n);\n\n\n    \n/* Setup primary service. */\n\n    \nhrServicePtr\n \n=\n \nnew\n \nHeartRateService\n(\nble\n,\n \nhrmCounter\n,\n \nHeartRateService\n::\nLOCATION_FINGER\n);\n\n\n    \n/* Setup advertising. */\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nBREDR_NOT_SUPPORTED\n \n|\n \nGapAdvertisingData\n::\nLE_GENERAL_DISCOVERABLE\n);\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LIST_16BIT_SERVICE_IDS\n,\n \n(\nuint8_t\n \n*\n)\nuuid16_list\n,\n \nsizeof\n(\nuuid16_list\n));\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nGENERIC_HEART_RATE_SENSOR\n);\n\n    \nble\n.\ngap\n().\naccumulateAdvertisingPayload\n(\nGapAdvertisingData\n::\nCOMPLETE_LOCAL_NAME\n,\n \n(\nuint8_t\n \n*\n)\nDEVICE_NAME\n,\n \nsizeof\n(\nDEVICE_NAME\n));\n\n    \nble\n.\ngap\n().\nsetAdvertisingType\n(\nGapAdvertisingParams\n::\nADV_CONNECTABLE_UNDIRECTED\n);\n\n    \nble\n.\ngap\n().\nsetAdvertisingInterval\n(\n1000\n);\n \n/* 1000ms */\n\n    \nble\n.\ngap\n().\nstartAdvertising\n();\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nperiodicCallback\n);\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_HeartRate\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_HeartRate\nElf2Bin: BLE_HeartRate\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n165\n \n|\n    \n10\n \n|\n   \n43\n \n|\n\n\n|\n Misc                  \n|\n \n28996\n \n|\n  \n2489\n \n|\n  \n230\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16412\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n79841\n \n|\n  \n2672\n \n|\n \n7636\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40940\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10308\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n82513\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_HeartRate.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_HeartRate.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_HeartRate.hex\n\n\n\n\n\n\u4f7f\u7528 \nnRF Connect\n \u5e94\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u8be5\u8bbe\u5907\u7684\u76f8\u5173\u4fe1\u606f\uff1a\n\n\n\n\nWeb Bluetooth\n\n\n\u5982\u679c\u4f60\u7684 PC \u652f\u6301 BLE\uff0c\u53ef\u4ee5\u901a\u8fc7 Web Bluetooth \u83b7\u53d6\u5fc3\u7387\uff1a\n\n\n\u83b7\u53d6\u5fc3\u7387\n\n\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\n\n\n\n\nBLE Heart Rate Service\n\n\n\n\n\n\nmbed-os-example-ble/BLE_HeartRate\n\n\n\n\n\n\nWeb Bluetooth API\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Heart Rate"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_1", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u5fc3\u7387\u68c0\u6d4b"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_2", 
            "text": "\u672c\u4f8b\u4f1a\u521b\u5efa\u4e00\u4e2a\u5fc3\u7387\u68c0\u6d4b\u7684\u9996\u8981\u670d\u52a1\uff0c\u6839\u636e  Bluetooth SIG  \u5bf9\u5fc3\u7387\u670d\u52a1\u7684\u5b9a\u4e49\uff0c\u8be5\u670d\u52a1\u4f1a\u5305\u542b 3 \u4e2a Characteristic\uff1aHeart Rate Measurement, Body Sensor Location \u548c Heart Rate Control Point, \u5206\u522b\u7528\u4e8e\u83b7\u53d6\u5fc3\u7387\u6d4b\u91cf\u503c\u3001\u4f20\u611f\u5668\u4f4d\u7f6e\u4ee5\u53ca\u63a7\u5236\u5176\u884c\u4e3a\u3002  \u8fde\u63a5\u6210\u529f\u540e\u6bcf\u9694 500ms \u66f4\u65b0\u4e00\u6b21\u5fc3\u7387\u6570\u503c\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u7528\u8f6f\u4ef6\u6a21\u62df\u5fc3\u7387\u4f20\u611f\u5668\uff0c\u8ba9\u5176\u6570\u503c\u4ece 100 \u9010\u6e10\u9012\u589e\uff0c\u8d85\u8fc7 175 \u518d\u56de\u5230 100 \u91cd\u65b0\u8ba1\u6570\u3002  \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4f7f\u7528 Web Bluetooth API \u7684\u9875\u9762\u6765\u8bfb\u53d6\u5fc3\u7387\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_3", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  #include   ble/Gap.h  #include   ble/services/HeartRateService.h  DigitalOut   led1 ( LED1 ,   1 );  const   static   char       DEVICE_NAME []   =   HRM ;  static   const   uint16_t   uuid16_list []   =   { GattService :: UUID_HEART_RATE_SERVICE };  static   uint8_t   hrmCounter   =   100 ;   // init HRM to 100bps  static   HeartRateService   * hrServicePtr ;  static   EventQueue   eventQueue ( \n     /* event count */   16   *   /* event size */   32  );  void   disconnectionCallback ( const   Gap :: DisconnectionCallbackParams_t   * params )  { \n     BLE :: Instance (). gap (). startAdvertising ();   // restart advertising  }  void   updateSensorValue ()   { \n     // Do blocking calls or whatever is necessary for sensor polling. \n     // In our case, we simply update the HRM measurement. \n     hrmCounter ++ ; \n\n     //  100  = HRM bps  =175 \n     if   ( hrmCounter   ==   175 )   { \n         hrmCounter   =   100 ; \n     } \n\n     hrServicePtr - updateHeartRate ( hrmCounter );  }  void   periodicCallback ( void )  { \n     led1   =   ! led1 ;   /* Do blinky on LED1 while we re waiting for BLE events */ \n\n     if   ( BLE :: Instance (). getGapState (). connected )   { \n         eventQueue . call ( updateSensorValue ); \n     }  }  void   onBleInitError ( BLE   ble ,   ble_error_t   error )  { \n     ( void ) ble ; \n     ( void ) error ; \n    /* Initialization error handling should go here */  }  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * params )  { \n     BLE          ble     =   params - ble ; \n     ble_error_t   error   =   params - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         onBleInitError ( ble ,   error ); \n         return ; \n     } \n\n     if   ( ble . getInstanceID ()   !=   BLE :: DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n     ble . gap (). onDisconnection ( disconnectionCallback ); \n\n     /* Setup primary service. */ \n     hrServicePtr   =   new   HeartRateService ( ble ,   hrmCounter ,   HeartRateService :: LOCATION_FINGER ); \n\n     /* Setup advertising. */ \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: BREDR_NOT_SUPPORTED   |   GapAdvertisingData :: LE_GENERAL_DISCOVERABLE ); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LIST_16BIT_SERVICE_IDS ,   ( uint8_t   * ) uuid16_list ,   sizeof ( uuid16_list )); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: GENERIC_HEART_RATE_SENSOR ); \n     ble . gap (). accumulateAdvertisingPayload ( GapAdvertisingData :: COMPLETE_LOCAL_NAME ,   ( uint8_t   * ) DEVICE_NAME ,   sizeof ( DEVICE_NAME )); \n     ble . gap (). setAdvertisingType ( GapAdvertisingParams :: ADV_CONNECTABLE_UNDIRECTED ); \n     ble . gap (). setAdvertisingInterval ( 1000 );   /* 1000ms */ \n     ble . gap (). startAdvertising ();  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     eventQueue . call_every ( 500 ,   periodicCallback ); \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_4", 
            "text": "$  cd  ./BLE_HeartRate # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_HeartRate\nElf2Bin: BLE_HeartRate\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     165   |      10   |     43   |  |  Misc                   |   28996   |    2489   |    230   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16412   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   79841   |    2672   |   7636   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40940  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10308  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  82513  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_HeartRate.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_HeartRate.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_HeartRate.hex  \u4f7f\u7528  nRF Connect  \u5e94\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u8be5\u8bbe\u5907\u7684\u76f8\u5173\u4fe1\u606f\uff1a", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#web-bluetooth", 
            "text": "\u5982\u679c\u4f60\u7684 PC \u652f\u6301 BLE\uff0c\u53ef\u4ee5\u901a\u8fc7 Web Bluetooth \u83b7\u53d6\u5fc3\u7387\uff1a  \u83b7\u53d6\u5fc3\u7387    Enjoy !", 
            "title": "Web Bluetooth"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_6", 
            "text": "mbed BLE API \u6587\u6863    BLE Heart Rate Service    mbed-os-example-ble/BLE_HeartRate    Web Bluetooth API", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-heartrate/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-led/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aLED \u5916\u8bbe\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u5c06\u81ea\u5b9a\u4e49\u4e00\u4e2a UUID \u4e3a \n0xA000\n \u7684\u9996\u8981\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a UUID \u4e3a \n0xA001\n \u7684 Characteristic\uff0c\u8be5 Characteristic \u662f\u53ef\u8bfb\u53ef\u5199\u7684\uff0c\u5bf9\u5176\u5199\u5165\u6570\u503c\u5373\u53ef\u63a7\u5236 LED \u7684\u5f00\u5173\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u672c\u4f8b\u53ef\u4ee5\u4f5c\u4e3a\u5982\u4f55\u521b\u5efa BLE Service \u7684\u6a21\u677f\uff0c\u4f8b\u5982\u53ef\u4ee5\u7528\u6765\u7ed9\u5176\u4ed6\u8bbe\u5907\u53d1\u9001\u63a7\u5236\u547d\u4ee4\u3002\n\n\n\n\n\u6e90\u4ee3\u7801\n\n\n#include \nevents/mbed_events.h\n\n\n#include \nmbed.h\n\n\n#include \nble/BLE.h\n\n\n#include \nLEDService.h\n\n\nDigitalOut alivenessLED\n(\nLED1, \n0\n)\n;\n\nDigitalOut actuatedLED\n(\nLED2, \n0\n)\n;\n\n\nconst static char     DEVICE_NAME\n[]\n \n=\n \nLED\n;\n\nstatic const uint16_t uuid16_list\n[]\n \n=\n \n{\nLEDService::LED_SERVICE_UUID\n}\n;\n\n\nstatic EventQueue eventQueue\n(\n\n    /* event count */ \n10\n * /* event size */ \n32\n\n\n)\n;\n\n\nLEDService *ledServicePtr\n;\n\n\nvoid disconnectionCallback\n(\nconst Gap::DisconnectionCallbackParams_t *params\n)\n\n\n{\n\n    \n(\nvoid\n)\n params\n;\n\n    BLE::Instance\n()\n.gap\n()\n.startAdvertising\n()\n;\n\n\n}\n\n\nvoid blinkCallback\n(\nvoid\n)\n\n\n{\n\n    \nalivenessLED\n \n=\n !alivenessLED\n;\n /* Do blinky on LED1 to indicate system aliveness. */\n\n}\n\n\n/**\n * This callback allows the LEDService to receive updates to the ledState Characteristic.\n *\n * @param\n[\nin\n]\n params\n *     Information about the characterisitc being updated.\n */\nvoid onDataWrittenCallback\n(\nconst GattWriteCallbackParams *params\n)\n \n{\n\n    \nif\n \n((\nparams-\nhandle \n==\n ledServicePtr-\ngetValueHandle\n())\n \n \n(\nparams-\nlen \n==\n \n1\n))\n \n{\n\n        \nactuatedLED\n \n=\n *\n(\nparams-\ndata\n)\n;\n\n    \n}\n\n\n}\n\n\n/**\n * This \nfunction\n is called when the ble initialization process has failled\n */\nvoid onBleInitError\n(\nBLE \nble, ble_error_t error\n)\n\n\n{\n\n    /* Initialization error handling should go here */\n\n}\n\n\n/**\n * Callback triggered when the ble initialization process has finished\n */\nvoid bleInitComplete\n(\nBLE::InitializationCompleteCallbackContext *params\n)\n\n\n{\n\n    BLE\n        \nble\n   \n=\n params-\nble\n;\n\n    ble_error_t \nerror\n \n=\n params-\nerror\n;\n\n\n    \nif\n \n(\nerror !\n=\n BLE_ERROR_NONE\n)\n \n{\n\n        /* In \ncase\n of error, forward the error handling to onBleInitError */\n        onBleInitError\n(\nble, error\n)\n;\n\n        \nreturn\n;\n\n    \n}\n\n\n    /* Ensure that it is the default instance of BLE */\n    \nif\n(\nble.getInstanceID\n()\n !\n=\n BLE::DEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    ble.gap\n()\n.onDisconnection\n(\ndisconnectionCallback\n)\n;\n\n    ble.gattServer\n()\n.onDataWritten\n(\nonDataWrittenCallback\n)\n;\n\n\n    bool \ninitialValueForLEDCharacteristic\n \n=\n false\n;\n\n    \nledServicePtr\n \n=\n new LEDService\n(\nble, initialValueForLEDCharacteristic\n)\n;\n\n\n    /* setup advertising */\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::BREDR_NOT_SUPPORTED \n|\n GapAdvertisingData::LE_GENERAL_DISCOVERABLE\n)\n;\n\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::COMPLETE_LIST_16BIT_SERVICE_IDS, \n(\nuint8_t *\n)\nuuid16_list, sizeof\n(\nuuid16_list\n))\n;\n\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::COMPLETE_LOCAL_NAME, \n(\nuint8_t *\n)\nDEVICE_NAME, sizeof\n(\nDEVICE_NAME\n))\n;\n\n    ble.gap\n()\n.setAdvertisingType\n(\nGapAdvertisingParams::ADV_CONNECTABLE_UNDIRECTED\n)\n;\n\n    ble.gap\n()\n.setAdvertisingInterval\n(\n1000\n)\n;\n /* 1000ms. */\n    ble.gap\n()\n.startAdvertising\n()\n;\n\n\n}\n\n\nvoid scheduleBleEventsProcessing\n(\nBLE::OnEventsToProcessCallbackContext* context\n)\n \n{\n\n    BLE \nble\n \n=\n BLE::Instance\n()\n;\n\n    eventQueue.call\n(\nCallback\nvoid\n()\n(\nble, \nBLE::processEvents\n))\n;\n\n\n}\n\n\nint main\n()\n\n\n{\n\n    eventQueue.call_every\n(\n500\n, blinkCallback\n)\n;\n\n\n    BLE \nble\n \n=\n BLE::Instance\n()\n;\n\n    ble.onEventsToProcess\n(\nscheduleBleEventsProcessing\n)\n;\n\n    ble.init\n(\nbleInitComplete\n)\n;\n\n\n    eventQueue.dispatch_forever\n()\n;\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_LED\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_LED\nElf2Bin: BLE_LED\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n225\n \n|\n     \n3\n \n|\n   \n42\n \n|\n\n\n|\n Misc                  \n|\n \n28420\n \n|\n  \n2488\n \n|\n  \n231\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16408\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n79321\n \n|\n  \n2664\n \n|\n \n7636\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40948\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10300\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n81985\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LED.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_LED.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LED.hex\n\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u5c06\u53d1\u73b0\u8be5\u8bbe\u5907\uff1a\n\n\n\n\n\u901a\u8fc7\u5bf9\u5176 Characteristic \u5199 \n0x00\n \u6216 \n0x01\n \u6765\u63a7\u5236 LED(\u7ea2\u8272)\uff1a\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\n\n\n\n\nmbed-os-example-ble/BLE_LED\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE LED"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#led", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aLED \u5916\u8bbe"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#_1", 
            "text": "\u672c\u4f8b\u5c06\u81ea\u5b9a\u4e49\u4e00\u4e2a UUID \u4e3a  0xA000  \u7684\u9996\u8981\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b\u4e00\u4e2a UUID \u4e3a  0xA001  \u7684 Characteristic\uff0c\u8be5 Characteristic \u662f\u53ef\u8bfb\u53ef\u5199\u7684\uff0c\u5bf9\u5176\u5199\u5165\u6570\u503c\u5373\u53ef\u63a7\u5236 LED \u7684\u5f00\u5173\u3002   \u63d0\u793a  \u672c\u4f8b\u53ef\u4ee5\u4f5c\u4e3a\u5982\u4f55\u521b\u5efa BLE Service \u7684\u6a21\u677f\uff0c\u4f8b\u5982\u53ef\u4ee5\u7528\u6765\u7ed9\u5176\u4ed6\u8bbe\u5907\u53d1\u9001\u63a7\u5236\u547d\u4ee4\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#_2", 
            "text": "#include  events/mbed_events.h  #include  mbed.h  #include  ble/BLE.h  #include  LEDService.h \n\nDigitalOut alivenessLED ( LED1,  0 ) ; \nDigitalOut actuatedLED ( LED2,  0 ) ; \n\nconst static char     DEVICE_NAME []   =   LED ; \nstatic const uint16_t uuid16_list []   =   { LEDService::LED_SERVICE_UUID } ; \n\nstatic EventQueue eventQueue ( \n    /* event count */  10  * /* event size */  32  ) ; \n\nLEDService *ledServicePtr ; \n\nvoid disconnectionCallback ( const Gap::DisconnectionCallbackParams_t *params )  { \n     ( void )  params ; \n    BLE::Instance () .gap () .startAdvertising () ;  } \n\nvoid blinkCallback ( void )  { \n     alivenessLED   =  !alivenessLED ;  /* Do blinky on LED1 to indicate system aliveness. */ } \n\n/**\n * This callback allows the LEDService to receive updates to the ledState Characteristic.\n *\n * @param [ in ]  params\n *     Information about the characterisitc being updated.\n */\nvoid onDataWrittenCallback ( const GattWriteCallbackParams *params )   { \n     if   (( params- handle  ==  ledServicePtr- getValueHandle ())     ( params- len  ==   1 ))   { \n         actuatedLED   =  * ( params- data ) ; \n     }  } \n\n/**\n * This  function  is called when the ble initialization process has failled\n */\nvoid onBleInitError ( BLE  ble, ble_error_t error )  { \n    /* Initialization error handling should go here */ } \n\n/**\n * Callback triggered when the ble initialization process has finished\n */\nvoid bleInitComplete ( BLE::InitializationCompleteCallbackContext *params )  { \n    BLE          ble     =  params- ble ; \n    ble_error_t  error   =  params- error ; \n\n     if   ( error ! =  BLE_ERROR_NONE )   { \n        /* In  case  of error, forward the error handling to onBleInitError */\n        onBleInitError ( ble, error ) ; \n         return ; \n     } \n\n    /* Ensure that it is the default instance of BLE */\n     if ( ble.getInstanceID ()  ! =  BLE::DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n    ble.gap () .onDisconnection ( disconnectionCallback ) ; \n    ble.gattServer () .onDataWritten ( onDataWrittenCallback ) ; \n\n    bool  initialValueForLEDCharacteristic   =  false ; \n     ledServicePtr   =  new LEDService ( ble, initialValueForLEDCharacteristic ) ; \n\n    /* setup advertising */\n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::BREDR_NOT_SUPPORTED  |  GapAdvertisingData::LE_GENERAL_DISCOVERABLE ) ; \n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::COMPLETE_LIST_16BIT_SERVICE_IDS,  ( uint8_t * ) uuid16_list, sizeof ( uuid16_list )) ; \n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::COMPLETE_LOCAL_NAME,  ( uint8_t * ) DEVICE_NAME, sizeof ( DEVICE_NAME )) ; \n    ble.gap () .setAdvertisingType ( GapAdvertisingParams::ADV_CONNECTABLE_UNDIRECTED ) ; \n    ble.gap () .setAdvertisingInterval ( 1000 ) ;  /* 1000ms. */\n    ble.gap () .startAdvertising () ;  } \n\nvoid scheduleBleEventsProcessing ( BLE::OnEventsToProcessCallbackContext* context )   { \n    BLE  ble   =  BLE::Instance () ; \n    eventQueue.call ( Callback void () ( ble,  BLE::processEvents )) ;  } \n\nint main ()  { \n    eventQueue.call_every ( 500 , blinkCallback ) ; \n\n    BLE  ble   =  BLE::Instance () ; \n    ble.onEventsToProcess ( scheduleBleEventsProcessing ) ; \n    ble.init ( bleInitComplete ) ; \n\n    eventQueue.dispatch_forever () ; \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#_3", 
            "text": "$  cd  ./BLE_LED # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_LED\nElf2Bin: BLE_LED\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     225   |       3   |     42   |  |  Misc                   |   28420   |    2488   |    231   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16408   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   79321   |    2664   |   7636   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40948  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10300  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  81985  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LED.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_LED.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LED.hex \n\n\u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u5c06\u53d1\u73b0\u8be5\u8bbe\u5907\uff1a   \u901a\u8fc7\u5bf9\u5176 Characteristic \u5199  0x00  \u6216  0x01  \u6765\u63a7\u5236 LED(\u7ea2\u8272)\uff1a   Enjoy !", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#_5", 
            "text": "mbed BLE API \u6587\u6863    mbed-os-example-ble/BLE_LED", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-led/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aLED Blinker\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u5c06 nRF52832-MDK \u5f53\u505a BLE \u4e3b\u673a\uff0c\u7528\u6765\u63a7\u5236 \nBLE LED\n\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u53e6\u5916\u4e00\u5757 nRF52832-MDK \u6765\u505a\u4e3a\u4ece\u673a\u8bbe\u5907\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nevents/mbed_events.h\n\n\n#include\n \nmbed.h\n\n\n#include\n \nble/BLE.h\n\n\n#include\n \nble/DiscoveredCharacteristic.h\n\n\n#include\n \nble/DiscoveredService.h\n\n\n\nDigitalOut\n \nalivenessLED\n(\nLED1\n,\n \n1\n);\n\n\nstatic\n \nDiscoveredCharacteristic\n \nledCharacteristic\n;\n\n\nstatic\n \nbool\n \ntriggerLedCharacteristic\n;\n\n\nstatic\n \nconst\n \nchar\n \nPEER_NAME\n[]\n \n=\n \nLED\n;\n\n\n\nstatic\n \nEventQueue\n \neventQueue\n(\n\n    \n/* event count */\n \n16\n \n*\n \n/* event size */\n \n32\n    \n\n);\n\n\n\nvoid\n \nperiodicCallback\n(\nvoid\n)\n \n{\n\n    \nalivenessLED\n \n=\n \n!\nalivenessLED\n;\n \n/* Do blinky on LED1 while we\nre waiting for BLE events */\n\n\n}\n\n\n\nvoid\n \nadvertisementCallback\n(\nconst\n \nGap\n::\nAdvertisementCallbackParams_t\n \n*\nparams\n)\n \n{\n\n    \n// parse the advertising payload, looking for data type COMPLETE_LOCAL_NAME\n\n    \n// The advertising payload is a collection of key/value records where\n\n    \n// byte 0: length of the record excluding this byte\n\n    \n// byte 1: The key, it is the type of the data\n\n    \n// byte [2..N] The value. N is equal to byte0 - 1\n\n    \nfor\n \n(\nuint8_t\n \ni\n \n=\n \n0\n;\n \ni\n \n \nparams\n-\nadvertisingDataLen\n;\n \n++\ni\n)\n \n{\n\n\n        \nconst\n \nuint8_t\n \nrecord_length\n \n=\n \nparams\n-\nadvertisingData\n[\ni\n];\n\n        \nif\n \n(\nrecord_length\n \n==\n \n0\n)\n \n{\n\n            \ncontinue\n;\n\n        \n}\n\n        \nconst\n \nuint8_t\n \ntype\n \n=\n \nparams\n-\nadvertisingData\n[\ni\n \n+\n \n1\n];\n\n        \nconst\n \nuint8_t\n*\n \nvalue\n \n=\n \nparams\n-\nadvertisingData\n \n+\n \ni\n \n+\n \n2\n;\n\n        \nconst\n \nuint8_t\n \nvalue_length\n \n=\n \nrecord_length\n \n-\n \n1\n;\n\n\n        \nif\n(\ntype\n \n==\n \nGapAdvertisingData\n::\nCOMPLETE_LOCAL_NAME\n)\n \n{\n\n            \nif\n \n((\nvalue_length\n \n==\n \nsizeof\n(\nPEER_NAME\n))\n \n \n(\nmemcmp\n(\nvalue\n,\n \nPEER_NAME\n,\n \nvalue_length\n)\n \n==\n \n0\n))\n \n{\n\n                \nprintf\n(\n\n                    \nadv peerAddr[%02x %02x %02x %02x %02x %02x] rssi %d, isScanResponse %u, AdvertisementType %u\n\\r\\n\n,\n\n                    \nparams\n-\npeerAddr\n[\n5\n],\n \nparams\n-\npeerAddr\n[\n4\n],\n \nparams\n-\npeerAddr\n[\n3\n],\n \nparams\n-\npeerAddr\n[\n2\n],\n\n                    \nparams\n-\npeerAddr\n[\n1\n],\n \nparams\n-\npeerAddr\n[\n0\n],\n \nparams\n-\nrssi\n,\n \nparams\n-\nisScanResponse\n,\n \nparams\n-\ntype\n\n                \n);\n\n                \nBLE\n::\nInstance\n().\ngap\n().\nconnect\n(\nparams\n-\npeerAddr\n,\n \nGap\n::\nADDR_TYPE_RANDOM_STATIC\n,\n \nNULL\n,\n \nNULL\n);\n\n                \nbreak\n;\n\n            \n}\n\n        \n}\n\n        \ni\n \n+=\n \nrecord_length\n;\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nserviceDiscoveryCallback\n(\nconst\n \nDiscoveredService\n \n*\nservice\n)\n \n{\n\n    \nif\n \n(\nservice\n-\ngetUUID\n().\nshortOrLong\n()\n \n==\n \nUUID\n::\nUUID_TYPE_SHORT\n)\n \n{\n\n        \nprintf\n(\nS UUID-%x attrs[%u %u]\n\\r\\n\n,\n \nservice\n-\ngetUUID\n().\ngetShortUUID\n(),\n \nservice\n-\ngetStartHandle\n(),\n \nservice\n-\ngetEndHandle\n());\n\n    \n}\n \nelse\n \n{\n\n        \nprintf\n(\nS UUID-\n);\n\n        \nconst\n \nuint8_t\n \n*\nlongUUIDBytes\n \n=\n \nservice\n-\ngetUUID\n().\ngetBaseUUID\n();\n\n        \nfor\n \n(\nunsigned\n \ni\n \n=\n \n0\n;\n \ni\n \n \nUUID\n::\nLENGTH_OF_LONG_UUID\n;\n \ni\n++\n)\n \n{\n\n            \nprintf\n(\n%02x\n,\n \nlongUUIDBytes\n[\ni\n]);\n\n        \n}\n\n        \nprintf\n(\n attrs[%u %u]\n\\r\\n\n,\n \nservice\n-\ngetStartHandle\n(),\n \nservice\n-\ngetEndHandle\n());\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nupdateLedCharacteristic\n(\nvoid\n)\n \n{\n\n    \nif\n \n(\n!\nBLE\n::\nInstance\n().\ngattClient\n().\nisServiceDiscoveryActive\n())\n \n{\n\n        \nledCharacteristic\n.\nread\n();\n\n    \n}\n\n\n}\n\n\n\nvoid\n \ncharacteristicDiscoveryCallback\n(\nconst\n \nDiscoveredCharacteristic\n \n*\ncharacteristicP\n)\n \n{\n\n    \nprintf\n(\n  C UUID-%x valueAttr[%u] props[%x]\n\\r\\n\n,\n \ncharacteristicP\n-\ngetUUID\n().\ngetShortUUID\n(),\n \ncharacteristicP\n-\ngetValueHandle\n(),\n \n(\nuint8_t\n)\ncharacteristicP\n-\ngetProperties\n().\nbroadcast\n());\n\n    \nif\n \n(\ncharacteristicP\n-\ngetUUID\n().\ngetShortUUID\n()\n \n==\n \n0xa001\n)\n \n{\n \n/* !ALERT! Alter this filter to suit your device. */\n\n        \nledCharacteristic\n        \n=\n \n*\ncharacteristicP\n;\n\n        \ntriggerLedCharacteristic\n \n=\n \ntrue\n;\n\n    \n}\n\n\n}\n\n\n\nvoid\n \ndiscoveryTerminationCallback\n(\nGap\n::\nHandle_t\n \nconnectionHandle\n)\n \n{\n\n    \nprintf\n(\nterminated SD for handle %u\n\\r\\n\n,\n \nconnectionHandle\n);\n\n    \nif\n \n(\ntriggerLedCharacteristic\n)\n \n{\n\n        \ntriggerLedCharacteristic\n \n=\n \nfalse\n;\n\n        \neventQueue\n.\ncall\n(\nupdateLedCharacteristic\n);\n\n    \n}\n\n\n}\n\n\n\nvoid\n \nconnectionCallback\n(\nconst\n \nGap\n::\nConnectionCallbackParams_t\n \n*\nparams\n)\n \n{\n\n    \nif\n \n(\nparams\n-\nrole\n \n==\n \nGap\n::\nCENTRAL\n)\n \n{\n\n        \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n        \nble\n.\ngattClient\n().\nonServiceDiscoveryTermination\n(\ndiscoveryTerminationCallback\n);\n\n        \nble\n.\ngattClient\n().\nlaunchServiceDiscovery\n(\nparams\n-\nhandle\n,\n \nserviceDiscoveryCallback\n,\n \ncharacteristicDiscoveryCallback\n,\n \n0xa000\n,\n \n0xa001\n);\n\n    \n}\n\n\n}\n\n\n\nvoid\n \ntriggerToggledWrite\n(\nconst\n \nGattReadCallbackParams\n \n*\nresponse\n)\n \n{\n\n    \nif\n \n(\nresponse\n-\nhandle\n \n==\n \nledCharacteristic\n.\ngetValueHandle\n())\n \n{\n\n        \nprintf\n(\ntriggerToggledWrite: handle %u, offset %u, len %u\n\\r\\n\n,\n \nresponse\n-\nhandle\n,\n \nresponse\n-\noffset\n,\n \nresponse\n-\nlen\n);\n\n        \nfor\n \n(\nunsigned\n \nindex\n \n=\n \n0\n;\n \nindex\n \n \nresponse\n-\nlen\n;\n \nindex\n++\n)\n \n{\n\n            \nprintf\n(\n%c[%02x]\n,\n \nresponse\n-\ndata\n[\nindex\n],\n \nresponse\n-\ndata\n[\nindex\n]);\n\n        \n}\n\n        \nprintf\n(\n\\r\\n\n);\n\n\n        \nuint8_t\n \ntoggledValue\n \n=\n \nresponse\n-\ndata\n[\n0\n]\n \n^\n \n0x1\n;\n\n        \nledCharacteristic\n.\nwrite\n(\n1\n,\n \ntoggledValue\n);\n\n    \n}\n\n\n}\n\n\n\nvoid\n \ntriggerRead\n(\nconst\n \nGattWriteCallbackParams\n \n*\nresponse\n)\n \n{\n\n    \nif\n \n(\nresponse\n-\nhandle\n \n==\n \nledCharacteristic\n.\ngetValueHandle\n())\n \n{\n\n        \nledCharacteristic\n.\nread\n();\n\n    \n}\n\n\n}\n\n\n\nvoid\n \ndisconnectionCallback\n(\nconst\n \nGap\n::\nDisconnectionCallbackParams_t\n \n*\n)\n \n{\n\n    \nprintf\n(\ndisconnected\n\\r\\n\n);\n\n    \n/* Start scanning and try to connect again */\n\n    \nBLE\n::\nInstance\n().\ngap\n().\nstartScan\n(\nadvertisementCallback\n);\n\n\n}\n\n\n\nvoid\n \nonBleInitError\n(\nBLE\n \nble\n,\n \nble_error_t\n \nerror\n)\n\n\n{\n\n   \n/* Initialization error handling should go here */\n\n\n}\n\n\n\nvoid\n \nbleInitComplete\n(\nBLE\n::\nInitializationCompleteCallbackContext\n \n*\nparams\n)\n\n\n{\n\n    \nBLE\n        \nble\n   \n=\n \nparams\n-\nble\n;\n\n    \nble_error_t\n \nerror\n \n=\n \nparams\n-\nerror\n;\n\n\n    \nif\n \n(\nerror\n \n!=\n \nBLE_ERROR_NONE\n)\n \n{\n\n        \n/* In case of error, forward the error handling to onBleInitError */\n\n        \nonBleInitError\n(\nble\n,\n \nerror\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \n/* Ensure that it is the default instance of BLE */\n\n    \nif\n \n(\nble\n.\ngetInstanceID\n()\n \n!=\n \nBLE\n::\nDEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nble\n.\ngap\n().\nonDisconnection\n(\ndisconnectionCallback\n);\n\n    \nble\n.\ngap\n().\nonConnection\n(\nconnectionCallback\n);\n\n\n    \nble\n.\ngattClient\n().\nonDataRead\n(\ntriggerToggledWrite\n);\n\n    \nble\n.\ngattClient\n().\nonDataWrite\n(\ntriggerRead\n);\n\n\n    \n// scan interval: 400ms and scan window: 400ms.\n\n    \n// Every 400ms the device will scan for 400ms\n\n    \n// This means that the device will scan continuously.\n\n    \nble\n.\ngap\n().\nsetScanParams\n(\n400\n,\n \n400\n);\n\n    \nble\n.\ngap\n().\nstartScan\n(\nadvertisementCallback\n);\n\n\n}\n\n\n\nvoid\n \nscheduleBleEventsProcessing\n(\nBLE\n::\nOnEventsToProcessCallbackContext\n*\n \ncontext\n)\n \n{\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \neventQueue\n.\ncall\n(\nCallback\nvoid\n()\n(\nble\n,\n \nBLE\n::\nprocessEvents\n));\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \ntriggerLedCharacteristic\n \n=\n \nfalse\n;\n\n    \neventQueue\n.\ncall_every\n(\n500\n,\n \nperiodicCallback\n);\n\n\n    \nBLE\n \nble\n \n=\n \nBLE\n::\nInstance\n();\n\n    \nble\n.\nonEventsToProcess\n(\nscheduleBleEventsProcessing\n);\n\n    \nble\n.\ninit\n(\nbleInitComplete\n);\n\n\n    \neventQueue\n.\ndispatch_forever\n();\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_LEDBlinker\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_LEDBlinker\nElf2Bin: BLE_LEDBlinker\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n154\n \n|\n     \n3\n \n|\n   \n42\n \n|\n\n\n|\n Misc                  \n|\n \n34551\n \n|\n  \n2488\n \n|\n  \n263\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16574\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n85547\n \n|\n  \n2664\n \n|\n \n7668\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40916\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10332\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n88211\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LEDBlinker.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_LEDBlinker.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LEDBlinker.hex\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u53e6\u5916\u4e00\u5757 nRF52832-MDK \u5f53\u505a\u4ece\u673a\uff0c\u8fd0\u884c \nBLE LED\n \u56fa\u4ef6\u3002\n\n\n\n\n\u6b63\u5e38\u8fd0\u884c\u540e\uff0c\u53ef\u53d1\u73b0\u4ece\u673a\u7684 \u7ea2\u8272 LED \u7531\u4e3b\u673a\u63a7\u5236\u95ea\u70c1\uff0c\u6253\u5f00\u4e3b\u673a\u4e32\u53e3\uff0c\u53ef\u67e5\u770b\u8f93\u51fa\u4fe1\u606f\uff1a\n\n\n$ screen /dev/cu.usbmodem1412 \n9600\n\n\n\n\n\n\n \n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\n\n\n\n\nmbed-os-example-ble/BLE_LEDBlinker\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE LED Blinker"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#led-blinker", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1aLED Blinker"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#_1", 
            "text": "\u672c\u4f8b\u5c06 nRF52832-MDK \u5f53\u505a BLE \u4e3b\u673a\uff0c\u7528\u6765\u63a7\u5236  BLE LED \uff0c\u56e0\u6b64\u4f60\u9700\u8981\u53e6\u5916\u4e00\u5757 nRF52832-MDK \u6765\u505a\u4e3a\u4ece\u673a\u8bbe\u5907\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#_2", 
            "text": "#include   events/mbed_events.h  #include   mbed.h  #include   ble/BLE.h  #include   ble/DiscoveredCharacteristic.h  #include   ble/DiscoveredService.h  DigitalOut   alivenessLED ( LED1 ,   1 );  static   DiscoveredCharacteristic   ledCharacteristic ;  static   bool   triggerLedCharacteristic ;  static   const   char   PEER_NAME []   =   LED ;  static   EventQueue   eventQueue ( \n     /* event count */   16   *   /* event size */   32      );  void   periodicCallback ( void )   { \n     alivenessLED   =   ! alivenessLED ;   /* Do blinky on LED1 while we re waiting for BLE events */  }  void   advertisementCallback ( const   Gap :: AdvertisementCallbackParams_t   * params )   { \n     // parse the advertising payload, looking for data type COMPLETE_LOCAL_NAME \n     // The advertising payload is a collection of key/value records where \n     // byte 0: length of the record excluding this byte \n     // byte 1: The key, it is the type of the data \n     // byte [2..N] The value. N is equal to byte0 - 1 \n     for   ( uint8_t   i   =   0 ;   i     params - advertisingDataLen ;   ++ i )   { \n\n         const   uint8_t   record_length   =   params - advertisingData [ i ]; \n         if   ( record_length   ==   0 )   { \n             continue ; \n         } \n         const   uint8_t   type   =   params - advertisingData [ i   +   1 ]; \n         const   uint8_t *   value   =   params - advertisingData   +   i   +   2 ; \n         const   uint8_t   value_length   =   record_length   -   1 ; \n\n         if ( type   ==   GapAdvertisingData :: COMPLETE_LOCAL_NAME )   { \n             if   (( value_length   ==   sizeof ( PEER_NAME ))     ( memcmp ( value ,   PEER_NAME ,   value_length )   ==   0 ))   { \n                 printf ( \n                     adv peerAddr[%02x %02x %02x %02x %02x %02x] rssi %d, isScanResponse %u, AdvertisementType %u \\r\\n , \n                     params - peerAddr [ 5 ],   params - peerAddr [ 4 ],   params - peerAddr [ 3 ],   params - peerAddr [ 2 ], \n                     params - peerAddr [ 1 ],   params - peerAddr [ 0 ],   params - rssi ,   params - isScanResponse ,   params - type \n                 ); \n                 BLE :: Instance (). gap (). connect ( params - peerAddr ,   Gap :: ADDR_TYPE_RANDOM_STATIC ,   NULL ,   NULL ); \n                 break ; \n             } \n         } \n         i   +=   record_length ; \n     }  }  void   serviceDiscoveryCallback ( const   DiscoveredService   * service )   { \n     if   ( service - getUUID (). shortOrLong ()   ==   UUID :: UUID_TYPE_SHORT )   { \n         printf ( S UUID-%x attrs[%u %u] \\r\\n ,   service - getUUID (). getShortUUID (),   service - getStartHandle (),   service - getEndHandle ()); \n     }   else   { \n         printf ( S UUID- ); \n         const   uint8_t   * longUUIDBytes   =   service - getUUID (). getBaseUUID (); \n         for   ( unsigned   i   =   0 ;   i     UUID :: LENGTH_OF_LONG_UUID ;   i ++ )   { \n             printf ( %02x ,   longUUIDBytes [ i ]); \n         } \n         printf (  attrs[%u %u] \\r\\n ,   service - getStartHandle (),   service - getEndHandle ()); \n     }  }  void   updateLedCharacteristic ( void )   { \n     if   ( ! BLE :: Instance (). gattClient (). isServiceDiscoveryActive ())   { \n         ledCharacteristic . read (); \n     }  }  void   characteristicDiscoveryCallback ( const   DiscoveredCharacteristic   * characteristicP )   { \n     printf (   C UUID-%x valueAttr[%u] props[%x] \\r\\n ,   characteristicP - getUUID (). getShortUUID (),   characteristicP - getValueHandle (),   ( uint8_t ) characteristicP - getProperties (). broadcast ()); \n     if   ( characteristicP - getUUID (). getShortUUID ()   ==   0xa001 )   {   /* !ALERT! Alter this filter to suit your device. */ \n         ledCharacteristic          =   * characteristicP ; \n         triggerLedCharacteristic   =   true ; \n     }  }  void   discoveryTerminationCallback ( Gap :: Handle_t   connectionHandle )   { \n     printf ( terminated SD for handle %u \\r\\n ,   connectionHandle ); \n     if   ( triggerLedCharacteristic )   { \n         triggerLedCharacteristic   =   false ; \n         eventQueue . call ( updateLedCharacteristic ); \n     }  }  void   connectionCallback ( const   Gap :: ConnectionCallbackParams_t   * params )   { \n     if   ( params - role   ==   Gap :: CENTRAL )   { \n         BLE   ble   =   BLE :: Instance (); \n         ble . gattClient (). onServiceDiscoveryTermination ( discoveryTerminationCallback ); \n         ble . gattClient (). launchServiceDiscovery ( params - handle ,   serviceDiscoveryCallback ,   characteristicDiscoveryCallback ,   0xa000 ,   0xa001 ); \n     }  }  void   triggerToggledWrite ( const   GattReadCallbackParams   * response )   { \n     if   ( response - handle   ==   ledCharacteristic . getValueHandle ())   { \n         printf ( triggerToggledWrite: handle %u, offset %u, len %u \\r\\n ,   response - handle ,   response - offset ,   response - len ); \n         for   ( unsigned   index   =   0 ;   index     response - len ;   index ++ )   { \n             printf ( %c[%02x] ,   response - data [ index ],   response - data [ index ]); \n         } \n         printf ( \\r\\n ); \n\n         uint8_t   toggledValue   =   response - data [ 0 ]   ^   0x1 ; \n         ledCharacteristic . write ( 1 ,   toggledValue ); \n     }  }  void   triggerRead ( const   GattWriteCallbackParams   * response )   { \n     if   ( response - handle   ==   ledCharacteristic . getValueHandle ())   { \n         ledCharacteristic . read (); \n     }  }  void   disconnectionCallback ( const   Gap :: DisconnectionCallbackParams_t   * )   { \n     printf ( disconnected \\r\\n ); \n     /* Start scanning and try to connect again */ \n     BLE :: Instance (). gap (). startScan ( advertisementCallback );  }  void   onBleInitError ( BLE   ble ,   ble_error_t   error )  { \n    /* Initialization error handling should go here */  }  void   bleInitComplete ( BLE :: InitializationCompleteCallbackContext   * params )  { \n     BLE          ble     =   params - ble ; \n     ble_error_t   error   =   params - error ; \n\n     if   ( error   !=   BLE_ERROR_NONE )   { \n         /* In case of error, forward the error handling to onBleInitError */ \n         onBleInitError ( ble ,   error ); \n         return ; \n     } \n\n     /* Ensure that it is the default instance of BLE */ \n     if   ( ble . getInstanceID ()   !=   BLE :: DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n     ble . gap (). onDisconnection ( disconnectionCallback ); \n     ble . gap (). onConnection ( connectionCallback ); \n\n     ble . gattClient (). onDataRead ( triggerToggledWrite ); \n     ble . gattClient (). onDataWrite ( triggerRead ); \n\n     // scan interval: 400ms and scan window: 400ms. \n     // Every 400ms the device will scan for 400ms \n     // This means that the device will scan continuously. \n     ble . gap (). setScanParams ( 400 ,   400 ); \n     ble . gap (). startScan ( advertisementCallback );  }  void   scheduleBleEventsProcessing ( BLE :: OnEventsToProcessCallbackContext *   context )   { \n     BLE   ble   =   BLE :: Instance (); \n     eventQueue . call ( Callback void () ( ble ,   BLE :: processEvents ));  }  int   main ()  { \n     triggerLedCharacteristic   =   false ; \n     eventQueue . call_every ( 500 ,   periodicCallback ); \n\n     BLE   ble   =   BLE :: Instance (); \n     ble . onEventsToProcess ( scheduleBleEventsProcessing ); \n     ble . init ( bleInitComplete ); \n\n     eventQueue . dispatch_forever (); \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#_3", 
            "text": "$  cd  ./BLE_LEDBlinker # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_LEDBlinker\nElf2Bin: BLE_LEDBlinker\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     154   |       3   |     42   |  |  Misc                   |   34551   |    2488   |    263   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16574   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   85547   |    2664   |   7668   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40916  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10332  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  88211  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LEDBlinker.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_LEDBlinker.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_LEDBlinker.hex   \u6ce8\u610f  \u53e6\u5916\u4e00\u5757 nRF52832-MDK \u5f53\u505a\u4ece\u673a\uff0c\u8fd0\u884c  BLE LED  \u56fa\u4ef6\u3002   \u6b63\u5e38\u8fd0\u884c\u540e\uff0c\u53ef\u53d1\u73b0\u4ece\u673a\u7684 \u7ea2\u8272 LED \u7531\u4e3b\u673a\u63a7\u5236\u95ea\u70c1\uff0c\u6253\u5f00\u4e3b\u673a\u4e32\u53e3\uff0c\u53ef\u67e5\u770b\u8f93\u51fa\u4fe1\u606f\uff1a  $ screen /dev/cu.usbmodem1412  9600      Enjoy !", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#_5", 
            "text": "mbed BLE API \u6587\u6863    mbed-os-example-ble/BLE_LEDBlinker", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-ledblinker/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/", 
            "text": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u4f53\u6e29\u8ba1\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u529f\u80fd\u4ecb\u7ecd\n\n\n\u672c\u4f8b\u5c06\u521b\u5efa\u4e00\u4e2a\u84dd\u7259\u4f53\u6e29\u8ba1\uff0c\u8be5\u670d\u52a1\u7684\u76f8\u5173\u89c4\u5b9a\u53ef\u4ee5\u53c2\u8003 \nHealth Thermometer Profile\n\uff0c\u8fd9\u91cc\u5c06\u5305\u542b\u4e24\u4e2a Characteristic\uff1a\n\n\n\n\n\n\nTemperature Measurement\n - \u7528\u4e8e\u53d1\u9001\u6e29\u5ea6\u6d4b\u91cf\u503c\uff0c\u8fd9\u91cc\u7528\u8f6f\u4ef6\u8fdb\u884c\u6a21\u62df\uff0c\u521d\u59cb\u6e29\u5ea6 39.6\uff0c\u6bcf 500ms \u589e\u52a0 0.1\uff0c\u8d85\u8fc7 43 \u5c31\u91cd\u65b0\u5f00\u59cb\u8ba1\u6570\uff1b\n\n\n\n\n\n\nTemperature Type\n - \u7528\u4e8e\u63cf\u8ff0\u4f53\u6e29\u8ba1\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u503c\u4e3a \n0x03\n\uff0c\u5373\u4f4d\u4e8e\u8033\u6735\u5904\u3002\n\n\n\n\n\n\n\u6e90\u4ee3\u7801\n\n\n#include \nevents/mbed_events.h\n\n\n#include \nmbed.h\n\n\n#include \nble/BLE.h\n\n\n#include \nble/services/HealthThermometerService.h\n\n\nDigitalOut led1\n(\nLED1, \n1\n)\n;\n\n\nconst static char     DEVICE_NAME\n[]\n        \n=\n \nTherm\n;\n\nstatic const uint16_t uuid16_list\n[]\n        \n=\n \n{\nGattService::UUID_HEALTH_THERMOMETER_SERVICE\n}\n;\n\n\nstatic float                     \ncurrentTemperature\n   \n=\n \n39\n.6\n;\n\nstatic HealthThermometerService *thermometerServicePtr\n;\n\n\nstatic EventQueue eventQueue\n(\n\n    /* event count */ \n16\n * /* event size */ \n32\n\n\n)\n;\n\n\n/* Restart Advertising on disconnection*/\nvoid disconnectionCallback\n(\nconst Gap::DisconnectionCallbackParams_t *\n)\n\n\n{\n\n    BLE::Instance\n()\n.gap\n()\n.startAdvertising\n()\n;\n\n\n}\n\n\nvoid updateSensorValue\n(\nvoid\n)\n \n{\n\n    /* Do blocking calls or whatever is necessary \nfor\n sensor polling.\n       In our \ncase\n, we simply update the Temperature measurement. */\n    \ncurrentTemperature\n \n=\n \n(\ncurrentTemperature + \n0\n.1 \n \n43\n.0\n)\n ? \n39\n.6 : currentTemperature + \n0\n.1\n;\n\n    thermometerServicePtr-\nupdateTemperature\n(\ncurrentTemperature\n)\n;\n\n\n}\n\n\nvoid periodicCallback\n(\nvoid\n)\n\n\n{\n\n    \nled1\n \n=\n !led1\n;\n /* Do blinky on LED1 \nwhile\n we\nre waiting \nfor\n BLE events */\n\n    \nif\n \n(\nBLE::Instance\n()\n.gap\n()\n.getState\n()\n.connected\n)\n \n{\n\n        eventQueue.call\n(\nupdateSensorValue\n)\n;\n\n    \n}\n\n\n}\n\n\nvoid onBleInitError\n(\nBLE \nble, ble_error_t error\n)\n\n\n{\n\n   /* Initialization error handling should go here */\n\n}\n\n\nvoid bleInitComplete\n(\nBLE::InitializationCompleteCallbackContext *params\n)\n\n\n{\n\n    BLE\n        \nble\n   \n=\n params-\nble\n;\n\n    ble_error_t \nerror\n \n=\n params-\nerror\n;\n\n\n    \nif\n \n(\nerror !\n=\n BLE_ERROR_NONE\n)\n \n{\n\n        onBleInitError\n(\nble, error\n)\n;\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nif\n \n(\nble.getInstanceID\n()\n !\n=\n BLE::DEFAULT_INSTANCE\n)\n \n{\n\n        \nreturn\n;\n\n    \n}\n\n\n    ble.gap\n()\n.onDisconnection\n(\ndisconnectionCallback\n)\n;\n\n\n    /* Setup primary service. */\n    \nthermometerServicePtr\n \n=\n new HealthThermometerService\n(\nble, currentTemperature, HealthThermometerService::LOCATION_EAR\n)\n;\n\n\n    /* setup advertising */\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::BREDR_NOT_SUPPORTED \n|\n GapAdvertisingData::LE_GENERAL_DISCOVERABLE\n)\n;\n\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::COMPLETE_LIST_16BIT_SERVICE_IDS, \n(\nuint8_t *\n)\nuuid16_list, sizeof\n(\nuuid16_list\n))\n;\n\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::THERMOMETER_EAR\n)\n;\n\n    ble.gap\n()\n.accumulateAdvertisingPayload\n(\nGapAdvertisingData::COMPLETE_LOCAL_NAME, \n(\nuint8_t *\n)\nDEVICE_NAME, sizeof\n(\nDEVICE_NAME\n))\n;\n\n    ble.gap\n()\n.setAdvertisingType\n(\nGapAdvertisingParams::ADV_CONNECTABLE_UNDIRECTED\n)\n;\n\n    ble.gap\n()\n.setAdvertisingInterval\n(\n1000\n)\n;\n /* 1000ms */\n    ble.gap\n()\n.startAdvertising\n()\n;\n\n\n}\n\n\nvoid scheduleBleEventsProcessing\n(\nBLE::OnEventsToProcessCallbackContext* context\n)\n \n{\n\n    BLE \nble\n \n=\n BLE::Instance\n()\n;\n\n    eventQueue.call\n(\nCallback\nvoid\n()\n(\nble, \nBLE::processEvents\n))\n;\n\n\n}\n\n\nint main\n()\n\n\n{\n\n    eventQueue.call_every\n(\n500\n, periodicCallback\n)\n;\n\n\n    BLE \nble\n \n=\n BLE::Instance\n()\n;\n\n    ble.onEventsToProcess\n(\nscheduleBleEventsProcessing\n)\n;\n\n    ble.init\n(\nbleInitComplete\n)\n;\n\n\n    eventQueue.dispatch_forever\n()\n;\n\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./BLE_Thermometer\n\n\n# \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002\n\n$ mbed add \nyour-mbed-os-path\n\n\n\n# \u7f16\u8bd1\n\n$ mbed compile -m NRF52832_MDK -t GCC_ARM\n\n\n# \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n\n...\n\nLink: BLE_Thermometer\nElf2Bin: BLE_Thermometer\n+-----------------------+-------+-------+------+\n\n|\n Module                \n|\n .text \n|\n .data \n|\n .bss \n|\n\n+-----------------------+-------+-------+------+\n\n|\n Fill                  \n|\n   \n205\n \n|\n     \n7\n \n|\n   \n43\n \n|\n\n\n|\n Misc                  \n|\n \n28980\n \n|\n  \n2492\n \n|\n  \n230\n \n|\n\n\n|\n drivers               \n|\n   \n732\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events                \n|\n    \n48\n \n|\n     \n0\n \n|\n    \n0\n \n|\n\n\n|\n events/equeue         \n|\n  \n1250\n \n|\n     \n0\n \n|\n   \n61\n \n|\n\n\n|\n features/FEATURE_BLE  \n|\n \n16412\n \n|\n     \n5\n \n|\n  \n540\n \n|\n\n\n|\n hal                   \n|\n   \n506\n \n|\n     \n0\n \n|\n   \n16\n \n|\n\n\n|\n platform              \n|\n  \n1526\n \n|\n     \n4\n \n|\n  \n264\n \n|\n\n\n|\n rtos                  \n|\n   \n102\n \n|\n     \n4\n \n|\n    \n4\n \n|\n\n\n|\n rtos/rtx              \n|\n  \n6425\n \n|\n    \n20\n \n|\n \n4278\n \n|\n\n\n|\n targets/TARGET_NORDIC \n|\n \n23679\n \n|\n   \n140\n \n|\n \n2200\n \n|\n\n\n|\n Subtotals             \n|\n \n79865\n \n|\n  \n2672\n \n|\n \n7636\n \n|\n\n+-----------------------+-------+-------+------+\nAllocated Heap: \n40940\n bytes\nAllocated Stack: \n2048\n bytes\nTotal Static RAM memory \n(\ndata + bss\n)\n: \n10308\n bytes\nTotal RAM memory \n(\ndata + bss + heap + stack\n)\n: \n53296\n bytes\nTotal Flash memory \n(\ntext + data + misc\n)\n: \n82537\n bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Thermometer.hex\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \nBLE_Thermometer.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Thermometer.hex\n\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u5c06\u53d1\u73b0\u8be5\u8bbe\u5907\uff0c\u8fde\u63a5\u540e\u8bfb\u53d6\u4f53\u6e29\u8ba1\u7684\u6570\u636e\uff1a\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\n\n\nmbed BLE API \u6587\u6863\n\n\n\n\n\n\nmbed-os-example-ble/BLE_Thermometer\n\n\n\n\n\n\nHealth Thermometer Service\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "BLE Thermometer"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_1", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\u4f53\u6e29\u8ba1"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_2", 
            "text": "\u672c\u4f8b\u5c06\u521b\u5efa\u4e00\u4e2a\u84dd\u7259\u4f53\u6e29\u8ba1\uff0c\u8be5\u670d\u52a1\u7684\u76f8\u5173\u89c4\u5b9a\u53ef\u4ee5\u53c2\u8003  Health Thermometer Profile \uff0c\u8fd9\u91cc\u5c06\u5305\u542b\u4e24\u4e2a Characteristic\uff1a    Temperature Measurement  - \u7528\u4e8e\u53d1\u9001\u6e29\u5ea6\u6d4b\u91cf\u503c\uff0c\u8fd9\u91cc\u7528\u8f6f\u4ef6\u8fdb\u884c\u6a21\u62df\uff0c\u521d\u59cb\u6e29\u5ea6 39.6\uff0c\u6bcf 500ms \u589e\u52a0 0.1\uff0c\u8d85\u8fc7 43 \u5c31\u91cd\u65b0\u5f00\u59cb\u8ba1\u6570\uff1b    Temperature Type  - \u7528\u4e8e\u63cf\u8ff0\u4f53\u6e29\u8ba1\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u503c\u4e3a  0x03 \uff0c\u5373\u4f4d\u4e8e\u8033\u6735\u5904\u3002", 
            "title": "\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_3", 
            "text": "#include  events/mbed_events.h  #include  mbed.h  #include  ble/BLE.h  #include  ble/services/HealthThermometerService.h \n\nDigitalOut led1 ( LED1,  1 ) ; \n\nconst static char     DEVICE_NAME []          =   Therm ; \nstatic const uint16_t uuid16_list []          =   { GattService::UUID_HEALTH_THERMOMETER_SERVICE } ; \n\nstatic float                      currentTemperature     =   39 .6 ; \nstatic HealthThermometerService *thermometerServicePtr ; \n\nstatic EventQueue eventQueue ( \n    /* event count */  16  * /* event size */  32  ) ; \n\n/* Restart Advertising on disconnection*/\nvoid disconnectionCallback ( const Gap::DisconnectionCallbackParams_t * )  { \n    BLE::Instance () .gap () .startAdvertising () ;  } \n\nvoid updateSensorValue ( void )   { \n    /* Do blocking calls or whatever is necessary  for  sensor polling.\n       In our  case , we simply update the Temperature measurement. */\n     currentTemperature   =   ( currentTemperature +  0 .1    43 .0 )  ?  39 .6 : currentTemperature +  0 .1 ; \n    thermometerServicePtr- updateTemperature ( currentTemperature ) ;  } \n\nvoid periodicCallback ( void )  { \n     led1   =  !led1 ;  /* Do blinky on LED1  while  we re waiting  for  BLE events */\n\n     if   ( BLE::Instance () .gap () .getState () .connected )   { \n        eventQueue.call ( updateSensorValue ) ; \n     }  } \n\nvoid onBleInitError ( BLE  ble, ble_error_t error )  { \n   /* Initialization error handling should go here */ } \n\nvoid bleInitComplete ( BLE::InitializationCompleteCallbackContext *params )  { \n    BLE          ble     =  params- ble ; \n    ble_error_t  error   =  params- error ; \n\n     if   ( error ! =  BLE_ERROR_NONE )   { \n        onBleInitError ( ble, error ) ; \n         return ; \n     } \n\n     if   ( ble.getInstanceID ()  ! =  BLE::DEFAULT_INSTANCE )   { \n         return ; \n     } \n\n    ble.gap () .onDisconnection ( disconnectionCallback ) ; \n\n    /* Setup primary service. */\n     thermometerServicePtr   =  new HealthThermometerService ( ble, currentTemperature, HealthThermometerService::LOCATION_EAR ) ; \n\n    /* setup advertising */\n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::BREDR_NOT_SUPPORTED  |  GapAdvertisingData::LE_GENERAL_DISCOVERABLE ) ; \n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::COMPLETE_LIST_16BIT_SERVICE_IDS,  ( uint8_t * ) uuid16_list, sizeof ( uuid16_list )) ; \n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::THERMOMETER_EAR ) ; \n    ble.gap () .accumulateAdvertisingPayload ( GapAdvertisingData::COMPLETE_LOCAL_NAME,  ( uint8_t * ) DEVICE_NAME, sizeof ( DEVICE_NAME )) ; \n    ble.gap () .setAdvertisingType ( GapAdvertisingParams::ADV_CONNECTABLE_UNDIRECTED ) ; \n    ble.gap () .setAdvertisingInterval ( 1000 ) ;  /* 1000ms */\n    ble.gap () .startAdvertising () ;  } \n\nvoid scheduleBleEventsProcessing ( BLE::OnEventsToProcessCallbackContext* context )   { \n    BLE  ble   =  BLE::Instance () ; \n    eventQueue.call ( Callback void () ( ble,  BLE::processEvents )) ;  } \n\nint main ()  { \n    eventQueue.call_every ( 500 , periodicCallback ) ; \n\n    BLE  ble   =  BLE::Instance () ; \n    ble.onEventsToProcess ( scheduleBleEventsProcessing ) ; \n    ble.init ( bleInitComplete ) ; \n\n    eventQueue.dispatch_forever () ; \n\n     return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_4", 
            "text": "$  cd  ./BLE_Thermometer # \u6dfb\u52a0\u5df2\u7ecf\u514b\u9686\u5230\u672c\u5730\u7684 mbed-os \u5e93\u3002\u82e5\u6709\u7591\u95ee\uff0c\u8bf7\u53c2\u8003 Blinky \u793a\u4f8b\u3002 \n$ mbed add  your-mbed-os-path  # \u7f16\u8bd1 \n$ mbed compile -m NRF52832_MDK -t GCC_ARM # \u82e5\u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n\n...\n\nLink: BLE_Thermometer\nElf2Bin: BLE_Thermometer\n+-----------------------+-------+-------+------+ |  Module                 |  .text  |  .data  |  .bss  | \n+-----------------------+-------+-------+------+ |  Fill                   |     205   |       7   |     43   |  |  Misc                   |   28980   |    2492   |    230   |  |  drivers                |     732   |       0   |      0   |  |  events                 |      48   |       0   |      0   |  |  events/equeue          |    1250   |       0   |     61   |  |  features/FEATURE_BLE   |   16412   |       5   |    540   |  |  hal                    |     506   |       0   |     16   |  |  platform               |    1526   |       4   |    264   |  |  rtos                   |     102   |       4   |      4   |  |  rtos/rtx               |    6425   |      20   |   4278   |  |  targets/TARGET_NORDIC  |   23679   |     140   |   2200   |  |  Subtotals              |   79865   |    2672   |   7636   | \n+-----------------------+-------+-------+------+\nAllocated Heap:  40940  bytes\nAllocated Stack:  2048  bytes\nTotal Static RAM memory  ( data + bss ) :  10308  bytes\nTotal RAM memory  ( data + bss + heap + stack ) :  53296  bytes\nTotal Flash memory  ( text + data + misc ) :  82537  bytes\n\nImage: ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Thermometer.hex", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  BLE_Thermometer.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./BUILD/NRF52832_MDK/GCC_ARM/BLE_Thermometer.hex \n\n\u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u5c06\u53d1\u73b0\u8be5\u8bbe\u5907\uff0c\u8fde\u63a5\u540e\u8bfb\u53d6\u4f53\u6e29\u8ba1\u7684\u6570\u636e\uff1a   Enjoy !", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_6", 
            "text": "mbed BLE API \u6587\u6863    mbed-os-example-ble/BLE_Thermometer    Health Thermometer Service", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/mbedos5/example-ble-thermometer/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/mbedos5/example-more/", 
            "text": "\u66f4\u591a\u6709\u8da3\u7684\u793a\u4f8b\u6b63\u5728\u5f00\u53d1\u4e2d......\n\n\n\u6b22\u8fce\u4f60\u6765\u63d0\u4ea4\u793a\u4f8b\uff0c\u4f60\u5c06\u4f1a\u5e2e\u5230\u66f4\u591a\u7684\u4eba\uff01\n\n\nPull Requests", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/zephyr/", 
            "text": "Zephyr \nA Small, Scalable, Open Source RTOS for IoT Embedded Devices\n\n\n\u524d\u5f80 Zephyr \u5b98\u7f51\n\n\n\u7b80\u4ecb\n\n\nZephyr \u662f Linux \u57fa\u91d1\u4f1a\u53d1\u5e03\u7684\u5f00\u6e90\u7269\u8054\u7f51\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411\u8d44\u6e90\u53d7\u9650\u7684\u7269\u8054\u7f51\u8bbe\u5907\u3002\u76ee\u524d Zephyr \u9879\u76ee\u5df2\u7ecf\u83b7\u5f97\u4e86 Intel, Linaro, NXP, Synopsys, Nordic \u7b49\u5408\u4f5c\u4f19\u4f34\u7684\u652f\u6301\u3002Wind River \u4e5f\u5411 Zephyr \u8d21\u732e\u4e86\u5df2\u7ecf\u5546\u4e1a\u5316\u7684 VxWorks Microkernel\uff0c\u8be5\u5185\u6838\u5df2\u7ecf\u6f14\u5316\u8d85\u8fc7 20 \u5e74\u3002\n\n\nZephyr \u7ee7\u627f\u4e86 Linux \u7684\u5f88\u591a\u505a\u6cd5\uff0c\u53c8\u6ca1\u6709 Linux \u90a3\u4e48\u590d\u6742\uff0c\u65e0\u8bba\u662f\u51fa\u4e8e\u5b66\u4e60\u7684\u76ee\u7684\u8fd8\u662f\u4e3a\u4f60\u7684\u7269\u8054\u7f51\u8bbe\u5907\u9009\u62e9 RTOS\uff0cZephyr \u90fd\u5c06\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\n\u672c\u6587\u6863\u4e3b\u8981\u4ee5 nRF52832-MDK \u4f5c\u4e3a\u786c\u4ef6\u5e73\u53f0\uff0c\u5bf9 Zephyr \u5f00\u53d1\u505a\u4e00\u4e9b\u4ecb\u7ecd\uff0c\u4e5f\u671f\u5f85\u66f4\u591a\u670b\u53cb\u4e00\u8d77\u6765\u5b8c\u5584\u8fd9\u4e2a\u9879\u76ee\u3002\n\n\n\n\n\u63d0\u793a\n\n\nnRF52832-MDK \u76ee\u524d\u5df2\u7ecf\u652f\u6301 Zephyr \u6700\u65b0\u53d1\u5e03\u7684 1.7.0 \u7248\u672c\u3002\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5b98\u65b9\u6587\u6863\n\n\n\u5173\u4e8e Zephyr \u7684\u4e00\u4e9b\u8ba4\u8bc6\n\n\nZephyr Project \u6587\u6863 - \u4e2d\u6587\u7248\n (\u7531\u56fd\u5185\u7231\u597d\u8005\u7ffb\u8bd1)\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zephyr/#zephyr-a-small-scalable-open-source-rtos-for-iot-embedded-devices", 
            "text": "\u524d\u5f80 Zephyr \u5b98\u7f51", 
            "title": "Zephyr A Small, Scalable, Open Source RTOS for IoT Embedded Devices"
        }, 
        {
            "location": "/zephyr/#_1", 
            "text": "Zephyr \u662f Linux \u57fa\u91d1\u4f1a\u53d1\u5e03\u7684\u5f00\u6e90\u7269\u8054\u7f51\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411\u8d44\u6e90\u53d7\u9650\u7684\u7269\u8054\u7f51\u8bbe\u5907\u3002\u76ee\u524d Zephyr \u9879\u76ee\u5df2\u7ecf\u83b7\u5f97\u4e86 Intel, Linaro, NXP, Synopsys, Nordic \u7b49\u5408\u4f5c\u4f19\u4f34\u7684\u652f\u6301\u3002Wind River \u4e5f\u5411 Zephyr \u8d21\u732e\u4e86\u5df2\u7ecf\u5546\u4e1a\u5316\u7684 VxWorks Microkernel\uff0c\u8be5\u5185\u6838\u5df2\u7ecf\u6f14\u5316\u8d85\u8fc7 20 \u5e74\u3002  Zephyr \u7ee7\u627f\u4e86 Linux \u7684\u5f88\u591a\u505a\u6cd5\uff0c\u53c8\u6ca1\u6709 Linux \u90a3\u4e48\u590d\u6742\uff0c\u65e0\u8bba\u662f\u51fa\u4e8e\u5b66\u4e60\u7684\u76ee\u7684\u8fd8\u662f\u4e3a\u4f60\u7684\u7269\u8054\u7f51\u8bbe\u5907\u9009\u62e9 RTOS\uff0cZephyr \u90fd\u5c06\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002  \u672c\u6587\u6863\u4e3b\u8981\u4ee5 nRF52832-MDK \u4f5c\u4e3a\u786c\u4ef6\u5e73\u53f0\uff0c\u5bf9 Zephyr \u5f00\u53d1\u505a\u4e00\u4e9b\u4ecb\u7ecd\uff0c\u4e5f\u671f\u5f85\u66f4\u591a\u670b\u53cb\u4e00\u8d77\u6765\u5b8c\u5584\u8fd9\u4e2a\u9879\u76ee\u3002   \u63d0\u793a  nRF52832-MDK \u76ee\u524d\u5df2\u7ecf\u652f\u6301 Zephyr \u6700\u65b0\u53d1\u5e03\u7684 1.7.0 \u7248\u672c\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zephyr/#_2", 
            "text": "Zephyr \u5b98\u65b9\u6587\u6863  \u5173\u4e8e Zephyr \u7684\u4e00\u4e9b\u8ba4\u8bc6  Zephyr Project \u6587\u6863 - \u4e2d\u6587\u7248  (\u7531\u56fd\u5185\u7231\u597d\u8005\u7ffb\u8bd1)", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/#_3", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/", 
            "text": "\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff1aMac OSX\n\n\n\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Mac OSX \u7cfb\u7edf\u4f7f\u7528 \nGNU ARM Embedded Toolchain\n \u5feb\u901f\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff0c\u5e76\u6210\u529f\u7f16\u8bd1 \nHello World\n \u793a\u4f8b\u3002\n\n\n1\u3001\u5b89\u88c5 GCC \u5de5\u5177\u94fe\n\n\nGNU ARM Embedded Toolchain\n \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M \n Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728 \nARM \u5b98\u7f51\n\u4e0b\u8f7d\u6700\u65b0 OSX \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5 \ngcc-arm-none-eabi-6-2017-q1-update\n \u7248\u672c\u4e3a\u4f8b\uff1a\n\n\n\u5c06\u4e0b\u8f7d\u5b8c\u7684\u538b\u7f29\u5305\u89e3\u538b\u5230\u4f60\u81ea\u5df1\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a\n\n\n# \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\n\n$ \ncd\n your_toolchain_path/\n$ tar -xvf gcc-arm-none-eabi-6-2017-q1-update-mac.tar.bz2\n\n\n# \u9a8c\u8bc1\u7248\u672c\n\n$ \ncd\n your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin/\n$ ./arm-none-eabi-gcc --version\n\n\n\n\n\n\n2\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n\n\u7f16\u8bd1 Zephyr \u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5de5\u5177\u652f\u6301\uff0c\u5728 Mac OSX \u7cfb\u7edf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \nHomebrew\n \u6765\u5b89\u88c5\u8fd9\u4e9b\u5de5\u5177\uff1a\n\n\n$ brew install gettext qemu help2man mpfr gmp coreutils wget python3\n\n$ brew tap homebrew/dupes\n\n$ brew install grep --with-default-names\n\n$ pip3 install ply\n\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u53ef\u4ee5\u53c2\u8003 Zephyr \n\u5b98\u65b9\u6587\u6863\n\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u5236\u4f5c\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u6240\u4ee5\u65e0\u9700\u5b89\u88c5 \ncrosstool-ng\n\u3002\u611f\u5174\u8da3\u7684\u4f19\u8ba1\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\uff01\n\n\n\n\n3\u3001\u514b\u9686 Zephyr \u6e90\u7801\n\n\nZephyr \u6e90\u7801\u6258\u7ba1\u5728 \nhttps://gerrit.zephyrproject.org/r/zephyr\n\uff0c\u8fd9\u91cc\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u6211\u5728 GitHub \u505a\u4e86\u955c\u50cf\uff0c\u5e76\u589e\u52a0 \nnrf52832-mdk\n \u5206\u652f\u6765\u652f\u6301 nRF52832-MDK \u7684\u5f00\u53d1\u3002\n\n\n# \u514b\u9686 Zephyr \u6e90\u7801 \u5230 zephyr-project\n\n$ git clone https://github.com/makerdiary/zephyr.git zephyr-project\n$ \ncd\n zephyr-project/\n\n\n# \u62c9\u53d6 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\n\n$ git pull origin nrf52832-mdk\n\n\n\n\n\n4\u3001\u914d\u7f6e\u73af\u5883\u53d8\u91cf\n\n\n\u5728\u8fdb\u884c\u7f16\u8bd1\u524d\uff0c\u9700\u8981\u914d\u7f6e\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a\n\n\n$ \nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\nyour_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update\n\n\n$ \nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u547d\u4ee4\u6dfb\u52a0\u5230 \n~/.bash_profile\n \u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a\n\n\n# \u5728~/.bash_profile\u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\nyour_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\n\n# \u4f7f\u5176\u751f\u6548\n\n$ \nsource\n .bash_profile\n\n\n# \u4f7f\u7528 echo \u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\uff1a\n\n$ \necho\n \n$GCCARMEMB_TOOLCHAIN_PATH\n\n$ \necho\n \n$ZEPHYR_GCC_VARIANT\n\n\n\n\n\n\n5\u3001\u7f16\u8bd1\n\n\n\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4ee5\u7f16\u8bd1 \n./zephyr-project/samples/hello_world\n \u4e3a\u4f8b\uff1a\n\n\n$ \ncd\n ./zephyr-project/\n$ \nsource\n zephyr-env.sh\n\n$ \ncd\n samples/hello_world\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n\n\n\n\u7f16\u8bd1\u6210\u529f\uff0c\u8f93\u51fa\u56fa\u4ef6\uff1a\n\n\n\n\n6\u3001\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n/outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a \n115200\n\uff1a\n\n\n$ screen /dev/cu.usbmodem1412 \n115200\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0cZephyr \u5f00\u53d1\u73af\u5883\u5df2\u7ecf\u642d\u5efa\u5b8c\u6210\uff0cEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5165\u95e8\u6307\u5357\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Mac OSX"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#zephyr-mac-osx", 
            "text": "\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Mac OSX \u7cfb\u7edf\u4f7f\u7528  GNU ARM Embedded Toolchain  \u5feb\u901f\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff0c\u5e76\u6210\u529f\u7f16\u8bd1  Hello World  \u793a\u4f8b\u3002", 
            "title": "\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff1aMac OSX"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#1-gcc", 
            "text": "GNU ARM Embedded Toolchain  \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M   Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728  ARM \u5b98\u7f51 \u4e0b\u8f7d\u6700\u65b0 OSX \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5  gcc-arm-none-eabi-6-2017-q1-update  \u7248\u672c\u4e3a\u4f8b\uff1a  \u5c06\u4e0b\u8f7d\u5b8c\u7684\u538b\u7f29\u5305\u89e3\u538b\u5230\u4f60\u81ea\u5df1\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a  # \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55 \n$  cd  your_toolchain_path/\n$ tar -xvf gcc-arm-none-eabi-6-2017-q1-update-mac.tar.bz2 # \u9a8c\u8bc1\u7248\u672c \n$  cd  your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update/bin/\n$ ./arm-none-eabi-gcc --version", 
            "title": "1\u3001\u5b89\u88c5 GCC \u5de5\u5177\u94fe"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#2", 
            "text": "\u7f16\u8bd1 Zephyr \u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5de5\u5177\u652f\u6301\uff0c\u5728 Mac OSX \u7cfb\u7edf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528  Homebrew  \u6765\u5b89\u88c5\u8fd9\u4e9b\u5de5\u5177\uff1a  $ brew install gettext qemu help2man mpfr gmp coreutils wget python3\n\n$ brew tap homebrew/dupes\n\n$ brew install grep --with-default-names\n\n$ pip3 install ply   \u63d0\u793a  \u53ef\u4ee5\u53c2\u8003 Zephyr  \u5b98\u65b9\u6587\u6863 \uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u5236\u4f5c\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u6240\u4ee5\u65e0\u9700\u5b89\u88c5  crosstool-ng \u3002\u611f\u5174\u8da3\u7684\u4f19\u8ba1\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\uff01", 
            "title": "2\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#3-zephyr", 
            "text": "Zephyr \u6e90\u7801\u6258\u7ba1\u5728  https://gerrit.zephyrproject.org/r/zephyr \uff0c\u8fd9\u91cc\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u6211\u5728 GitHub \u505a\u4e86\u955c\u50cf\uff0c\u5e76\u589e\u52a0  nrf52832-mdk  \u5206\u652f\u6765\u652f\u6301 nRF52832-MDK \u7684\u5f00\u53d1\u3002  # \u514b\u9686 Zephyr \u6e90\u7801 \u5230 zephyr-project \n$ git clone https://github.com/makerdiary/zephyr.git zephyr-project\n$  cd  zephyr-project/ # \u62c9\u53d6 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801 \n$ git pull origin nrf52832-mdk", 
            "title": "3\u3001\u514b\u9686 Zephyr \u6e90\u7801"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#4", 
            "text": "\u5728\u8fdb\u884c\u7f16\u8bd1\u524d\uff0c\u9700\u8981\u914d\u7f6e\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a  $  export   GCCARMEMB_TOOLCHAIN_PATH = your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update \n\n$  export   ZEPHYR_GCC_VARIANT = gccarmemb  \u4e5f\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u547d\u4ee4\u6dfb\u52a0\u5230  ~/.bash_profile  \u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a  # \u5728~/.bash_profile\u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a  export   GCCARMEMB_TOOLCHAIN_PATH = your_toolchain_path/gcc-arm-none-eabi-6-2017-q1-update  export   ZEPHYR_GCC_VARIANT = gccarmemb # \u4f7f\u5176\u751f\u6548 \n$  source  .bash_profile # \u4f7f\u7528 echo \u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\uff1a \n$  echo   $GCCARMEMB_TOOLCHAIN_PATH \n$  echo   $ZEPHYR_GCC_VARIANT", 
            "title": "4\u3001\u914d\u7f6e\u73af\u5883\u53d8\u91cf"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#5", 
            "text": "\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4ee5\u7f16\u8bd1  ./zephyr-project/samples/hello_world  \u4e3a\u4f8b\uff1a  $  cd  ./zephyr-project/\n$  source  zephyr-env.sh\n\n$  cd  samples/hello_world\n$ make  BOARD = nrf52832_mdk  \u7f16\u8bd1\u6210\u529f\uff0c\u8f93\u51fa\u56fa\u4ef6\uff1a", 
            "title": "5\u3001\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#6", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  /outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex  \u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a  115200 \uff1a  $ screen /dev/cu.usbmodem1412  115200    \u81f3\u6b64\uff0cZephyr \u5f00\u53d1\u73af\u5883\u5df2\u7ecf\u642d\u5efa\u5b8c\u6210\uff0cEnjoy !", 
            "title": "6\u3001\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#_1", 
            "text": "Zephyr \u5165\u95e8\u6307\u5357", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/setup-devenv-osx/#_2", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/", 
            "text": "\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff1aLinux\n\n\n\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Linux \u7cfb\u7edf\u4f7f\u7528 Zephyr SDK \u5feb\u901f\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff0c\u5e76\u6210\u529f\u7f16\u8bd1 \nHello World\n \u793a\u4f8b\u3002\n\n\n\n\n\u63d0\u9192\n\n\n\u8fd9\u91cc\u4ee5 Ubuntu 16.04 LTS 64-bit \u7cfb\u7edf\u4e3a\u4f8b\uff0c\u8fd9\u4e5f\u662f\u5b98\u65b9\u63a8\u8350\u7684\u73af\u5883\u3002\n\n\n\n\n1\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n\n\u7f16\u8bd1 Zephyr \u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5de5\u5177\u652f\u6301\uff0c\u5728 Ubuntu \u7cfb\u7edf\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b8c\u6210\u5b89\u88c5\uff1a\n\n\n# \u5b89\u88c5\u524d\uff0c\u66f4\u65b0\u7cfb\u7edf\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n\n\n# \u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n$ sudo apt-get install git make gcc g++ python3-ply ncurses-dev python-yaml python2 dfu-util\n\n\n\n\n\n2\u3001\u5b89\u88c5 Zephyr SDK\n\n\nZephyr \u4e3a Linux \u7cfb\u7edf\u63d0\u4f9b\u4e86 SDK\uff0c\u8be5 SDK \u5305\u542b\u4e86\u6240\u6709\u5fc5\u8981\u7684\u5de5\u5177\u548c\u4ea4\u53c9\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u652f\u6301\u4ee5\u4e0b\u67b6\u6784\uff1a\n\n\n\n\nX86\n\n\nX86 IAMCU ABI\n\n\nARM\n\n\nARC\n\n\nNIOS II\n\n\n\n\n\u5b98\u7f51\n\u4e0b\u8f7d\n\u6709\u70b9\u6162\uff0c\u6211\u5c06\u5176\u653e\u5230\u4e86\u767e\u5ea6\u7f51\u76d8\uff1a\n\nZephyr SDK v0.9\n\u3002\n\n\n\u4e0b\u8f7d\u5b8c\u540e\uff0c\u8fdb\u884c\u5b89\u88c5\uff1a\n\n\n$ chmod +x zephyr-sdk-\nversion\n-setup.run\n\n$ sudo ./zephyr-sdk-\nversion\n-setup.run\n\n\n# \u4ee5\u4e0b\u4e3a\u6210\u529f\u5b89\u88c5\u7684\u8f93\u51fa\uff1a\n\nVerifying archive integrity... All good.\nUncompressing SDK \nfor\n Zephyr  \n100\n%  \nEnter target directory \nfor\n SDK \n(\ndefault: /opt/zephyr-sdk/\n)\n: \nInstalling SDK to /opt/zephyr-sdk\nCreating directory /opt/zephyr-sdk\nSuccess\n \n[\n*\n]\n Installing x86 tools... \n \n[\n*\n]\n Installing arm tools... \n \n[\n*\n]\n Installing arc tools... \n \n[\n*\n]\n Installing iamcu tools... \n \n[\n*\n]\n Installing nios2 tools... \n \n[\n*\n]\n Installing xtensa tools... \n \n[\n*\n]\n Installing riscv32 tools... \n \n[\n*\n]\n Installing additional host tools... \nSuccess installing SDK. SDK is ready to be used.\n\n\n\n\n\n\u4e3a Zephyr SDK \u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a\n\n\n$ \nexport\n \nZEPHYR_GCC_VARIANT\n=\nzephyr\n\n$ \nexport\n \nZEPHYR_SDK_INSTALL_DIR\n=\n\u8fd9\u91cc\u9ed8\u8ba4\u7684\u8def\u5f84\u662f\uff1a/opt/zephyr-sdk\n\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u547d\u4ee4\u6dfb\u52a0\u5230 \n~/.bash_profile\n \u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a\n\n\n# \u5728~/.bash_profile\u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\nzephyr\n\nexport\n \nZEPHYR_SDK_INSTALL_DIR\n=\n\u8fd9\u91cc\u9ed8\u8ba4\u7684\u8def\u5f84\u662f\uff1a/opt/zephyr-sdk\n\n\n\n# \u4f7f\u5176\u751f\u6548\n\n$ \nsource\n .bash_profile\n\n\n# \u4f7f\u7528 echo \u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\uff1a\n\n$ \necho\n \n$ZEPHYR_GCC_VARIANT\n\n$ \necho\n \n$ZEPHYR_SDK_INSTALL_DIR\n\n\n\n\n\n\n3\u3001\u514b\u9686 Zephyr \u6e90\u7801\n\n\nZephyr \u6e90\u7801\u6258\u7ba1\u5728 \nhttps://gerrit.zephyrproject.org/r/zephyr\n\uff0c\u8fd9\u91cc\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u6211\u5728 GitHub \u505a\u4e86\u955c\u50cf\uff0c\u5e76\u589e\u52a0 \nnrf52832-mdk\n \u5206\u652f\u6765\u652f\u6301 nRF52832-MDK \u7684\u5f00\u53d1\u3002\n\n\n# \u514b\u9686 Zephyr \u6e90\u7801 \u5230 zephyr-project\n\n$ git clone https://github.com/makerdiary/zephyr.git zephyr-project\n$ \ncd\n zephyr-project/\n\n\n# \u62c9\u53d6 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\n\n$ git pull origin nrf52832-mdk\n\n\n\n\n\n4\u3001\u7f16\u8bd1\n\n\n\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4ee5\u7f16\u8bd1 \n./zephyr-project/samples/hello_world\n \u4e3a\u4f8b\uff1a\n\n\n$ \ncd\n ./zephyr-project/\n$ \nsource\n zephyr-env.sh\n\n$ \ncd\n samples/hello_world\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n\n\n\n\u7f16\u8bd1\u6210\u529f\uff0c\u8f93\u51fa\u56fa\u4ef6\uff1a\n\n\n\n\n5\u3001\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n/outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n\n\n\u6ce8\u610f\n\n\npyocd-flashtool\n \u548c \nscreen\n \u9700\u8981\u6743\u9650\uff0c\u8bb0\u5f97\u589e\u52a0 \nsudo\n !\n\n\n\n\n$ sudo pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a \n115200\n\uff1a\n\n\n$ sudo screen /dev/ttyACM0 \n115200\n\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0cZephyr \u5f00\u53d1\u73af\u5883\u5df2\u7ecf\u642d\u5efa\u5b8c\u6210\uff0cEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5165\u95e8\u6307\u5357\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Linux"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#zephyr-linux", 
            "text": "\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Linux \u7cfb\u7edf\u4f7f\u7528 Zephyr SDK \u5feb\u901f\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff0c\u5e76\u6210\u529f\u7f16\u8bd1  Hello World  \u793a\u4f8b\u3002   \u63d0\u9192  \u8fd9\u91cc\u4ee5 Ubuntu 16.04 LTS 64-bit \u7cfb\u7edf\u4e3a\u4f8b\uff0c\u8fd9\u4e5f\u662f\u5b98\u65b9\u63a8\u8350\u7684\u73af\u5883\u3002", 
            "title": "\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff1aLinux"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#1", 
            "text": "\u7f16\u8bd1 Zephyr \u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5de5\u5177\u652f\u6301\uff0c\u5728 Ubuntu \u7cfb\u7edf\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b8c\u6210\u5b89\u88c5\uff1a  # \u5b89\u88c5\u524d\uff0c\u66f4\u65b0\u7cfb\u7edf \n$ sudo apt-get update\n$ sudo apt-get upgrade # \u5b89\u88c5\u4f9d\u8d56\u5de5\u5177 \n$ sudo apt-get install git make gcc g++ python3-ply ncurses-dev python-yaml python2 dfu-util", 
            "title": "1\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#2-zephyr-sdk", 
            "text": "Zephyr \u4e3a Linux \u7cfb\u7edf\u63d0\u4f9b\u4e86 SDK\uff0c\u8be5 SDK \u5305\u542b\u4e86\u6240\u6709\u5fc5\u8981\u7684\u5de5\u5177\u548c\u4ea4\u53c9\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u652f\u6301\u4ee5\u4e0b\u67b6\u6784\uff1a   X86  X86 IAMCU ABI  ARM  ARC  NIOS II   \u5b98\u7f51 \u4e0b\u8f7d \u6709\u70b9\u6162\uff0c\u6211\u5c06\u5176\u653e\u5230\u4e86\u767e\u5ea6\u7f51\u76d8\uff1a \nZephyr SDK v0.9 \u3002  \u4e0b\u8f7d\u5b8c\u540e\uff0c\u8fdb\u884c\u5b89\u88c5\uff1a  $ chmod +x zephyr-sdk- version -setup.run\n\n$ sudo ./zephyr-sdk- version -setup.run # \u4ee5\u4e0b\u4e3a\u6210\u529f\u5b89\u88c5\u7684\u8f93\u51fa\uff1a \nVerifying archive integrity... All good.\nUncompressing SDK  for  Zephyr   100 %  \nEnter target directory  for  SDK  ( default: /opt/zephyr-sdk/ ) : \nInstalling SDK to /opt/zephyr-sdk\nCreating directory /opt/zephyr-sdk\nSuccess\n  [ * ]  Installing x86 tools... \n  [ * ]  Installing arm tools... \n  [ * ]  Installing arc tools... \n  [ * ]  Installing iamcu tools... \n  [ * ]  Installing nios2 tools... \n  [ * ]  Installing xtensa tools... \n  [ * ]  Installing riscv32 tools... \n  [ * ]  Installing additional host tools... \nSuccess installing SDK. SDK is ready to be used.  \u4e3a Zephyr SDK \u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a  $  export   ZEPHYR_GCC_VARIANT = zephyr\n\n$  export   ZEPHYR_SDK_INSTALL_DIR = \u8fd9\u91cc\u9ed8\u8ba4\u7684\u8def\u5f84\u662f\uff1a/opt/zephyr-sdk   \u4e5f\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u547d\u4ee4\u6dfb\u52a0\u5230  ~/.bash_profile  \u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a  # \u5728~/.bash_profile\u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a  export   ZEPHYR_GCC_VARIANT = zephyr export   ZEPHYR_SDK_INSTALL_DIR = \u8fd9\u91cc\u9ed8\u8ba4\u7684\u8def\u5f84\u662f\uff1a/opt/zephyr-sdk  # \u4f7f\u5176\u751f\u6548 \n$  source  .bash_profile # \u4f7f\u7528 echo \u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\uff1a \n$  echo   $ZEPHYR_GCC_VARIANT \n$  echo   $ZEPHYR_SDK_INSTALL_DIR", 
            "title": "2\u3001\u5b89\u88c5 Zephyr SDK"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#3-zephyr", 
            "text": "Zephyr \u6e90\u7801\u6258\u7ba1\u5728  https://gerrit.zephyrproject.org/r/zephyr \uff0c\u8fd9\u91cc\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u6211\u5728 GitHub \u505a\u4e86\u955c\u50cf\uff0c\u5e76\u589e\u52a0  nrf52832-mdk  \u5206\u652f\u6765\u652f\u6301 nRF52832-MDK \u7684\u5f00\u53d1\u3002  # \u514b\u9686 Zephyr \u6e90\u7801 \u5230 zephyr-project \n$ git clone https://github.com/makerdiary/zephyr.git zephyr-project\n$  cd  zephyr-project/ # \u62c9\u53d6 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801 \n$ git pull origin nrf52832-mdk", 
            "title": "3\u3001\u514b\u9686 Zephyr \u6e90\u7801"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#4", 
            "text": "\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4ee5\u7f16\u8bd1  ./zephyr-project/samples/hello_world  \u4e3a\u4f8b\uff1a  $  cd  ./zephyr-project/\n$  source  zephyr-env.sh\n\n$  cd  samples/hello_world\n$ make  BOARD = nrf52832_mdk  \u7f16\u8bd1\u6210\u529f\uff0c\u8f93\u51fa\u56fa\u4ef6\uff1a", 
            "title": "4\u3001\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  /outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a   \u6ce8\u610f  pyocd-flashtool  \u548c  screen  \u9700\u8981\u6743\u9650\uff0c\u8bb0\u5f97\u589e\u52a0  sudo  !   $ sudo pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex  \u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a  115200 \uff1a  $ sudo screen /dev/ttyACM0  115200    \u81f3\u6b64\uff0cZephyr \u5f00\u53d1\u73af\u5883\u5df2\u7ecf\u642d\u5efa\u5b8c\u6210\uff0cEnjoy !", 
            "title": "5\u3001\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#_1", 
            "text": "Zephyr \u5165\u95e8\u6307\u5357", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/setup-devenv-linux/#_2", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/", 
            "text": "\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff1aWindows\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Windows \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\u3002\n\n\n\n\n\u8bf4\u660e\n\n\n\u5982\u679c\u4f60\u4e4b\u524d\u5df2\u7ecf\u6309\u7167\n\u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883\n\u7684\u4ecb\u7ecd\u914d\u7f6e\u597d\u4e86 MSYS2\uff0c\u4ee5\u4e0b 1\u30012\u30013 \u6b65\u9aa4\u53ef\u8df3\u8fc7\u3002\n\n\n\n\nWindows \u5bf9\u5f00\u53d1\u8005\u6765\u8bf4\u6709\u70b9\u9ebb\u70e6\uff0c\u4e0d\u80fd\u539f\u751f\u652f\u6301\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\uff0c\u5982\u6211\u4eec\u5c06\u9700\u8981\u7528\u5230\u7684\u4e24\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff1a\nmake\n \u548c \nrm\n\u3002\u8981\u60f3\u5728 Windows \u73af\u5883\u4e0b\u4f7f\u7528 GNU \u7684\u5f00\u6e90\u5de5\u5177\uff0c\u6700\u597d\u4e5f\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u5728 Windows \u4e0a\u5b89\u88c5\u4e00\u4e2a Unix \u73af\u5883\u3002\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u57fa\u4e8e \nMSYS2\n (\u4e00\u4e2a\u4e13\u95e8\u4e3a Windows \u5f00\u53d1\u7684\u73b0\u4ee3 Unix \u73af\u5883) \u6765\u642d\u5efa Zephyr \u7684\u5f00\u53d1\u73af\u5883\u3002\n\n\n1\u3001\u5b89\u88c5 MSYS2\n\n\n\u4ece \nMSYS2 \u5b98\u7f51\n \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u8f6f\u4ef6\uff0c\u76f4\u63a5\u5b89\u88c5\uff1a\n\n\n\n\n\n\n\n\n2\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n\n\u6253\u5f00 MSYS2\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a\n\n\n$ pacman -S git make gcc diffutils ncurses-devel python2 python3\n\n\n\n\n\n\n\n3\u3001\u5b89\u88c5 GNU ARM Embedded\n\n\nGNU ARM Embedded Toolchain\n \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M \n Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728 \nARM \u5b98\u7f51\n\u4e0b\u8f7d\u6700\u65b0 Windows \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5 \ngcc-arm-none-eabi-6-2017-q1-update-win32\n \u7248\u672c\u4e3a\u4f8b\uff1a\n\n\n\u4e0b\u8f7d \ngcc-arm-none-eabi-6-2017-q1-update-win32-zip.zip\n \u538b\u7f29\u5305\u5e76\u89e3\u538b\u5230 \nc:/gccarmemb\n\uff0c\u7136\u540e\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a\n\n\n# \u9a8c\u8bc1\u7248\u672c\n\n$ \ncd\n /c/gccarmemb/bin/\n$ ./arm-none-eabi-gcc --version\n\n\n\n\n\n\n\n\u4e3a\u4ea4\u53c9\u5de5\u5177\u94fe\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a\n\n\n$ \nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n$ \nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\n/c/gccarmemb\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u547d\u4ee4\u6dfb\u52a0\u5230 \n~/.bash_profile\n \u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a\n\n\n# \u5728~/.bash_profile\u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\n/c/gccarmemb\n\n\n# \u4f7f\u5176\u751f\u6548\n\n$ \nsource\n .bash_profile\n\n\n# \u4f7f\u7528 echo \u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\uff1a\n\n$ \necho\n \n$ZEPHYR_GCC_VARIANT\n\n$ \necho\n \n$GCCARMEMB_TOOLCHAIN_PATH\n\n\n\n\n\n\n4\u3001\u514b\u9686 Zephyr \u6e90\u7801\n\n\nZephyr \u6e90\u7801\u6258\u7ba1\u5728 \nhttps://gerrit.zephyrproject.org/r/zephyr\n\uff0c\u8fd9\u91cc\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u6211\u5728 GitHub \u505a\u4e86\u955c\u50cf\uff0c\u5e76\u589e\u52a0 \nnrf52832-mdk\n \u5206\u652f\u6765\u652f\u6301 nRF52832-MDK \u7684\u5f00\u53d1\u3002\n\n\n# \u514b\u9686 Zephyr \u6e90\u7801 \u5230 zephyr-project\n\n$ git clone https://github.com/makerdiary/zephyr.git zephyr-project\n$ \ncd\n zephyr-project/\n\n\n# \u62c9\u53d6 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\n\n$ git pull origin nrf52832-mdk\n\n\n# \u4e3a Zephyr \u914d\u7f6e\u73af\u5883\u53d8\u91cf\n\n$ \nunset\n ZEPHYR_SDK_INSTALL_DIR\n$ \nsource\n ~/zephyr/zephyr-env.sh\n\n\n\n\n\n\n\n5\u3001\u7f16\u8bd1\n\n\n\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4ee5\u7f16\u8bd1 \n./zephyr-project/samples/hello_world\n \u4e3a\u4f8b\uff1a\n\n\n$ \ncd\n ./zephyr-project/samples/hello_world\n\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n\n\n\n\u6210\u529f\u7f16\u8bd1\uff0c\u8f93\u51fa\u56fa\u4ef6\uff1a\n\n\n\n\n6\u3001\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n/outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\n\n\u63d0\u9192\n\n\n\u5728 MSYS2 \u73af\u5883\u65e0\u6cd5\u5b9e\u73b0 pyOCD \u4e0b\u8f7d\uff0c\u53ef\u4ee5\u56de\u5230 Windows \u73af\u5883\u8fdb\u884c\u4e0b\u8f7d\u3002\n\n\n\n\n\n\nPuTTY\n \u6253\u5f00\u4e32\u53e3\uff0c\u67e5\u770b\u8f93\u51fa\uff1a\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Windows \u73af\u5883\u4e0b\u642d\u5efa\u4e86 Zephyr \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5165\u95e8\u6307\u5357\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Windows"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#zephyr-windows", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 Windows \u7cfb\u7edf\u4e0a\u5feb\u901f\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\u3002   \u8bf4\u660e  \u5982\u679c\u4f60\u4e4b\u524d\u5df2\u7ecf\u6309\u7167 \u642d\u5efa nRF5 SDK \u5f00\u53d1\u73af\u5883 \u7684\u4ecb\u7ecd\u914d\u7f6e\u597d\u4e86 MSYS2\uff0c\u4ee5\u4e0b 1\u30012\u30013 \u6b65\u9aa4\u53ef\u8df3\u8fc7\u3002   Windows \u5bf9\u5f00\u53d1\u8005\u6765\u8bf4\u6709\u70b9\u9ebb\u70e6\uff0c\u4e0d\u80fd\u539f\u751f\u652f\u6301\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\uff0c\u5982\u6211\u4eec\u5c06\u9700\u8981\u7528\u5230\u7684\u4e24\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff1a make  \u548c  rm \u3002\u8981\u60f3\u5728 Windows \u73af\u5883\u4e0b\u4f7f\u7528 GNU \u7684\u5f00\u6e90\u5de5\u5177\uff0c\u6700\u597d\u4e5f\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u5728 Windows \u4e0a\u5b89\u88c5\u4e00\u4e2a Unix \u73af\u5883\u3002  \u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u57fa\u4e8e  MSYS2  (\u4e00\u4e2a\u4e13\u95e8\u4e3a Windows \u5f00\u53d1\u7684\u73b0\u4ee3 Unix \u73af\u5883) \u6765\u642d\u5efa Zephyr \u7684\u5f00\u53d1\u73af\u5883\u3002", 
            "title": "\u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883\uff1aWindows"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#1-msys2", 
            "text": "\u4ece  MSYS2 \u5b98\u7f51  \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u8f6f\u4ef6\uff0c\u76f4\u63a5\u5b89\u88c5\uff1a", 
            "title": "1\u3001\u5b89\u88c5 MSYS2"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#2", 
            "text": "\u6253\u5f00 MSYS2\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a  $ pacman -S git make gcc diffutils ncurses-devel python2 python3", 
            "title": "2\u3001\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#3-gnu-arm-embedded", 
            "text": "GNU ARM Embedded Toolchain  \u662f\u4e13\u95e8\u9488\u5bf9 ARM Cortex-M   Cortex-R \u7cfb\u5217\u5904\u7406\u5668\u7684\u4ea4\u53c9\u5de5\u5177\u94fe\uff0c\u514d\u8d39\u5f00\u6e90\uff0c\u73b0\u5df2\u7531 ARM \u5728\u7ef4\u62a4\uff0c\u53ef\u5728  ARM \u5b98\u7f51 \u4e0b\u8f7d\u6700\u65b0 Windows \u7248\u672c\uff0c\u8fd9\u91cc\u4ee5  gcc-arm-none-eabi-6-2017-q1-update-win32  \u7248\u672c\u4e3a\u4f8b\uff1a  \u4e0b\u8f7d  gcc-arm-none-eabi-6-2017-q1-update-win32-zip.zip  \u538b\u7f29\u5305\u5e76\u89e3\u538b\u5230  c:/gccarmemb \uff0c\u7136\u540e\u9a8c\u8bc1\u662f\u5426\u80fd\u591f\u5de5\u4f5c\uff1a  # \u9a8c\u8bc1\u7248\u672c \n$  cd  /c/gccarmemb/bin/\n$ ./arm-none-eabi-gcc --version   \u4e3a\u4ea4\u53c9\u5de5\u5177\u94fe\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a  $  export   ZEPHYR_GCC_VARIANT = gccarmemb\n$  export   GCCARMEMB_TOOLCHAIN_PATH = /c/gccarmemb  \u4e5f\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u547d\u4ee4\u6dfb\u52a0\u5230  ~/.bash_profile  \u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1a  # \u5728~/.bash_profile\u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a  export   ZEPHYR_GCC_VARIANT = gccarmemb export   GCCARMEMB_TOOLCHAIN_PATH = /c/gccarmemb # \u4f7f\u5176\u751f\u6548 \n$  source  .bash_profile # \u4f7f\u7528 echo \u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\uff1a \n$  echo   $ZEPHYR_GCC_VARIANT \n$  echo   $GCCARMEMB_TOOLCHAIN_PATH", 
            "title": "3\u3001\u5b89\u88c5 GNU ARM Embedded"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#4-zephyr", 
            "text": "Zephyr \u6e90\u7801\u6258\u7ba1\u5728  https://gerrit.zephyrproject.org/r/zephyr \uff0c\u8fd9\u91cc\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u6211\u5728 GitHub \u505a\u4e86\u955c\u50cf\uff0c\u5e76\u589e\u52a0  nrf52832-mdk  \u5206\u652f\u6765\u652f\u6301 nRF52832-MDK \u7684\u5f00\u53d1\u3002  # \u514b\u9686 Zephyr \u6e90\u7801 \u5230 zephyr-project \n$ git clone https://github.com/makerdiary/zephyr.git zephyr-project\n$  cd  zephyr-project/ # \u62c9\u53d6 nrf52832-mdk \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801 \n$ git pull origin nrf52832-mdk # \u4e3a Zephyr \u914d\u7f6e\u73af\u5883\u53d8\u91cf \n$  unset  ZEPHYR_SDK_INSTALL_DIR\n$  source  ~/zephyr/zephyr-env.sh", 
            "title": "4\u3001\u514b\u9686 Zephyr \u6e90\u7801"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#5", 
            "text": "\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff0c\u4ee5\u7f16\u8bd1  ./zephyr-project/samples/hello_world  \u4e3a\u4f8b\uff1a  $  cd  ./zephyr-project/samples/hello_world\n\n$ make  BOARD = nrf52832_mdk  \u6210\u529f\u7f16\u8bd1\uff0c\u8f93\u51fa\u56fa\u4ef6\uff1a", 
            "title": "5\u3001\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#6", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  /outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex   \u63d0\u9192  \u5728 MSYS2 \u73af\u5883\u65e0\u6cd5\u5b9e\u73b0 pyOCD \u4e0b\u8f7d\uff0c\u53ef\u4ee5\u56de\u5230 Windows \u73af\u5883\u8fdb\u884c\u4e0b\u8f7d\u3002    PuTTY  \u6253\u5f00\u4e32\u53e3\uff0c\u67e5\u770b\u8f93\u51fa\uff1a    \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5728 Windows \u73af\u5883\u4e0b\u642d\u5efa\u4e86 Zephyr \u7684\u5f00\u53d1\u73af\u5883\uff0cEnjoy !", 
            "title": "6\u3001\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#_1", 
            "text": "Zephyr \u5165\u95e8\u6307\u5357", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/setup-devenv-win/#_2", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/example-blinky/", 
            "text": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1aBlinky\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u8fd9\u91cc\u5047\u8bbe\u4f60\u5df2\u7ecf\u6210\u529f\u642d\u5efa\u597d Zephyr \u5f00\u53d1\u73af\u5883\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u53c2\u8003\u524d\u9762\u7684\u6587\u6863\uff1a\n\n\n\n\nMac OSX\n\n\nLinux\n\n\nWindows\n\n\n\n\n\u7b80\u4ecb\n\n\n\u672c\u4f8b\u662f Zephyr \u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Zephyr \u63d0\u4f9b\u7684 API \u64cd\u4f5c GPIO\uff0c\u63a7\u5236 LED \u95ea\u70c1\u3002\n\n\n\u4ee3\u7801\u7ed3\u6784\n\n\n# ./zephyr-project/samples/basic/blinky/\n\n\n$ tree -L \n2\n\n.\n\u251c\u2500\u2500 Makefile         \n# Makefile \u9879\u76ee\u7f16\u8bd1\u63a7\u5236\n\n\u251c\u2500\u2500 README.rst       \n# \u793a\u4f8b\u8bf4\u660e\u6587\u6863\n\n\u251c\u2500\u2500 outdir           \n# \u7f16\u8bd1\u8f93\u51fa\u76ee\u5f55\n\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nrf52832_mdk \n# nRF52832-MDK \u56fa\u4ef6\n\n\u251c\u2500\u2500 prj.conf         \n# \u9879\u76ee\u914d\u7f6e\uff0c\u5b9a\u4e49\u9700\u8981\u90a3\u4e9b\u6a21\u5757\n\n\u251c\u2500\u2500 src             \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile     \n# Makefile \u6e90\u7801\u7f16\u8bd1\u63a7\u5236\n\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.c       \n# \u4e3b\u7a0b\u5e8f\n\n\u2514\u2500\u2500 testcase.ini     \n# \u6d4b\u8bd5\u6848\u4f8b\n\n\n\n\n\n\n\u6e90\u4ee3\u7801\n\n\n\u8fd9\u91cc\u8ba9 LED0 \u5373\u677f\u4e0a\u7eff\u8272 LED\uff0c\u6bcf\u9694 1s \u6539\u53d8\u4e00\u6b21\u72b6\u6001\u3002\n\n\n#include\n \nzephyr.h\n\n\n#include\n \nboard.h\n\n\n#include\n \ndevice.h\n\n\n#include\n \ngpio.h\n\n\n\n/* Change this if you have an LED connected to a custom port */\n\n\n#define PORT    LED0_GPIO_PORT\n\n\n\n/* Change this if you have an LED connected to a custom pin */\n\n\n#define LED LED0_GPIO_PIN\n\n\n\n/* 1000 msec = 1 sec */\n\n\n#define SLEEP_TIME  1000\n\n\n\nvoid\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nint\n \ncnt\n \n=\n \n0\n;\n\n    \nstruct\n \ndevice\n \n*\ndev\n;\n\n\n    \ndev\n \n=\n \ndevice_get_binding\n(\nPORT\n);\n\n    \n/* Set LED pin as output */\n\n    \ngpio_pin_configure\n(\ndev\n,\n \nLED\n,\n \nGPIO_DIR_OUT\n);\n\n\n    \nwhile\n \n(\n1\n)\n \n{\n\n        \n/* Set pin to HIGH/LOW every 1 second */\n\n        \ngpio_pin_write\n(\ndev\n,\n \nLED\n,\n \ncnt\n \n%\n \n2\n);\n\n        \ncnt\n++\n;\n\n        \nk_sleep\n(\nSLEEP_TIME\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./zephyr-project/\n$ \nsource\n zephyr-env.sh\n\n$ \ncd\n ./samples/basic/blinky/\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n# \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n  ...\n  CC      src/main.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n./outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5b98\u65b9\u6587\u6863\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Blinky"
        }, 
        {
            "location": "/zephyr/example-blinky/#zephyr-blinky", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801  \u8fd9\u91cc\u5047\u8bbe\u4f60\u5df2\u7ecf\u6210\u529f\u642d\u5efa\u597d Zephyr \u5f00\u53d1\u73af\u5883\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u53c2\u8003\u524d\u9762\u7684\u6587\u6863\uff1a   Mac OSX  Linux  Windows", 
            "title": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1aBlinky"
        }, 
        {
            "location": "/zephyr/example-blinky/#_1", 
            "text": "\u672c\u4f8b\u662f Zephyr \u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Zephyr \u63d0\u4f9b\u7684 API \u64cd\u4f5c GPIO\uff0c\u63a7\u5236 LED \u95ea\u70c1\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zephyr/example-blinky/#_2", 
            "text": "# ./zephyr-project/samples/basic/blinky/ \n\n$ tree -L  2 \n.\n\u251c\u2500\u2500 Makefile          # Makefile \u9879\u76ee\u7f16\u8bd1\u63a7\u5236 \n\u251c\u2500\u2500 README.rst        # \u793a\u4f8b\u8bf4\u660e\u6587\u6863 \n\u251c\u2500\u2500 outdir            # \u7f16\u8bd1\u8f93\u51fa\u76ee\u5f55 \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nrf52832_mdk  # nRF52832-MDK \u56fa\u4ef6 \n\u251c\u2500\u2500 prj.conf          # \u9879\u76ee\u914d\u7f6e\uff0c\u5b9a\u4e49\u9700\u8981\u90a3\u4e9b\u6a21\u5757 \n\u251c\u2500\u2500 src             \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile      # Makefile \u6e90\u7801\u7f16\u8bd1\u63a7\u5236 \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.c        # \u4e3b\u7a0b\u5e8f \n\u2514\u2500\u2500 testcase.ini      # \u6d4b\u8bd5\u6848\u4f8b", 
            "title": "\u4ee3\u7801\u7ed3\u6784"
        }, 
        {
            "location": "/zephyr/example-blinky/#_3", 
            "text": "\u8fd9\u91cc\u8ba9 LED0 \u5373\u677f\u4e0a\u7eff\u8272 LED\uff0c\u6bcf\u9694 1s \u6539\u53d8\u4e00\u6b21\u72b6\u6001\u3002  #include   zephyr.h  #include   board.h  #include   device.h  #include   gpio.h  /* Change this if you have an LED connected to a custom port */  #define PORT    LED0_GPIO_PORT  /* Change this if you have an LED connected to a custom pin */  #define LED LED0_GPIO_PIN  /* 1000 msec = 1 sec */  #define SLEEP_TIME  1000  void   main ( void )  { \n     int   cnt   =   0 ; \n     struct   device   * dev ; \n\n     dev   =   device_get_binding ( PORT ); \n     /* Set LED pin as output */ \n     gpio_pin_configure ( dev ,   LED ,   GPIO_DIR_OUT ); \n\n     while   ( 1 )   { \n         /* Set pin to HIGH/LOW every 1 second */ \n         gpio_pin_write ( dev ,   LED ,   cnt   %   2 ); \n         cnt ++ ; \n         k_sleep ( SLEEP_TIME ); \n     }  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/zephyr/example-blinky/#_4", 
            "text": "$  cd  ./zephyr-project/\n$  source  zephyr-env.sh\n\n$  cd  ./samples/basic/blinky/\n$ make  BOARD = nrf52832_mdk # \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n  ...\n  CC      src/main.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/example-blinky/#_5", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  ./outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex   Enjoy !", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/example-blinky/#_6", 
            "text": "Zephyr \u5b98\u65b9\u6587\u6863", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/example-blinky/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/example-button/", 
            "text": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1a\u6309\u952e\u4e8b\u4ef6\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u7b80\u4ecb\n\n\n\u672c\u4f8b\u662f Zephyr \u7684\u4e00\u4e2a\u57fa\u7840\u793a\u4f8b\uff0c\u6f14\u793a\u7b80\u5355\u7684\u6309\u952e\u4e8b\u4ef6\u9a71\u52a8\uff0c\u5f53\u6709\u6309\u952e\u6309\u4e0b\u65f6\uff0c\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nzephyr.h\n\n\n#include\n \nboard.h\n\n\n#include\n \ndevice.h\n\n\n#include\n \ngpio.h\n\n\n#include\n \nmisc/util.h\n\n\n#include\n \nmisc/printk.h\n\n\n\n/* change this to use another GPIO port */\n\n\n#ifdef SW0_GPIO_NAME\n\n\n#define PORT    SW0_GPIO_NAME\n\n\n#else\n\n\n#error SW0_GPIO_NAME needs to be set in board.h\n\n\n#endif\n\n\n\n/* change this to use another GPIO pin */\n\n\n#ifdef SW0_GPIO_PIN\n\n\n#define PIN     SW0_GPIO_PIN\n\n\n#else\n\n\n#error SW0_GPIO_PIN needs to be set in board.h\n\n\n#endif\n\n\n\n/* change to use another GPIO pin interrupt config */\n\n\n#ifdef SW0_GPIO_INT_CONF\n\n\n#define EDGE    SW0_GPIO_INT_CONF\n\n\n#else\n\n\n/*\n\n\n * If SW0_GPIO_INT_CONF not defined used default EDGE value.\n\n\n * Change this to use a different interrupt trigger\n\n\n */\n\n\n#define EDGE    (GPIO_INT_EDGE | GPIO_INT_ACTIVE_LOW)\n\n\n#endif\n\n\n\n/* change this to enable pull-up/pull-down */\n\n\n#define PULL_UP GPIO_PUD_PULL_UP\n\n\n\n/* Sleep time */\n\n\n#define SLEEP_TIME  500\n\n\n\n\nvoid\n \nbutton_pressed\n(\nstruct\n \ndevice\n \n*\ngpiob\n,\n \nstruct\n \ngpio_callback\n \n*\ncb\n,\n\n            \nuint32_t\n \npins\n)\n\n\n{\n\n    \nprintk\n(\nButton pressed at %d\n\\n\n,\n \nk_cycle_get_32\n());\n\n\n}\n\n\n\nstatic\n \nstruct\n \ngpio_callback\n \ngpio_cb\n;\n\n\n\nvoid\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nstruct\n \ndevice\n \n*\ngpiob\n;\n\n\n    \nprintk\n(\nPress the user defined button on the board\n\\n\n);\n\n    \ngpiob\n \n=\n \ndevice_get_binding\n(\nPORT\n);\n\n    \nif\n \n(\n!\ngpiob\n)\n \n{\n\n        \nprintk\n(\nerror\n\\n\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \ngpio_pin_configure\n(\ngpiob\n,\n \nPIN\n,\n\n               \nGPIO_DIR_IN\n \n|\n \nGPIO_INT\n \n|\n  \nPULL_UP\n \n|\n \nEDGE\n);\n\n\n    \ngpio_init_callback\n(\ngpio_cb\n,\n \nbutton_pressed\n,\n \nBIT\n(\nPIN\n));\n\n\n    \ngpio_add_callback\n(\ngpiob\n,\n \ngpio_cb\n);\n\n    \ngpio_pin_enable_callback\n(\ngpiob\n,\n \nPIN\n);\n\n\n    \nwhile\n \n(\n1\n)\n \n{\n\n        \nuint32_t\n \nval\n \n=\n \n0\n;\n\n\n        \ngpio_pin_read\n(\ngpiob\n,\n \nPIN\n,\n \nval\n);\n\n        \nk_sleep\n(\nSLEEP_TIME\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./zephyr-project/\n$ \nsource\n zephyr-env.sh\n\n$ \ncd\n ./samples/basic/button/\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n# \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n  ...\n  CC      src/main.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n./outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a \n115200bps\n\uff0c\u67e5\u770b\u6309\u952e\u4e8b\u4ef6\u8f93\u51fa\uff1a\n\n\n$ screen /dev/cu.usbmodem1422 \n115200\n\n\n\n\n\n\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5b98\u65b9\u6587\u6863\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "Button"
        }, 
        {
            "location": "/zephyr/example-button/#zephyr", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1a\u6309\u952e\u4e8b\u4ef6"
        }, 
        {
            "location": "/zephyr/example-button/#_1", 
            "text": "\u672c\u4f8b\u662f Zephyr \u7684\u4e00\u4e2a\u57fa\u7840\u793a\u4f8b\uff0c\u6f14\u793a\u7b80\u5355\u7684\u6309\u952e\u4e8b\u4ef6\u9a71\u52a8\uff0c\u5f53\u6709\u6309\u952e\u6309\u4e0b\u65f6\uff0c\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zephyr/example-button/#_2", 
            "text": "#include   zephyr.h  #include   board.h  #include   device.h  #include   gpio.h  #include   misc/util.h  #include   misc/printk.h  /* change this to use another GPIO port */  #ifdef SW0_GPIO_NAME  #define PORT    SW0_GPIO_NAME  #else  #error SW0_GPIO_NAME needs to be set in board.h  #endif  /* change this to use another GPIO pin */  #ifdef SW0_GPIO_PIN  #define PIN     SW0_GPIO_PIN  #else  #error SW0_GPIO_PIN needs to be set in board.h  #endif  /* change to use another GPIO pin interrupt config */  #ifdef SW0_GPIO_INT_CONF  #define EDGE    SW0_GPIO_INT_CONF  #else  /*   * If SW0_GPIO_INT_CONF not defined used default EDGE value.   * Change this to use a different interrupt trigger   */  #define EDGE    (GPIO_INT_EDGE | GPIO_INT_ACTIVE_LOW)  #endif  /* change this to enable pull-up/pull-down */  #define PULL_UP GPIO_PUD_PULL_UP  /* Sleep time */  #define SLEEP_TIME  500  void   button_pressed ( struct   device   * gpiob ,   struct   gpio_callback   * cb , \n             uint32_t   pins )  { \n     printk ( Button pressed at %d \\n ,   k_cycle_get_32 ());  }  static   struct   gpio_callback   gpio_cb ;  void   main ( void )  { \n     struct   device   * gpiob ; \n\n     printk ( Press the user defined button on the board \\n ); \n     gpiob   =   device_get_binding ( PORT ); \n     if   ( ! gpiob )   { \n         printk ( error \\n ); \n         return ; \n     } \n\n     gpio_pin_configure ( gpiob ,   PIN , \n                GPIO_DIR_IN   |   GPIO_INT   |    PULL_UP   |   EDGE ); \n\n     gpio_init_callback ( gpio_cb ,   button_pressed ,   BIT ( PIN )); \n\n     gpio_add_callback ( gpiob ,   gpio_cb ); \n     gpio_pin_enable_callback ( gpiob ,   PIN ); \n\n     while   ( 1 )   { \n         uint32_t   val   =   0 ; \n\n         gpio_pin_read ( gpiob ,   PIN ,   val ); \n         k_sleep ( SLEEP_TIME ); \n     }  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/zephyr/example-button/#_3", 
            "text": "$  cd  ./zephyr-project/\n$  source  zephyr-env.sh\n\n$  cd  ./samples/basic/button/\n$ make  BOARD = nrf52832_mdk # \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n  ...\n  CC      src/main.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/example-button/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  ./outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex  \u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a  115200bps \uff0c\u67e5\u770b\u6309\u952e\u4e8b\u4ef6\u8f93\u51fa\uff1a  $ screen /dev/cu.usbmodem1422  115200     Enjoy !", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/example-button/#_5", 
            "text": "Zephyr \u5b98\u65b9\u6587\u6863", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/example-button/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/example-beacon/", 
            "text": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1a\u4f4e\u529f\u8017\u84dd\u7259 Beacon\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u7b80\u4ecb\n\n\n\u672c\u4f8b\u662f Zephyr \u4f4e\u529f\u8017\u84dd\u7259\u7684\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u6f14\u793a BLE \u7684\u5e7f\u64ad\u529f\u80fd\uff0c\u5e7f\u64ad\u6570\u636e\u5305\u4f7f\u7528 \nEddystone-URL\n \u89c4\u5b9a\u7684\u683c\u5f0f\uff0c\u53d1\u51fa URL \nhttp://www.zephyrproject.org\n\u3002\n\n\n\u66f4\u591a\u5173\u4e8e Eddystone \u534f\u8bae\u5185\u5bb9\uff0c\u8bf7\u67e5\u770b\uff1a\ngoogle/eddystone\n\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nstdint.h\n\n\n#include\n \nstddef.h\n\n\n#include\n \nmisc/printk.h\n\n\n#include\n \nmisc/util.h\n\n\n\n#include\n \nbluetooth/bluetooth.h\n\n\n#include\n \nbluetooth/hci.h\n\n\n\n#define DEVICE_NAME CONFIG_BLUETOOTH_DEVICE_NAME\n\n\n#define DEVICE_NAME_LEN (sizeof(DEVICE_NAME) - 1)\n\n\n\n/*\n\n\n * Set Advertisement data. Based on the Eddystone specification:\n\n\n * https://github.com/google/eddystone/blob/master/protocol-specification.md\n\n\n * https://github.com/google/eddystone/tree/master/eddystone-url\n\n\n */\n\n\nstatic\n \nconst\n \nstruct\n \nbt_data\n \nad\n[]\n \n=\n \n{\n\n    \nBT_DATA_BYTES\n(\nBT_DATA_FLAGS\n,\n \nBT_LE_AD_NO_BREDR\n),\n\n    \nBT_DATA_BYTES\n(\nBT_DATA_UUID16_ALL\n,\n \n0xaa\n,\n \n0xfe\n),\n\n    \nBT_DATA_BYTES\n(\nBT_DATA_SVC_DATA16\n,\n\n              \n0xaa\n,\n \n0xfe\n,\n \n/* Eddystone UUID */\n\n              \n0x10\n,\n \n/* Eddystone-URL frame type */\n\n              \n0x00\n,\n \n/* Calibrated Tx power at 0m */\n\n              \n0x00\n,\n \n/* URL Scheme Prefix http://www. */\n\n              \nz\n,\n \ne\n,\n \np\n,\n \nh\n,\n \ny\n,\n \nr\n,\n\n              \np\n,\n \nr\n,\n \no\n,\n \nj\n,\n \ne\n,\n \nc\n,\n \nt\n,\n\n              \n0x08\n)\n \n/* .org */\n\n\n};\n\n\n\n/* Set Scan Response data */\n\n\nstatic\n \nconst\n \nstruct\n \nbt_data\n \nsd\n[]\n \n=\n \n{\n\n    \nBT_DATA\n(\nBT_DATA_NAME_COMPLETE\n,\n \nDEVICE_NAME\n,\n \nDEVICE_NAME_LEN\n),\n\n\n};\n\n\n\nstatic\n \nvoid\n \nbt_ready\n(\nint\n \nerr\n)\n\n\n{\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nBluetooth init failed (err %d)\n\\n\n,\n \nerr\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nprintk\n(\nBluetooth initialized\n\\n\n);\n\n\n    \n/* Start advertising */\n\n    \nerr\n \n=\n \nbt_le_adv_start\n(\nBT_LE_ADV_NCONN\n,\n \nad\n,\n \nARRAY_SIZE\n(\nad\n),\n\n                  \nsd\n,\n \nARRAY_SIZE\n(\nsd\n));\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nAdvertising failed to start (err %d)\n\\n\n,\n \nerr\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nprintk\n(\nBeacon started\n\\n\n);\n\n\n}\n\n\n\nvoid\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nint\n \nerr\n;\n\n\n    \nprintk\n(\nStarting Beacon Demo\n\\n\n);\n\n\n    \n/* Initialize the Bluetooth Subsystem */\n\n    \nerr\n \n=\n \nbt_enable\n(\nbt_ready\n);\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nBluetooth init failed (err %d)\n\\n\n,\n \nerr\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./zephyr-project/\n$ \nsource\n zephyr-env.sh\n\n$ \ncd\n ./samples/bluetooth/beacon/\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n# \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n  ...\n  CC      src/main.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n./outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a \n115200bps\n\uff0c\u5c06\u8f93\u51fa\u84dd\u7259\u8fd0\u884c\u7684\u8c03\u8bd5\u4fe1\u606f\uff1a\n\n\n$ screen /dev/cu.usbmodem1422 \n115200\n\n\n\n\n\n\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u67e5\u770b\u5e7f\u64ad\u6570\u636e\u5305\u7684\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u67e5\u770b Physical Web \u662f\u5426\u53d1\u73b0\u8be5\u8bbe\u5907\uff1a\n\n\n\n\n\u63d0\u793a\n\n\n\u5173\u4e8e Physical Web \u7684\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\uff1a\nSetting up Physical Web in Chrome\n\u3002\n\n\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nZephyr \u5b98\u65b9\u6587\u6863\n\n\nEddystone \u534f\u8bae\u89c4\u8303\n\n\nPhysical Web \u5b98\u7f51\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259 Beacon"
        }, 
        {
            "location": "/zephyr/example-beacon/#zephyr-beacon", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1a\u4f4e\u529f\u8017\u84dd\u7259 Beacon"
        }, 
        {
            "location": "/zephyr/example-beacon/#_1", 
            "text": "\u672c\u4f8b\u662f Zephyr \u4f4e\u529f\u8017\u84dd\u7259\u7684\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u6f14\u793a BLE \u7684\u5e7f\u64ad\u529f\u80fd\uff0c\u5e7f\u64ad\u6570\u636e\u5305\u4f7f\u7528  Eddystone-URL  \u89c4\u5b9a\u7684\u683c\u5f0f\uff0c\u53d1\u51fa URL  http://www.zephyrproject.org \u3002  \u66f4\u591a\u5173\u4e8e Eddystone \u534f\u8bae\u5185\u5bb9\uff0c\u8bf7\u67e5\u770b\uff1a google/eddystone \u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zephyr/example-beacon/#_2", 
            "text": "#include   stdint.h  #include   stddef.h  #include   misc/printk.h  #include   misc/util.h  #include   bluetooth/bluetooth.h  #include   bluetooth/hci.h  #define DEVICE_NAME CONFIG_BLUETOOTH_DEVICE_NAME  #define DEVICE_NAME_LEN (sizeof(DEVICE_NAME) - 1)  /*   * Set Advertisement data. Based on the Eddystone specification:   * https://github.com/google/eddystone/blob/master/protocol-specification.md   * https://github.com/google/eddystone/tree/master/eddystone-url   */  static   const   struct   bt_data   ad []   =   { \n     BT_DATA_BYTES ( BT_DATA_FLAGS ,   BT_LE_AD_NO_BREDR ), \n     BT_DATA_BYTES ( BT_DATA_UUID16_ALL ,   0xaa ,   0xfe ), \n     BT_DATA_BYTES ( BT_DATA_SVC_DATA16 , \n               0xaa ,   0xfe ,   /* Eddystone UUID */ \n               0x10 ,   /* Eddystone-URL frame type */ \n               0x00 ,   /* Calibrated Tx power at 0m */ \n               0x00 ,   /* URL Scheme Prefix http://www. */ \n               z ,   e ,   p ,   h ,   y ,   r , \n               p ,   r ,   o ,   j ,   e ,   c ,   t , \n               0x08 )   /* .org */  };  /* Set Scan Response data */  static   const   struct   bt_data   sd []   =   { \n     BT_DATA ( BT_DATA_NAME_COMPLETE ,   DEVICE_NAME ,   DEVICE_NAME_LEN ),  };  static   void   bt_ready ( int   err )  { \n     if   ( err )   { \n         printk ( Bluetooth init failed (err %d) \\n ,   err ); \n         return ; \n     } \n\n     printk ( Bluetooth initialized \\n ); \n\n     /* Start advertising */ \n     err   =   bt_le_adv_start ( BT_LE_ADV_NCONN ,   ad ,   ARRAY_SIZE ( ad ), \n                   sd ,   ARRAY_SIZE ( sd )); \n     if   ( err )   { \n         printk ( Advertising failed to start (err %d) \\n ,   err ); \n         return ; \n     } \n\n     printk ( Beacon started \\n );  }  void   main ( void )  { \n     int   err ; \n\n     printk ( Starting Beacon Demo \\n ); \n\n     /* Initialize the Bluetooth Subsystem */ \n     err   =   bt_enable ( bt_ready ); \n     if   ( err )   { \n         printk ( Bluetooth init failed (err %d) \\n ,   err ); \n     }  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/zephyr/example-beacon/#_3", 
            "text": "$  cd  ./zephyr-project/\n$  source  zephyr-env.sh\n\n$  cd  ./samples/bluetooth/beacon/\n$ make  BOARD = nrf52832_mdk # \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n  ...\n  CC      src/main.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/example-beacon/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  ./outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex  \u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a  115200bps \uff0c\u5c06\u8f93\u51fa\u84dd\u7259\u8fd0\u884c\u7684\u8c03\u8bd5\u4fe1\u606f\uff1a  $ screen /dev/cu.usbmodem1422  115200    \u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u67e5\u770b\u5e7f\u64ad\u6570\u636e\u5305\u7684\u5185\u5bb9\uff1a    \u4e5f\u53ef\u4ee5\u67e5\u770b Physical Web \u662f\u5426\u53d1\u73b0\u8be5\u8bbe\u5907\uff1a   \u63d0\u793a  \u5173\u4e8e Physical Web \u7684\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\uff1a Setting up Physical Web in Chrome \u3002    Enjoy !", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/example-beacon/#_5", 
            "text": "Zephyr \u5b98\u65b9\u6587\u6863  Eddystone \u534f\u8bae\u89c4\u8303  Physical Web \u5b98\u7f51", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/example-beacon/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/", 
            "text": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1a\u4f4e\u529f\u8017\u84dd\u7259\u5fc3\u7387\u8ba1\n\n\n\u67e5\u770b\u672c\u4f8b\u6e90\u7801\n\n\n\u7b80\u4ecb\n\n\n\u672c\u4f8b\u5c06\u4f7f\u7528 Zephyr \u5b9e\u73b0\u4e00\u4e2a\u4f4e\u529f\u8017\u84dd\u7259\u5fc3\u7387\u8ba1\u5e94\u7528\uff0c\u8be5\u5e94\u7528\u4f1a\u5305\u542b\u4e09\u4e2a\u670d\u52a1\uff1a\nHeart Rate\n, \nBattery Serice\n, \nDevice Information\n, \u4f60\u53ef\u4ee5\u901a\u8fc7\u624b\u673a App \u6216 Web Bluetooth \u4e0e\u5fc3\u7387\u8ba1\u8fde\u63a5\u5e76\u83b7\u53d6\u6570\u636e\u3002\n\n\n\u6e90\u4ee3\u7801\n\n\n#include\n \nstdint.h\n\n\n#include\n \nstddef.h\n\n\n#include\n \nstring.h\n\n\n#include\n \nerrno.h\n\n\n#include\n \nmisc/printk.h\n\n\n#include\n \nmisc/byteorder.h\n\n\n#include\n \nzephyr.h\n\n\n\n#include\n \nbluetooth/bluetooth.h\n\n\n#include\n \nbluetooth/hci.h\n\n\n#include\n \nbluetooth/conn.h\n\n\n#include\n \nbluetooth/uuid.h\n\n\n#include\n \nbluetooth/gatt.h\n\n\n\n#include\n \ngatt/gap.h\n\n\n#include\n \ngatt/hrs.h\n\n\n#include\n \ngatt/dis.h\n\n\n#include\n \ngatt/bas.h\n\n\n\n#define DEVICE_NAME     CONFIG_BLUETOOTH_DEVICE_NAME\n\n\n#define DEVICE_NAME_LEN     (sizeof(DEVICE_NAME) - 1)\n\n\n#define HEART_RATE_APPEARANCE   0x0341\n\n\n\nstruct\n \nbt_conn\n \n*\ndefault_conn\n;\n\n\n\nstatic\n \nconst\n \nstruct\n \nbt_data\n \nad\n[]\n \n=\n \n{\n\n    \nBT_DATA_BYTES\n(\nBT_DATA_FLAGS\n,\n \n(\nBT_LE_AD_GENERAL\n \n|\n \nBT_LE_AD_NO_BREDR\n)),\n\n    \nBT_DATA_BYTES\n(\nBT_DATA_UUID16_ALL\n,\n \n0x0d\n,\n \n0x18\n,\n \n0x0f\n,\n \n0x18\n,\n \n0x05\n,\n \n0x18\n),\n\n\n};\n\n\n\nstatic\n \nconst\n \nstruct\n \nbt_data\n \nsd\n[]\n \n=\n \n{\n\n    \nBT_DATA\n(\nBT_DATA_NAME_COMPLETE\n,\n \nDEVICE_NAME\n,\n \nDEVICE_NAME_LEN\n),\n\n\n};\n\n\n\nstatic\n \nvoid\n \nconnected\n(\nstruct\n \nbt_conn\n \n*\nconn\n,\n \nuint8_t\n \nerr\n)\n\n\n{\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nConnection failed (err %u)\n\\n\n,\n \nerr\n);\n\n    \n}\n \nelse\n \n{\n\n        \ndefault_conn\n \n=\n \nbt_conn_ref\n(\nconn\n);\n\n        \nprintk\n(\nConnected\n\\n\n);\n\n    \n}\n\n\n}\n\n\n\nstatic\n \nvoid\n \ndisconnected\n(\nstruct\n \nbt_conn\n \n*\nconn\n,\n \nuint8_t\n \nreason\n)\n\n\n{\n\n    \nprintk\n(\nDisconnected (reason %u)\n\\n\n,\n \nreason\n);\n\n\n    \nif\n \n(\ndefault_conn\n)\n \n{\n\n        \nbt_conn_unref\n(\ndefault_conn\n);\n\n        \ndefault_conn\n \n=\n \nNULL\n;\n\n    \n}\n\n\n}\n\n\n\nstatic\n \nstruct\n \nbt_conn_cb\n \nconn_callbacks\n \n=\n \n{\n\n    \n.\nconnected\n \n=\n \nconnected\n,\n\n    \n.\ndisconnected\n \n=\n \ndisconnected\n,\n\n\n};\n\n\n\nstatic\n \nvoid\n \nbt_ready\n(\nint\n \nerr\n)\n\n\n{\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nBluetooth init failed (err %d)\n\\n\n,\n \nerr\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nprintk\n(\nBluetooth initialized\n\\n\n);\n\n\n    \ngap_init\n(\nDEVICE_NAME\n,\n \nHEART_RATE_APPEARANCE\n);\n\n    \nhrs_init\n(\n0x01\n);\n\n    \nbas_init\n();\n\n    \ndis_init\n(\nCONFIG_SOC\n,\n \nManufacturer\n);\n\n\n    \nerr\n \n=\n \nbt_le_adv_start\n(\nBT_LE_ADV_CONN\n,\n \nad\n,\n \nARRAY_SIZE\n(\nad\n),\n\n                  \nsd\n,\n \nARRAY_SIZE\n(\nsd\n));\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nAdvertising failed to start (err %d)\n\\n\n,\n \nerr\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nprintk\n(\nAdvertising successfully started\n\\n\n);\n\n\n}\n\n\n\nstatic\n \nvoid\n \nauth_cancel\n(\nstruct\n \nbt_conn\n \n*\nconn\n)\n\n\n{\n\n    \nchar\n \naddr\n[\nBT_ADDR_LE_STR_LEN\n];\n\n\n    \nbt_addr_le_to_str\n(\nbt_conn_get_dst\n(\nconn\n),\n \naddr\n,\n \nsizeof\n(\naddr\n));\n\n\n    \nprintk\n(\nPairing cancelled: %s\n\\n\n,\n \naddr\n);\n\n\n}\n\n\n\nstatic\n \nstruct\n \nbt_conn_auth_cb\n \nauth_cb_display\n \n=\n \n{\n\n    \n.\ncancel\n \n=\n \nauth_cancel\n,\n\n\n};\n\n\n\nvoid\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nint\n \nerr\n;\n\n\n    \nerr\n \n=\n \nbt_enable\n(\nbt_ready\n);\n\n    \nif\n \n(\nerr\n)\n \n{\n\n        \nprintk\n(\nBluetooth init failed (err %d)\n\\n\n,\n \nerr\n);\n\n        \nreturn\n;\n\n    \n}\n\n\n    \nbt_conn_cb_register\n(\nconn_callbacks\n);\n\n    \nbt_conn_auth_cb_register\n(\nauth_cb_display\n);\n\n\n    \n/* Implement notification. At the moment there is no suitable way\n\n\n     * of starting delayed work so we do it here\n\n\n     */\n\n    \nwhile\n \n(\n1\n)\n \n{\n\n        \nk_sleep\n(\nMSEC_PER_SEC\n);\n\n\n        \n/* Heartrate measurements simulation */\n\n        \nhrs_notify\n();\n\n\n        \n/* Battery level simulation */\n\n        \nbas_notify\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\u7f16\u8bd1\n\n\n$ \ncd\n ./zephyr-project/\n$ \nsource\n zephyr-env.sh\n\n$ \ncd\n ./samples/bluetooth/peripheral_hr/\n$ make \nBOARD\n=\nnrf52832_mdk\n\n\n# \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n  ...\n  CC      src/main.o\n  CC      src/../../gatt/gap.o\n  CC      src/../../gatt/hrs.o\n  CC      src/../../gatt/dis.o\n  CC      src/../../gatt/bas.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c\n\n\n\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d \n./outdir/nrf52832_mdk/zephyr.hex\n \u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex\n\n\n\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a \n115200bps\n\uff0c\u67e5\u770b\u8c03\u8bd5\u4fe1\u606f\uff1a\n\n\n$ screen /dev/cu.usbmodem1422 \n115200\n\n\n\n\n\n\n\n\n\u6253\u5f00 \nnRF Connect\n \u5e94\u7528\uff0c\u4f1a\u51fa\u73b0 \nZephyr Heartrate Sensor\n \u8bbe\u5907\uff0c\u8fde\u63a5\u540e\u5373\u53ef\u83b7\u5f97\u5fc3\u7387\u6570\u636e\uff1a\n\n\n\n\nWeb Bluetooth API\n\n\nWeb Bluetooth \u662f \nWeb Bluetooth Community Group\n \u63d0\u51fa\u7684\u4e00\u79cd\u89c4\u8303\uff0c\u65e8\u5728\u4e3a\u6d4f\u89c8\u5668\u63d0\u4f9b\u84dd\u7259\u8fde\u63a5\u529f\u80fd\uff0c\u76ee\u524d\u5df2\u7ecf\u5f97\u5230\u4e86 Google Chrome, Mozilla \u7b49\u6d4f\u89c8\u5668\u7684\u652f\u6301\uff0c\u672a\u6765\u8be5\u6807\u51c6\u53ef\u80fd\u4f1a\u63a8\u5e7f\u5f00\u6765\uff0c\u6210\u4e3a\u6807\u51c6\u3002\n\n\n\u5982\u679c\u4f60\u7684\u6d4f\u89c8\u5668\u652f\u6301 Web Bluetooth\uff0c\u4e0d\u59a8\u4f53\u9a8c\u4e00\u4e0b\uff1a\n\n\n\u4f53\u9a8c Web Bluetooth\n\n\n\n\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nGATT Services\n\n\nZephyr \u5b98\u65b9\u6587\u6863\n\n\nWeb Bluetooth API\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u5fc3\u7387\u8ba1"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#zephyr", 
            "text": "\u67e5\u770b\u672c\u4f8b\u6e90\u7801", 
            "title": "Zephyr \u5165\u95e8\u793a\u4f8b\uff1a\u4f4e\u529f\u8017\u84dd\u7259\u5fc3\u7387\u8ba1"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#_1", 
            "text": "\u672c\u4f8b\u5c06\u4f7f\u7528 Zephyr \u5b9e\u73b0\u4e00\u4e2a\u4f4e\u529f\u8017\u84dd\u7259\u5fc3\u7387\u8ba1\u5e94\u7528\uff0c\u8be5\u5e94\u7528\u4f1a\u5305\u542b\u4e09\u4e2a\u670d\u52a1\uff1a Heart Rate ,  Battery Serice ,  Device Information , \u4f60\u53ef\u4ee5\u901a\u8fc7\u624b\u673a App \u6216 Web Bluetooth \u4e0e\u5fc3\u7387\u8ba1\u8fde\u63a5\u5e76\u83b7\u53d6\u6570\u636e\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#_2", 
            "text": "#include   stdint.h  #include   stddef.h  #include   string.h  #include   errno.h  #include   misc/printk.h  #include   misc/byteorder.h  #include   zephyr.h  #include   bluetooth/bluetooth.h  #include   bluetooth/hci.h  #include   bluetooth/conn.h  #include   bluetooth/uuid.h  #include   bluetooth/gatt.h  #include   gatt/gap.h  #include   gatt/hrs.h  #include   gatt/dis.h  #include   gatt/bas.h  #define DEVICE_NAME     CONFIG_BLUETOOTH_DEVICE_NAME  #define DEVICE_NAME_LEN     (sizeof(DEVICE_NAME) - 1)  #define HEART_RATE_APPEARANCE   0x0341  struct   bt_conn   * default_conn ;  static   const   struct   bt_data   ad []   =   { \n     BT_DATA_BYTES ( BT_DATA_FLAGS ,   ( BT_LE_AD_GENERAL   |   BT_LE_AD_NO_BREDR )), \n     BT_DATA_BYTES ( BT_DATA_UUID16_ALL ,   0x0d ,   0x18 ,   0x0f ,   0x18 ,   0x05 ,   0x18 ),  };  static   const   struct   bt_data   sd []   =   { \n     BT_DATA ( BT_DATA_NAME_COMPLETE ,   DEVICE_NAME ,   DEVICE_NAME_LEN ),  };  static   void   connected ( struct   bt_conn   * conn ,   uint8_t   err )  { \n     if   ( err )   { \n         printk ( Connection failed (err %u) \\n ,   err ); \n     }   else   { \n         default_conn   =   bt_conn_ref ( conn ); \n         printk ( Connected \\n ); \n     }  }  static   void   disconnected ( struct   bt_conn   * conn ,   uint8_t   reason )  { \n     printk ( Disconnected (reason %u) \\n ,   reason ); \n\n     if   ( default_conn )   { \n         bt_conn_unref ( default_conn ); \n         default_conn   =   NULL ; \n     }  }  static   struct   bt_conn_cb   conn_callbacks   =   { \n     . connected   =   connected , \n     . disconnected   =   disconnected ,  };  static   void   bt_ready ( int   err )  { \n     if   ( err )   { \n         printk ( Bluetooth init failed (err %d) \\n ,   err ); \n         return ; \n     } \n\n     printk ( Bluetooth initialized \\n ); \n\n     gap_init ( DEVICE_NAME ,   HEART_RATE_APPEARANCE ); \n     hrs_init ( 0x01 ); \n     bas_init (); \n     dis_init ( CONFIG_SOC ,   Manufacturer ); \n\n     err   =   bt_le_adv_start ( BT_LE_ADV_CONN ,   ad ,   ARRAY_SIZE ( ad ), \n                   sd ,   ARRAY_SIZE ( sd )); \n     if   ( err )   { \n         printk ( Advertising failed to start (err %d) \\n ,   err ); \n         return ; \n     } \n\n     printk ( Advertising successfully started \\n );  }  static   void   auth_cancel ( struct   bt_conn   * conn )  { \n     char   addr [ BT_ADDR_LE_STR_LEN ]; \n\n     bt_addr_le_to_str ( bt_conn_get_dst ( conn ),   addr ,   sizeof ( addr )); \n\n     printk ( Pairing cancelled: %s \\n ,   addr );  }  static   struct   bt_conn_auth_cb   auth_cb_display   =   { \n     . cancel   =   auth_cancel ,  };  void   main ( void )  { \n     int   err ; \n\n     err   =   bt_enable ( bt_ready ); \n     if   ( err )   { \n         printk ( Bluetooth init failed (err %d) \\n ,   err ); \n         return ; \n     } \n\n     bt_conn_cb_register ( conn_callbacks ); \n     bt_conn_auth_cb_register ( auth_cb_display ); \n\n     /* Implement notification. At the moment there is no suitable way       * of starting delayed work so we do it here       */ \n     while   ( 1 )   { \n         k_sleep ( MSEC_PER_SEC ); \n\n         /* Heartrate measurements simulation */ \n         hrs_notify (); \n\n         /* Battery level simulation */ \n         bas_notify (); \n     }  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#_3", 
            "text": "$  cd  ./zephyr-project/\n$  source  zephyr-env.sh\n\n$  cd  ./samples/bluetooth/peripheral_hr/\n$ make  BOARD = nrf52832_mdk # \u7f16\u8bd1\u6210\u529f\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \n  ...\n  CC      src/main.o\n  CC      src/../../gatt/gap.o\n  CC      src/../../gatt/hrs.o\n  CC      src/../../gatt/dis.o\n  CC      src/../../gatt/bas.o\n  LD      src/built-in.o\n  AR      libzephyr.a\n  LINK    zephyr.lnk\n  IRQ     isr_tables.c\n  CC      isr_tables.o\n  LINK    zephyr.elf\n  HEX     zephyr.hex\n  BIN     zephyr.bin", 
            "title": "\u7f16\u8bd1"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#_4", 
            "text": "\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u62f7\u8d1d  ./outdir/nrf52832_mdk/zephyr.hex  \u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002  \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./outdir/nrf52832_mdk/zephyr.hex  \u6253\u5f00\u4e32\u53e3\uff0c\u6ce2\u7279\u7387\u4e3a  115200bps \uff0c\u67e5\u770b\u8c03\u8bd5\u4fe1\u606f\uff1a  $ screen /dev/cu.usbmodem1422  115200    \u6253\u5f00  nRF Connect  \u5e94\u7528\uff0c\u4f1a\u51fa\u73b0  Zephyr Heartrate Sensor  \u8bbe\u5907\uff0c\u8fde\u63a5\u540e\u5373\u53ef\u83b7\u5f97\u5fc3\u7387\u6570\u636e\uff1a", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#web-bluetooth-api", 
            "text": "Web Bluetooth \u662f  Web Bluetooth Community Group  \u63d0\u51fa\u7684\u4e00\u79cd\u89c4\u8303\uff0c\u65e8\u5728\u4e3a\u6d4f\u89c8\u5668\u63d0\u4f9b\u84dd\u7259\u8fde\u63a5\u529f\u80fd\uff0c\u76ee\u524d\u5df2\u7ecf\u5f97\u5230\u4e86 Google Chrome, Mozilla \u7b49\u6d4f\u89c8\u5668\u7684\u652f\u6301\uff0c\u672a\u6765\u8be5\u6807\u51c6\u53ef\u80fd\u4f1a\u63a8\u5e7f\u5f00\u6765\uff0c\u6210\u4e3a\u6807\u51c6\u3002  \u5982\u679c\u4f60\u7684\u6d4f\u89c8\u5668\u652f\u6301 Web Bluetooth\uff0c\u4e0d\u59a8\u4f53\u9a8c\u4e00\u4e0b\uff1a  \u4f53\u9a8c Web Bluetooth    Enjoy !", 
            "title": "Web Bluetooth API"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#_5", 
            "text": "GATT Services  Zephyr \u5b98\u65b9\u6587\u6863  Web Bluetooth API", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/zephyr/example-ble-heartrate/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/zephyr/example-more/", 
            "text": "\u66f4\u591a\u6709\u8da3\u7684\u793a\u4f8b\u6b63\u5728\u5f00\u53d1\u4e2d......\n\n\n\u6b22\u8fce\u4f60\u6765\u63d0\u4ea4\u793a\u4f8b\uff0c\u4f60\u5c06\u4f1a\u5e2e\u5230\u66f4\u591a\u7684\u4eba\uff01\n\n\nPull Requests", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/jerryscript/", 
            "text": "JerryScript\nA JavaScript engine for \nInternet of Things\n\n\n\n\nJerryScript \u5b98\u65b9\u7f51\u7ad9\n\n\n\u7b80\u4ecb\n\n\nJerryScript \u662f\u4e09\u661f\u5f00\u6e90\u7684\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u5f15\u64ce\uff0c\u4e3b\u8981\u9762\u5411\u8d44\u6e90\u53d7\u9650\u7684\u7269\u8054\u7f51\u8bbe\u5907\uff0c\u53ef\u5728 RAM\n64KB/ROM\n200KB \u7684\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\u3002\n\n\n\u4f18\u52bf\n\n\nJavaScript \u662f\u73b0\u5728\u975e\u5e38\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\uff0c\u5927\u91cf\u524d\u7aef\u5f00\u53d1\u8005\u5bf9\u5b83\u975e\u5e38\u719f\u6089\uff0c\u5c06\u7269\u8054\u7f51\u8bbe\u5907\u548c web \u751f\u6001\u7cfb\u7edf\uff08web ecosystem\uff09\u76f8\u4e92\u914d\u5408\uff0c\u5bf9\u4e8e\u6784\u5efa\u7269\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u6765\u8bf4\u662f\u4e2a\u660e\u667a\u7684\u9009\u62e9\uff0c\u8fd9\u4e5f\u6b63\u662f\u4e09\u661f\u5f00\u53d1 JerryScript \u7684\u521d\u8877\u3002\n\n\n\n\n\u53e6\u4e00\u65b9\u9762\uff0cJavaScript \u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u5f00\u53d1\u4e2d\u662f\u975e\u5e38\u4fbf\u5229\u7684\u3002\u5b83\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff0c\u8fd9\u5bf9\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u786c\u4ef6\u7f16\u7a0b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\n\n\n\n\n\u5173\u952e\u7279\u6027\n\n\n\u4ece\u5b98\u65b9\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u53ef\u4ee5\u4e86\u89e3\u5230\uff0cJerryScript \u5177\u5907\u4ee5\u4e0b\u5173\u952e\u7279\u6027\uff1a\n\n\n\n\n\u5b8c\u5168\u517c\u5bb9 ECMAScript 5.1\n\n\n\u82e5\u91c7\u7528 ARM Thumb-2 \u6307\u4ee4\u96c6\u7f16\u8bd1\uff0c\u4ec5\u9700 160KB \u7a7a\u95f4\n\n\n\u6ce8\u91cd\u5185\u5b58\u4f18\u5316\uff0c\u51cf\u5c11\u5185\u5b58\u6d88\u8017\n\n\n\u4f7f\u7528 C99 \u7f16\u5199\uff0c\u53ef\u79fb\u690d\u6027\u5f3a\n\n\n\u4e3a\u9884\u7f16\u8bd1 JavaScript \u6e90\u7801\u63d0\u4f9b\u5feb\u7167\u652f\u6301\n\n\n\u63d0\u4f9b\u6210\u719f\u7684 C API\uff0c\u8c03\u7528\u65b9\u4fbf\n\n\n\n\n\u66f4\u591a\u5185\u5bb9\u53ef\u67e5\u9605\uff1a\nJerryScript Wiki\n.\n\n\n\u786c\u4ef6\u652f\u6301\n\n\n\u5728\u5e7f\u5927\u793e\u533a\u5f00\u53d1\u8005\u7684\u52aa\u529b\u4e0b\uff0cJerryScript \u652f\u6301\u7684\u5e73\u53f0\u9010\u6e10\u591a\u4e86\u8d77\u6765\uff0c\u80fd\u591f\u652f\u6301\u7684\u786c\u4ef6\u4e5f\u5c06\u8d8a\u6765\u8d8a\u591a\u3002\n\n\n\u8fd9\u91cc\u8981\u7279\u522b\u63d0\u5230\u7684\u662f JerryScript \u5df2\u7ecf\u53ef\u4ee5\u652f\u6301 mbed OS 5 \u548c Zephyr\uff0c\u56e0\u6b64\u53ea\u8981\u5728\u786c\u4ef6\u8d44\u6e90\u6ee1\u8db3\u7684\u6761\u4ef6\u4e0b\uff0c\u7406\u8bba\u4e0a\u8fd9\u4e24\u4e2a RTOS \u652f\u6301\u7684\u786c\u4ef6\u662f\u53ef\u4ee5\u8dd1 JerryScript \u7684\uff0c\u8fd9\u4e5f\u5145\u5206\u4f53\u73b0\u4e86 JerryScript \u7684\u53ef\u79fb\u690d\u6027\u3002\n\n\n\u63a5\u4e0b\u6765\u7684\u6587\u7ae0\uff0c\u6211\u8ba1\u5212\u628a JerryScript \u5e26\u5230 nRF52832-MDK \u4e0a\u6765\uff0c\u8ba9 JS \u5f00\u53d1\u8005\u4f53\u9a8c\u4e00\u4e0b\u7269\u8054\u7f51\u5f00\u53d1\uff0c\u4e5f\u8ba9\u5d4c\u5165\u5f0f\u5f00\u53d1\u8005\u73a9\u4e00\u73a9 JavaScript\u3002\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nJerryScript \u5b98\u7f51\n\n\njerryscript-project/jerryscript\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/jerryscript/#jerryscripta-javascript-engine-for-internet-of-things", 
            "text": "JerryScript \u5b98\u65b9\u7f51\u7ad9", 
            "title": "JerryScriptA JavaScript engine for Internet of Things"
        }, 
        {
            "location": "/jerryscript/#_1", 
            "text": "JerryScript \u662f\u4e09\u661f\u5f00\u6e90\u7684\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u5f15\u64ce\uff0c\u4e3b\u8981\u9762\u5411\u8d44\u6e90\u53d7\u9650\u7684\u7269\u8054\u7f51\u8bbe\u5907\uff0c\u53ef\u5728 RAM 64KB/ROM 200KB \u7684\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/jerryscript/#_2", 
            "text": "JavaScript \u662f\u73b0\u5728\u975e\u5e38\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\uff0c\u5927\u91cf\u524d\u7aef\u5f00\u53d1\u8005\u5bf9\u5b83\u975e\u5e38\u719f\u6089\uff0c\u5c06\u7269\u8054\u7f51\u8bbe\u5907\u548c web \u751f\u6001\u7cfb\u7edf\uff08web ecosystem\uff09\u76f8\u4e92\u914d\u5408\uff0c\u5bf9\u4e8e\u6784\u5efa\u7269\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u6765\u8bf4\u662f\u4e2a\u660e\u667a\u7684\u9009\u62e9\uff0c\u8fd9\u4e5f\u6b63\u662f\u4e09\u661f\u5f00\u53d1 JerryScript \u7684\u521d\u8877\u3002   \u53e6\u4e00\u65b9\u9762\uff0cJavaScript \u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u5f00\u53d1\u4e2d\u662f\u975e\u5e38\u4fbf\u5229\u7684\u3002\u5b83\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff0c\u8fd9\u5bf9\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u786c\u4ef6\u7f16\u7a0b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002", 
            "title": "\u4f18\u52bf"
        }, 
        {
            "location": "/jerryscript/#_3", 
            "text": "\u4ece\u5b98\u65b9\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u53ef\u4ee5\u4e86\u89e3\u5230\uff0cJerryScript \u5177\u5907\u4ee5\u4e0b\u5173\u952e\u7279\u6027\uff1a   \u5b8c\u5168\u517c\u5bb9 ECMAScript 5.1  \u82e5\u91c7\u7528 ARM Thumb-2 \u6307\u4ee4\u96c6\u7f16\u8bd1\uff0c\u4ec5\u9700 160KB \u7a7a\u95f4  \u6ce8\u91cd\u5185\u5b58\u4f18\u5316\uff0c\u51cf\u5c11\u5185\u5b58\u6d88\u8017  \u4f7f\u7528 C99 \u7f16\u5199\uff0c\u53ef\u79fb\u690d\u6027\u5f3a  \u4e3a\u9884\u7f16\u8bd1 JavaScript \u6e90\u7801\u63d0\u4f9b\u5feb\u7167\u652f\u6301  \u63d0\u4f9b\u6210\u719f\u7684 C API\uff0c\u8c03\u7528\u65b9\u4fbf   \u66f4\u591a\u5185\u5bb9\u53ef\u67e5\u9605\uff1a JerryScript Wiki .", 
            "title": "\u5173\u952e\u7279\u6027"
        }, 
        {
            "location": "/jerryscript/#_4", 
            "text": "\u5728\u5e7f\u5927\u793e\u533a\u5f00\u53d1\u8005\u7684\u52aa\u529b\u4e0b\uff0cJerryScript \u652f\u6301\u7684\u5e73\u53f0\u9010\u6e10\u591a\u4e86\u8d77\u6765\uff0c\u80fd\u591f\u652f\u6301\u7684\u786c\u4ef6\u4e5f\u5c06\u8d8a\u6765\u8d8a\u591a\u3002  \u8fd9\u91cc\u8981\u7279\u522b\u63d0\u5230\u7684\u662f JerryScript \u5df2\u7ecf\u53ef\u4ee5\u652f\u6301 mbed OS 5 \u548c Zephyr\uff0c\u56e0\u6b64\u53ea\u8981\u5728\u786c\u4ef6\u8d44\u6e90\u6ee1\u8db3\u7684\u6761\u4ef6\u4e0b\uff0c\u7406\u8bba\u4e0a\u8fd9\u4e24\u4e2a RTOS \u652f\u6301\u7684\u786c\u4ef6\u662f\u53ef\u4ee5\u8dd1 JerryScript \u7684\uff0c\u8fd9\u4e5f\u5145\u5206\u4f53\u73b0\u4e86 JerryScript \u7684\u53ef\u79fb\u690d\u6027\u3002  \u63a5\u4e0b\u6765\u7684\u6587\u7ae0\uff0c\u6211\u8ba1\u5212\u628a JerryScript \u5e26\u5230 nRF52832-MDK \u4e0a\u6765\uff0c\u8ba9 JS \u5f00\u53d1\u8005\u4f53\u9a8c\u4e00\u4e0b\u7269\u8054\u7f51\u5f00\u53d1\uff0c\u4e5f\u8ba9\u5d4c\u5165\u5f0f\u5f00\u53d1\u8005\u73a9\u4e00\u73a9 JavaScript\u3002", 
            "title": "\u786c\u4ef6\u652f\u6301"
        }, 
        {
            "location": "/jerryscript/#_5", 
            "text": "JerryScript \u5b98\u7f51  jerryscript-project/jerryscript", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/jerryscript/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/jerryscript/getting-started/", 
            "text": "JerryScript \u5f00\u53d1\u521d\u4f53\u9a8c\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u901a\u8fc7\u4e00\u4e2a\u8fd0\u884c\u5728 nRF52832-MDK \u7684 REPL \u5e94\u7528\uff0c\u7b80\u5355\u4f53\u9a8c\u4e00\u4e0b\u4f7f\u7528 JerryScript \u8fdb\u884c\u5d4c\u5165\u5f0f\u5f00\u53d1\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u8fd9\u91cc\u4e3a\u4e86\u5feb\u901f\u4f53\u9a8c\uff0c\u6682\u4e0d\u4ecb\u7ecd\u5982\u4f55\u7f16\u8bd1\u56fa\u4ef6\uff0c\u540e\u7eed\u7ae0\u8282\u5c06\u4f1a\u6d89\u53ca\u5230\u3002\n\n\n\n\n\u4e0b\u8f7d\u56fa\u4ef6\n\n\n\u5728 \njanjongboom/mbed-js-repl-example\n \u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4e3a nRF52832-MDK \u9884\u7f16\u8bd1\u4e86\u8fd9\u4e2a\u57fa\u4e8e mbed OS 5 \u7684 JavaScript REPL \u5e94\u7528\uff1a\n\n\n\u83b7\u53d6\u6700\u65b0\u56fa\u4ef6\n\n\nnRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u5c06\u4e0b\u8f7d\u597d\u7684 \nhex\n \u6587\u4ef6\u62f7\u8d1d\u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./mbedos5-js-repl-example.hex\n\n\n\n\n\n\n\n\u4f53\u9a8c JavaScript\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u8fdb\u5165 REPL \u7ec8\u7aef\uff1a\n\n\n$ screen /dev/cu.usbmodem1412 \n115200\n\n\n\n\n\n\n\n\n\u4f60\u53ef\u4ee5\u968f\u4fbf\u8f93\u5165\u4e00\u4e9b JavaScript \u8bed\u53e5\uff0c\u89c2\u5bdf\u5176\u6267\u884c\u60c5\u51b5\uff0c\u4f8b\u5982\uff1a\n\n\n=\nundefined\n\n\n\n \nvar\n \ntest\n=\n0\n;\n \nfor\n \n(\nt\n=\n100\n;\n \nt\n1000\n;\n \nt\n++\n)\n \ntest\n+=\nt\n;\n \nprint\n \n(\nHi JS World! \n+\ntest\n);\n\n\nHi\n \nJS\n \nWorld\n!\n \n494550\n\n\n/* \u4e5f\u53ef\u4ee5\u590d\u6742\u4e00\u70b9\u7684\uff0c\u5b9a\u4e49\u4e2a\u51fd\u6570\u4ec0\u4e48\u7684 */\n\n\n \nfunction\n \nhello\n(\nt\n)\n \n{\nt\n=\nt\n*\n10\n;\nreturn\n \nt\n};\n \nprint\n(\nresult\n+\nhello\n(\n10.5\n));\n\n\nresult105\n\n\n=\nundefined\n\n\n\n\n\n\n\n\n\u5f53\u7136\uff0c\u64cd\u4f5c\u786c\u4ef6\u624d\u662f\u6211\u4eec\u6700\u60f3\u8981\uff0c\u8fd9\u91cc\u8ba9 LED1 \u53ef\u4ee5\u95ea\u70c1\u8d77\u6765\uff1a\n\n\n\n\n\u63d0\u793a\n\n\n\u4e3a\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u8fd9\u91cc\u505a\u4e86\u683c\u5f0f\u5316\u5904\u7406\uff0c\u5b9e\u9645\u8fd0\u884c\u662f\u9700\u8981\u5c06 JS \u4ee3\u7801\u8fdb\u884c\u538b\u7f29\u7684\u3002\n\n\n\n\nvar\n \nled\n \n=\n \nDigitalOut\n(\nLED1\n);\n \n\nvar\n \non\n \n=\n \nfalse\n;\n \n\n\nsetInterval\n(\nfunction\n()\n \n{\n \n    \non\n \n=\n \n!\non\n;\n \n    \nled\n.\nwrite\n(\non\n?\n \n0\n \n:\n \n1\n)\n\n\n},\n \n500\n);\n\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u5728 nRF52832-MDK \u4f53\u9a8c\u4e86\u4e00\u628a JavaScript \u7684\u65b0\u73a9\u6cd5\uff0c\u540e\u7eed\u6211\u5c06\u9646\u7eed\u5f00\u53d1\u4e00\u4e9b\u6709\u8da3\u7684\u793a\u4f8b\uff0c\u4e5f\u975e\u5e38\u6b22\u8fce\u4f60\u7684\u53c2\u4e0e\u3002\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nJerryScript \u5b98\u7f51\n\n\njerryscript-project/jerryscript\n\n\njanjongboom/mbed-js-repl-example\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u4f53\u9a8c JerryScript"
        }, 
        {
            "location": "/jerryscript/getting-started/#jerryscript", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u901a\u8fc7\u4e00\u4e2a\u8fd0\u884c\u5728 nRF52832-MDK \u7684 REPL \u5e94\u7528\uff0c\u7b80\u5355\u4f53\u9a8c\u4e00\u4e0b\u4f7f\u7528 JerryScript \u8fdb\u884c\u5d4c\u5165\u5f0f\u5f00\u53d1\u3002   \u63d0\u793a  \u8fd9\u91cc\u4e3a\u4e86\u5feb\u901f\u4f53\u9a8c\uff0c\u6682\u4e0d\u4ecb\u7ecd\u5982\u4f55\u7f16\u8bd1\u56fa\u4ef6\uff0c\u540e\u7eed\u7ae0\u8282\u5c06\u4f1a\u6d89\u53ca\u5230\u3002", 
            "title": "JerryScript \u5f00\u53d1\u521d\u4f53\u9a8c"
        }, 
        {
            "location": "/jerryscript/getting-started/#_1", 
            "text": "\u5728  janjongboom/mbed-js-repl-example  \u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4e3a nRF52832-MDK \u9884\u7f16\u8bd1\u4e86\u8fd9\u4e2a\u57fa\u4e8e mbed OS 5 \u7684 JavaScript REPL \u5e94\u7528\uff1a  \u83b7\u53d6\u6700\u65b0\u56fa\u4ef6  nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u5c06\u4e0b\u8f7d\u597d\u7684  hex  \u6587\u4ef6\u62f7\u8d1d\u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002   \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./mbedos5-js-repl-example.hex", 
            "title": "\u4e0b\u8f7d\u56fa\u4ef6"
        }, 
        {
            "location": "/jerryscript/getting-started/#javascript", 
            "text": "\u6253\u5f00\u4e32\u53e3\uff0c\u8fdb\u5165 REPL \u7ec8\u7aef\uff1a  $ screen /dev/cu.usbmodem1412  115200    \u4f60\u53ef\u4ee5\u968f\u4fbf\u8f93\u5165\u4e00\u4e9b JavaScript \u8bed\u53e5\uff0c\u89c2\u5bdf\u5176\u6267\u884c\u60c5\u51b5\uff0c\u4f8b\u5982\uff1a  = undefined    var   test = 0 ;   for   ( t = 100 ;   t 1000 ;   t ++ )   test += t ;   print   ( Hi JS World!  + test );  Hi   JS   World !   494550  /* \u4e5f\u53ef\u4ee5\u590d\u6742\u4e00\u70b9\u7684\uff0c\u5b9a\u4e49\u4e2a\u51fd\u6570\u4ec0\u4e48\u7684 */    function   hello ( t )   { t = t * 10 ; return   t };   print ( result + hello ( 10.5 ));  result105  = undefined    \u5f53\u7136\uff0c\u64cd\u4f5c\u786c\u4ef6\u624d\u662f\u6211\u4eec\u6700\u60f3\u8981\uff0c\u8fd9\u91cc\u8ba9 LED1 \u53ef\u4ee5\u95ea\u70c1\u8d77\u6765\uff1a   \u63d0\u793a  \u4e3a\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u8fd9\u91cc\u505a\u4e86\u683c\u5f0f\u5316\u5904\u7406\uff0c\u5b9e\u9645\u8fd0\u884c\u662f\u9700\u8981\u5c06 JS \u4ee3\u7801\u8fdb\u884c\u538b\u7f29\u7684\u3002   var   led   =   DigitalOut ( LED1 );   var   on   =   false ;   setInterval ( function ()   {  \n     on   =   ! on ;  \n     led . write ( on ?   0   :   1 )  },   500 );    \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u5728 nRF52832-MDK \u4f53\u9a8c\u4e86\u4e00\u628a JavaScript \u7684\u65b0\u73a9\u6cd5\uff0c\u540e\u7eed\u6211\u5c06\u9646\u7eed\u5f00\u53d1\u4e00\u4e9b\u6709\u8da3\u7684\u793a\u4f8b\uff0c\u4e5f\u975e\u5e38\u6b22\u8fce\u4f60\u7684\u53c2\u4e0e\u3002  Enjoy !", 
            "title": "\u4f53\u9a8c JavaScript"
        }, 
        {
            "location": "/jerryscript/getting-started/#_2", 
            "text": "JerryScript \u5b98\u7f51  jerryscript-project/jerryscript  janjongboom/mbed-js-repl-example", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/jerryscript/getting-started/#_3", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/espruino/", 
            "text": "Espruino\nA JavaScript interpreter for microcontrollers\n\n\nEspruino \u5b98\u65b9\u7f51\u7ad9\n\n\n\u7b80\u4ecb\n\n\nEspruino\n \u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u89e3\u6790\u5668\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash \n 8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\u3002\n\n\nEspruino \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u4f7f\u7528 MPL-2.0 \u534f\u8bae\u5f00\u6e90\uff0c\u5176\u8bbe\u8ba1\u8005\u662f\u6765\u81ea\u82f1\u56fd\u7684 Gordon Williams\u3002Gordon Williams \u8fd8\u4e3a Espruino \u5f00\u53d1\u4e86\u5f88\u591a\u5468\u8fb9\u786c\u4ef6\uff0c\u611f\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5\u524d\u5f80\u5b98\u7f51\u4e86\u89e3\u3002\n\n\n\u5173\u952e\u7279\u6027\n\n\n\u76f8\u6bd4\u4e8e\u5176\u4ed6 JavaScript \u89e3\u6790\u5668\uff0cEspruino \u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\n\n\n\n\n\n\n\u8f7b\u91cf\u7ea7\n \u2014\u2014 \u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash \n 8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\uff1b\n\n\n\n\n\n\n\u4e8b\u4ef6\u9a71\u52a8\n \u2014\u2014 \u4e0e node.js \u7c7b\u4f3c\uff0cEspruino \u91c7\u7528\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\uff0c\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff1b\n\n\n\n\n\n\n\u7b80\u5355\u6613\u7528\n \u2014\u2014 Espruino \u63d0\u4f9b\u4e30\u5bcc\u7684\u5916\u8bbe\u5e93\uff0c\u5bf9\u786c\u4ef6\u5c42\u505a\u4e86\u5f88\u597d\u7684\u62bd\u8c61\uff0c\u53ea\u8981\u4f1a\u5199 JavaScript \u5c31\u80fd\u7528\u5b83\u6765\u63a7\u5236\u786c\u4ef6\uff1b\n\n\n\n\n\n\n\u8de8\u5e73\u53f0\u5f00\u53d1\n \u2014\u2014 Espruino \u63d0\u4f9b\u4e00\u4e2a\u57fa\u4e8e Chrome \u6d4f\u89c8\u7684 Web IDE\uff0c\u53ef\u4ee5\u8fdb\u884c\u8de8\u5e73\u53f0\u5f00\u53d1\uff1b\n\n\n\n\n\n\n\u65e0\u7ebf\u8c03\u8bd5\n \u2014\u2014 Espruino Web IDE \u4f7f\u7528 Web Bluetooth API\uff0c\u53ef\u4ee5\u63d0\u4f9b\u65e0\u7ebf\u4e0b\u8f7d\u8c03\u8bd5 JavaScript \u4ee3\u7801\u529f\u80fd\u3002\n\n\n\n\n\n\n\u786c\u4ef6\u652f\u6301\n\n\n\u9664\u4e86\u652f\u6301 Espruino \u5b98\u65b9\u53d1\u5e03\u7684\u786c\u4ef6\u5916\uff0cEspruino \u4e5f\u53ef\u79fb\u690d\u5230\u5176\u4ed6\u786c\u4ef6\u4e0a\uff0c\u76ee\u524d\u652f\u6301\u7684\u6709 STM32\u7cfb\u5217\uff0cESP8266 \n ESP32\uff0cnRF5x\u7cfb\u5217\u7b49\u3002\n\n\nnRF52832-MDK \u53ea\u9700\u5728\u5b98\u65b9\u5f00\u53d1\u677f\u7684\u57fa\u7840\u4e0a\uff0c\u4fee\u6539\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6\u4fbf\u53ef\u8f7b\u677e\u652f\u6301\uff1a\n\n\nEspruino for nRF52832-MDK\n\n\n\n\n\u63d0\u793a\n\n\nmaster\n \u4e3b\u5206\u652f\u4e3a Espruino \u5b98\u65b9\u7684\u6e90\u7801\uff0c\nnrf52832-mdk\n \u5206\u652f\u5305\u542b\u652f\u6301 nRF52832-MDK \u7684\u4ee3\u7801\u3002\n\n\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nEspruino \u5b98\u65b9\u7f51\u7ad9\n\n\nEspruino \u6e90\u7801\u4ed3\u5e93\n\n\n\u652f\u6301 nRF52832-MDK \u7684\u4ed3\u5e93\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/espruino/#espruinoa-javascript-interpreter-for-microcontrollers", 
            "text": "Espruino \u5b98\u65b9\u7f51\u7ad9", 
            "title": "EspruinoA JavaScript interpreter for microcontrollers"
        }, 
        {
            "location": "/espruino/#_1", 
            "text": "Espruino  \u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u89e3\u6790\u5668\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash   8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\u3002  Espruino \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u4f7f\u7528 MPL-2.0 \u534f\u8bae\u5f00\u6e90\uff0c\u5176\u8bbe\u8ba1\u8005\u662f\u6765\u81ea\u82f1\u56fd\u7684 Gordon Williams\u3002Gordon Williams \u8fd8\u4e3a Espruino \u5f00\u53d1\u4e86\u5f88\u591a\u5468\u8fb9\u786c\u4ef6\uff0c\u611f\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5\u524d\u5f80\u5b98\u7f51\u4e86\u89e3\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/espruino/#_2", 
            "text": "\u76f8\u6bd4\u4e8e\u5176\u4ed6 JavaScript \u89e3\u6790\u5668\uff0cEspruino \u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a    \u8f7b\u91cf\u7ea7  \u2014\u2014 \u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash   8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\uff1b    \u4e8b\u4ef6\u9a71\u52a8  \u2014\u2014 \u4e0e node.js \u7c7b\u4f3c\uff0cEspruino \u91c7\u7528\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\uff0c\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff1b    \u7b80\u5355\u6613\u7528  \u2014\u2014 Espruino \u63d0\u4f9b\u4e30\u5bcc\u7684\u5916\u8bbe\u5e93\uff0c\u5bf9\u786c\u4ef6\u5c42\u505a\u4e86\u5f88\u597d\u7684\u62bd\u8c61\uff0c\u53ea\u8981\u4f1a\u5199 JavaScript \u5c31\u80fd\u7528\u5b83\u6765\u63a7\u5236\u786c\u4ef6\uff1b    \u8de8\u5e73\u53f0\u5f00\u53d1  \u2014\u2014 Espruino \u63d0\u4f9b\u4e00\u4e2a\u57fa\u4e8e Chrome \u6d4f\u89c8\u7684 Web IDE\uff0c\u53ef\u4ee5\u8fdb\u884c\u8de8\u5e73\u53f0\u5f00\u53d1\uff1b    \u65e0\u7ebf\u8c03\u8bd5  \u2014\u2014 Espruino Web IDE \u4f7f\u7528 Web Bluetooth API\uff0c\u53ef\u4ee5\u63d0\u4f9b\u65e0\u7ebf\u4e0b\u8f7d\u8c03\u8bd5 JavaScript \u4ee3\u7801\u529f\u80fd\u3002", 
            "title": "\u5173\u952e\u7279\u6027"
        }, 
        {
            "location": "/espruino/#_3", 
            "text": "\u9664\u4e86\u652f\u6301 Espruino \u5b98\u65b9\u53d1\u5e03\u7684\u786c\u4ef6\u5916\uff0cEspruino \u4e5f\u53ef\u79fb\u690d\u5230\u5176\u4ed6\u786c\u4ef6\u4e0a\uff0c\u76ee\u524d\u652f\u6301\u7684\u6709 STM32\u7cfb\u5217\uff0cESP8266   ESP32\uff0cnRF5x\u7cfb\u5217\u7b49\u3002  nRF52832-MDK \u53ea\u9700\u5728\u5b98\u65b9\u5f00\u53d1\u677f\u7684\u57fa\u7840\u4e0a\uff0c\u4fee\u6539\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6\u4fbf\u53ef\u8f7b\u677e\u652f\u6301\uff1a  Espruino for nRF52832-MDK   \u63d0\u793a  master  \u4e3b\u5206\u652f\u4e3a Espruino \u5b98\u65b9\u7684\u6e90\u7801\uff0c nrf52832-mdk  \u5206\u652f\u5305\u542b\u652f\u6301 nRF52832-MDK \u7684\u4ee3\u7801\u3002", 
            "title": "\u786c\u4ef6\u652f\u6301"
        }, 
        {
            "location": "/espruino/#_4", 
            "text": "Espruino \u5b98\u65b9\u7f51\u7ad9  Espruino \u6e90\u7801\u4ed3\u5e93  \u652f\u6301 nRF52832-MDK \u7684\u4ed3\u5e93", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/espruino/#_5", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/espruino/getting-started/", 
            "text": "Espruino \u5feb\u901f\u5165\u95e8\u6307\u5357\n\n\n\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 nRF52832-MDK \u5feb\u901f\u73a9\u8f6c Espruino\uff0c\u7b80\u5355\u4f53\u9a8c\u4e00\u4e0b\u4f7f\u7528 JavaScript \u8fdb\u884c\u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1\u3002\n\n\n\u5f00\u53d1\u73af\u5883\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Espruino Web IDE \u8fdb\u884c\u5f00\u53d1\uff1a\n\n\n\u5b89\u88c5 Chrome \u6d4f\u89c8\u5668\n\n\n\u8bf7\u786e\u4fdd\u4f60\u7684\u7535\u8111\u5df2\u7ecf\u5b89\u88c5\u597d \nChrome \u6d4f\u89c8\u5668\n\uff0c\u6700\u65b0\u7248\u7684 Chrome \u6d4f\u89c8\u5668\u5df2\u7ecf\u652f\u6301 Web Bluetooth API\uff0c\u5982\u679c\u4f60\u60f3\u4f53\u9a8c\u65e0\u7ebf\u4e0b\u8f7d\u7684\u8bdd\uff0c\u9700\u8981\u5347\u7ea7\u5230\u6700\u65b0\u7248\uff1b\n\n\n\n\n\u5b89\u88c5 Espruino Web IDE\n\n\n\u70b9\u51fb\u4ee5\u4e0b\u6309\u94ae\u5b89\u88c5 Espruino Web IDE\uff0c\u8fd9\u662f Chrome \u7684\u6269\u5c55\u7a0b\u5e8f\uff0c\u53ef\u7528\u4e8e\u7f16\u8f91\u3001\u4e0b\u8f7d JavaScript \u4ee3\u7801\u3002\n\n\nEspruino Web IDE\n\n\n\n\n\u4e0b\u8f7d\u56fa\u4ef6\n\n\n\u8fd9\u91cc\u4e3a\u4e86\u80fd\u591f\u5feb\u901f\u4f7f\u7528\uff0c\u6211\u4e3a nRF52832-MDK \u9884\u7f16\u8bd1\u4e86\u6700\u65b0\u7248\u7684\u56fa\u4ef6\uff1a\n\n\n\u83b7\u53d6\u6700\u65b0\u56fa\u4ef6\n\n\nnRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u5c06\u4e0b\u8f7d\u597d\u7684 \nhex\n \u6587\u4ef6\u62f7\u8d1d\u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002\n\n\n\n\n\u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -ce ./espruino_1v91.2835_nrf52832_mdk.hex\n\n\n\n\n\n\n\n\u4f53\u9a8c JavaScript\n\n\n\u542f\u52a8 Espruino Web IDE\n\uff0c\u901a\u8fc7 Web Bluetooth \u6216\u8005 DAPLink \u7684\u4e32\u53e3\u8fde\u63a5 nRF52832-MDK\uff1a\n\n\n\n\n\u8fde\u63a5\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u7ec8\u7aef\u8f93\u5165\u4e00\u4e9b JavaScript \u8bed\u53e5\uff0c\u89c2\u5bdf\u5176\u6267\u884c\u60c5\u51b5\uff1a\n\n\n \nvar\n \ntest\n=\n0\n;\n \nfor\n \n(\nt\n=\n100\n;\n \nt\n1000\n;\n \nt\n++\n)\n \ntest\n+=\nt\n;\n \nprint\n \n(\nHi JS World! \n+\ntest\n);\n\n\nHi\n \nJS\n \nWorld\n!\n \n494550\n\n\n=\nundefined\n\n\n\n/* \u5f53\u7136\u4e5f\u53ef\u4ee5\u590d\u6742\u4e00\u70b9\u7684 */\n\n\n \nfunction\n \nhello\n(\nt\n)\n \n{\nt\n=\nt\n*\n10\n;\nreturn\n \nt\n};\n \nprint\n(\nresult\n+\nhello\n(\n10.5\n));\n\n\nresult105\n\n\n=\nundefined\n\n\n\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u76f4\u63a5\u64cd\u63a7\u786c\u4ef6\uff0c\u8ba9 LED1 \u95ea\u70c1\u8d77\u6765\uff1a\n\n\nvar\n  \non\n \n=\n \nfalse\n;\n\n\nsetInterval\n(\nfunction\n()\n \n{\n\n  \non\n \n=\n \n!\non\n;\n\n  \nLED1\n.\nwrite\n(\non\n);\n\n\n},\n \n500\n);\n\n\n\n\n\n\n\n\n\n\n\u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u5728 nRF52832-MDK \u6210\u529f\u4f7f\u7528 Espruino\uff0c\u5e76\u7b80\u5355\u4f53\u9a8c\u4e86\u4e00\u4e0b JavaScript \u64cd\u63a7\u5d4c\u5165\u5f0f\u786c\u4ef6\u7684\u73a9\u6cd5\u3002\u540e\u9762\u6211\u5c06\u9646\u7eed\u5f00\u53d1\u4e00\u4e9b\u6709\u8da3\u7684\u793a\u4f8b\uff0c\u4e5f\u975e\u5e38\u6b22\u8fce\u4f60\u7684\u53c2\u4e0e\u3002\n\n\nEnjoy !\n\n\n\u63a8\u8350\u8d44\u6e90\n\n\n\n\nEspruino API \u6587\u6863\n\n\nEspruino \u6e90\u7801\u4ed3\u5e93\n\n\n\u652f\u6301 nRF52832-MDK \u7684\u4ed3\u5e93\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/espruino/getting-started/#espruino", 
            "text": "\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 nRF52832-MDK \u5feb\u901f\u73a9\u8f6c Espruino\uff0c\u7b80\u5355\u4f53\u9a8c\u4e00\u4e0b\u4f7f\u7528 JavaScript \u8fdb\u884c\u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1\u3002", 
            "title": "Espruino \u5feb\u901f\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/espruino/getting-started/#_1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Espruino Web IDE \u8fdb\u884c\u5f00\u53d1\uff1a", 
            "title": "\u5f00\u53d1\u73af\u5883"
        }, 
        {
            "location": "/espruino/getting-started/#chrome", 
            "text": "\u8bf7\u786e\u4fdd\u4f60\u7684\u7535\u8111\u5df2\u7ecf\u5b89\u88c5\u597d  Chrome \u6d4f\u89c8\u5668 \uff0c\u6700\u65b0\u7248\u7684 Chrome \u6d4f\u89c8\u5668\u5df2\u7ecf\u652f\u6301 Web Bluetooth API\uff0c\u5982\u679c\u4f60\u60f3\u4f53\u9a8c\u65e0\u7ebf\u4e0b\u8f7d\u7684\u8bdd\uff0c\u9700\u8981\u5347\u7ea7\u5230\u6700\u65b0\u7248\uff1b", 
            "title": "\u5b89\u88c5 Chrome \u6d4f\u89c8\u5668"
        }, 
        {
            "location": "/espruino/getting-started/#espruino-web-ide", 
            "text": "\u70b9\u51fb\u4ee5\u4e0b\u6309\u94ae\u5b89\u88c5 Espruino Web IDE\uff0c\u8fd9\u662f Chrome \u7684\u6269\u5c55\u7a0b\u5e8f\uff0c\u53ef\u7528\u4e8e\u7f16\u8f91\u3001\u4e0b\u8f7d JavaScript \u4ee3\u7801\u3002  Espruino Web IDE", 
            "title": "\u5b89\u88c5 Espruino Web IDE"
        }, 
        {
            "location": "/espruino/getting-started/#_2", 
            "text": "\u8fd9\u91cc\u4e3a\u4e86\u80fd\u591f\u5feb\u901f\u4f7f\u7528\uff0c\u6211\u4e3a nRF52832-MDK \u9884\u7f16\u8bd1\u4e86\u6700\u65b0\u7248\u7684\u56fa\u4ef6\uff1a  \u83b7\u53d6\u6700\u65b0\u56fa\u4ef6  nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u5c06\u4e0b\u8f7d\u597d\u7684  hex  \u6587\u4ef6\u62f7\u8d1d\u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u6309\u4e0b\u590d\u4f4d\u952e\u8fd0\u884c\u3002   \u6216\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u8fd0\u884c\uff1a  $ pyocd-flashtool -d debug -t nrf52 -ce ./espruino_1v91.2835_nrf52832_mdk.hex", 
            "title": "\u4e0b\u8f7d\u56fa\u4ef6"
        }, 
        {
            "location": "/espruino/getting-started/#javascript", 
            "text": "\u542f\u52a8 Espruino Web IDE \uff0c\u901a\u8fc7 Web Bluetooth \u6216\u8005 DAPLink \u7684\u4e32\u53e3\u8fde\u63a5 nRF52832-MDK\uff1a   \u8fde\u63a5\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u7ec8\u7aef\u8f93\u5165\u4e00\u4e9b JavaScript \u8bed\u53e5\uff0c\u89c2\u5bdf\u5176\u6267\u884c\u60c5\u51b5\uff1a    var   test = 0 ;   for   ( t = 100 ;   t 1000 ;   t ++ )   test += t ;   print   ( Hi JS World!  + test );  Hi   JS   World !   494550  = undefined  /* \u5f53\u7136\u4e5f\u53ef\u4ee5\u590d\u6742\u4e00\u70b9\u7684 */    function   hello ( t )   { t = t * 10 ; return   t };   print ( result + hello ( 10.5 ));  result105  = undefined    \u4e5f\u53ef\u4ee5\u76f4\u63a5\u64cd\u63a7\u786c\u4ef6\uff0c\u8ba9 LED1 \u95ea\u70c1\u8d77\u6765\uff1a  var    on   =   false ;  setInterval ( function ()   { \n   on   =   ! on ; \n   LED1 . write ( on );  },   500 );     \u81f3\u6b64\uff0c\u4f60\u5df2\u7ecf\u5728 nRF52832-MDK \u6210\u529f\u4f7f\u7528 Espruino\uff0c\u5e76\u7b80\u5355\u4f53\u9a8c\u4e86\u4e00\u4e0b JavaScript \u64cd\u63a7\u5d4c\u5165\u5f0f\u786c\u4ef6\u7684\u73a9\u6cd5\u3002\u540e\u9762\u6211\u5c06\u9646\u7eed\u5f00\u53d1\u4e00\u4e9b\u6709\u8da3\u7684\u793a\u4f8b\uff0c\u4e5f\u975e\u5e38\u6b22\u8fce\u4f60\u7684\u53c2\u4e0e\u3002  Enjoy !", 
            "title": "\u4f53\u9a8c JavaScript"
        }, 
        {
            "location": "/espruino/getting-started/#_3", 
            "text": "Espruino API \u6587\u6863  Espruino \u6e90\u7801\u4ed3\u5e93  \u652f\u6301 nRF52832-MDK \u7684\u4ed3\u5e93", 
            "title": "\u63a8\u8350\u8d44\u6e90"
        }, 
        {
            "location": "/espruino/getting-started/#_4", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/ordering/", 
            "text": "\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u8d2d\u4e70\u786c\u4ef6\uff1a\n\n\n\u5728\u7ebf\u8d2d\u4e70\n\n\n\u6216\u8005\u626b\u63cf\u4e0b\u65b9\u5546\u54c1\u4e8c\u7ef4\u7801\u8d2d\u4e70\uff1a", 
            "title": "\u8d2d\u4e70\u786c\u4ef6"
        }, 
        {
            "location": "/CONTRIBUTING/", 
            "text": "\u63d0\u793a\n\n\n\u5efa\u8bae\u5728\u53cd\u9988\u95ee\u9898\u6216 Pull Requests \u65f6\uff0c\u5148\u641c\u7d22\u67e5\u770b\u8be5\u95ee\u9898\u662f\u5426\u5df2\u7ecf\u6709\u4eba\u63d0\u4ea4\u6216\u8005\u5df2\u7ecf\u89e3\u51b3\u4e86\uff0c\u907f\u514d\u6d6a\u8d39\u65f6\u95f4\u3002\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u53cd\u9988\u3002\n\n\nNew Issue\n\n\n\u8d21\u732e\n\n\n\u7531\u4e8e\u4e2a\u4eba\u6280\u672f\u6c34\u5e73\u4ee5\u53ca\u7cbe\u529b\u6709\u9650\uff0c\u8fd9\u4e2a\u9879\u76ee\u9700\u8981\u66f4\u591a\u5f00\u6e90\u7231\u597d\u8005\u7684\u63a8\u8fdb\uff0c\u975e\u5e38\u671f\u5f85\u4f60\u7684\u53c2\u4e0e\uff01\n\n\nPull Requests", 
            "title": "\u53cd\u9988\u4e0e\u8d21\u732e"
        }, 
        {
            "location": "/CONTRIBUTING/#_1", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u53cd\u9988\u3002  New Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/CONTRIBUTING/#_2", 
            "text": "\u7531\u4e8e\u4e2a\u4eba\u6280\u672f\u6c34\u5e73\u4ee5\u53ca\u7cbe\u529b\u6709\u9650\uff0c\u8fd9\u4e2a\u9879\u76ee\u9700\u8981\u66f4\u591a\u5f00\u6e90\u7231\u597d\u8005\u7684\u63a8\u8fdb\uff0c\u975e\u5e38\u671f\u5f85\u4f60\u7684\u53c2\u4e0e\uff01  Pull Requests", 
            "title": "\u8d21\u732e"
        }, 
        {
            "location": "/about-me/", 
            "text": "\u6211\u662f\u4e00\u540d Freelancer\uff0c\u70ed\u8877\u4e8e\u5f00\u6e90\u786c\u4ef6\u3001\u5f00\u6e90\u8f6f\u4ef6\uff0c\u4e00\u5fc3\u60f3\u8981\u505a\u51fa\u8ba9\u4eba\u60ca\u8273\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5c06\u5176\u5f00\u6e90\u51fa\u6765\u3002\n\n\n\u5173\u6ce8\u6211\n\n\n\u5982\u679c\u4f60\u5bf9\u6211\u6709\u70b9\u611f\u5174\u8da3\uff0c\u4ea6\u53ef\u901a\u8fc7\u4ee5\u4e0b\u6e20\u9053\u5173\u6ce8\u6216\u8054\u7cfb\u6211\uff1a\n\n\n\n\n\n\n\u5fae\u4fe1\u516c\u4f17\u53f7\uff1a\u300c\u9020\u7269\u90a6\u300d(\u5fae\u4fe1\u53f7\uff1azaowubang)\n\n\n\n\n\n\n\n\u4e2a\u4eba\u535a\u5ba2\uff1a\n\u521b\u5ba2\u65e5\u8bb0\n\n\n\n\n\n\n\u77e5\u4e4e\u4e13\u680f\uff1a\n\u521b\u5ba2\u65e5\u8bb0\n\n\n\n\n\n\n\u90ae\u7bb1\uff1a\n\n\n\n\n\n\n\u8d5e\u52a9\n\n\n\u5982\u679c\u4f60\u60f3\u652f\u6301\u6211\u7ee7\u7eed\u5f00\u53d1\u66f4\u591a\u5f00\u6e90\u9879\u76ee\uff0c\u53ef\u4ee5\u8bf7\u6211\u559d\u676f\u5496\u5561\u2615\ufe0f\uff1a", 
            "title": "\u5173\u4e8e\u4f5c\u8005"
        }, 
        {
            "location": "/about-me/#_1", 
            "text": "\u5982\u679c\u4f60\u5bf9\u6211\u6709\u70b9\u611f\u5174\u8da3\uff0c\u4ea6\u53ef\u901a\u8fc7\u4ee5\u4e0b\u6e20\u9053\u5173\u6ce8\u6216\u8054\u7cfb\u6211\uff1a    \u5fae\u4fe1\u516c\u4f17\u53f7\uff1a\u300c\u9020\u7269\u90a6\u300d(\u5fae\u4fe1\u53f7\uff1azaowubang)    \u4e2a\u4eba\u535a\u5ba2\uff1a \u521b\u5ba2\u65e5\u8bb0    \u77e5\u4e4e\u4e13\u680f\uff1a \u521b\u5ba2\u65e5\u8bb0    \u90ae\u7bb1\uff1a", 
            "title": "\u5173\u6ce8\u6211"
        }, 
        {
            "location": "/about-me/#_2", 
            "text": "\u5982\u679c\u4f60\u60f3\u652f\u6301\u6211\u7ee7\u7eed\u5f00\u53d1\u66f4\u591a\u5f00\u6e90\u9879\u76ee\uff0c\u53ef\u4ee5\u8bf7\u6211\u559d\u676f\u5496\u5561\u2615\ufe0f\uff1a", 
            "title": "\u8d5e\u52a9"
        }
    ]
}